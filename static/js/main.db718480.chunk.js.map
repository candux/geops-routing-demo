{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","store/actions/Map.jsx","constants.js","utils.jsx","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","store/prop-types.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","Components/RouteInfosDialog/RouteInfosDialog.jsx","Components/RouteInfosDialog/index.js","config/styleConfig.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","center","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","showLoadingBar","selectedRoute","isRouteInfoOpen","dialogPosition","x","y","setCenter","state","action","updatedState","setCurrentStops","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","setShowLoadingBar","setSelectedRoute","setIsRouteInfoOpen","setDialogPosition","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","GRAPHHOPPER_MOTS","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","decimal","transform","map","c","toFixed","renderSecondary","id","code","countryCode","ifopt","display","push","filter","l","join","SearchResults","props","currentSearchResults","processClickedResultHandler","length","Paper","square","elevation","List","component","aria-label","searchResult","index","ListItem","onClick","button","key","nextId","ListItemIcon","ListItemText","primary","properties","secondary","country_code","selected","defaultProps","propTypeCoordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","oneOfType","currentStop","features","useStyles","makeStyles","gridContainer","width","padding","boxSizing","color","height","fieldWrapper","maxWidth","buttonWrapper","SearchField","val","classes","dispatch","useDispatch","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","onZoomRouteClick","isActiveRoute","onPanViaClick","inputReference","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","addNextHopDisabled","Tooltip","IconButton","className","size","fontSize","Grid","item","xs","disabled","container","spacing","alignItems","TextField","style","inputRef","label","onChange","e","value","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","target","select","TabPanel","children","Typography","role","hidden","aria-labelledby","tabs","tab","minWidth","dropDown","backgroundColor","selectInput","checkbox","abortController","AbortController","RoutingMenu","mots","stationSearchUrl","APIKey","validateMots","motsArray","validationMots","currentMotsArray","mot","includes","forEach","providedMot","requestedMot","find","icon","currentMotsVal","otherMotsVal","useSelector","elRefs","React","useRef","current","fill","el","i","createRef","useState","currentMots","setCurrentMotState","otherMots","lastChangedFieldIdx","setLastChangedFieldIdx","setCurrentSearchResults","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","undefined","currentOtherMot","setCurrentOtherMot","useEffect","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","_","clone","tempGeoJSON","reverse","coordinates","handleMotChange","newMot","fieldIndex","currStops","indexToInsertAt","splice","Object","keys","k","parseInt","indexToRemoveFrom","abort","signal","reqUrl","fetch","then","response","json","error","catch","err","console","warn","firstSearchResult","updateCurrentSearchResults","toString","Tabs","indicatorColor","textColor","singleMot","Tab","FormControl","Select","renderValue","root","labelId","disableUnderline","displayEmpty","evt","MenuItem","onDragEnd","destination","source","removed","newSource","droppableId","provided","droppableProps","ref","innerRef","background","draggableId","prov","snpsht","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","placeholder","Checkbox","checked","inputProps","LinearProgress","RouteInfosDialog","arr","nth","route","getLength","getGeometry","distanceUnit","altitudesArray","getFlatCoordinates","data","alt","idx","ticks","Dialog","isOpen","isDraggable","onDragStop","position","lastX","lastY","classNameHeader","classNameCloseBt","cancelDraggable","onClose","axisLine","tickLine","offset","dataKey","tickFormatter","isMeter","Math","round","vertical","dot","stroke","strokeWidth","lineStyler","lineStyle","Style","Stroke","lineDash","railLineStyle","railLineHoveredStyle","busLineStyle","busLineHoveredStyle","pedestrianLineStyle","pedestrianLineHoveredStyle","carLineStyle","carLineHoveredStyle","othersLineStyle","othersLineHoveredStyle","railPointStyle","image","Circle","radius","Fill","pedestrianPointStyle","carPointStyle","busPointStyle","othersPointStyle","pointStyleFunction","lineStyleFunction","isHovered","MapComponent","onMapMoved","onSetCenter","newCenter","getView","getCenter","onFeaturesClick","feats","onSetIsRouteInfoOpen","f","getType","drawNewRoute","hops","routingUrl","onShowNotification","onSetShowLoadingBar","onSetSelectedRoute","uid","routeVectorSource","clear","format","GeoJSON","dataProjection","featureProjection","addFeatures","readFeatures","setIsActiveRoute","getFeatures","routeVectorLayer","olLayer","setStyle","onSetClickLocation","hoveredFeature","hoveredRoute","initialRouteDrag","hoveredStationOpen","hoveredStationName","projection","layerService","LayerService","ConfigReader","readConfig","visible","isBaseLayer","url","markerVectorSource","VectorSource","addLayer","Layer","VectorLayer","zIndex","markerVectorLayer","getLayer","layers","getLayers","translate","Translate","hitTolerance","on","featureIndex","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","newCurentStopsGeoJSON","getArray","getProperties","indexOf","findIndex","coords","coordinate","modify","Modify","pixelTolerance","condition","mapBrowserEvent","newHopIdx","flatCoords","lineString","getFirstCoordinate","getLastCoordinate","closestSegment","getClosestFeatureToCoordinate","closestEdges","segment","every","interactions","defaultInteractions","extend","Map","controls","featExtent","getExtent","Number","isFinite","fit","getSize","duration","featureCoord","animate","setState","getFeaturesAtPixel","pixel","featCountryCode","get","flatCoordinates","prevProps","this","currentMotChanged","currentStopsGeoJSONChanged","Snackbar","anchorOrigin","horizontal","open","message","BasicMap","zoom","tabIndex","viewOptions","Component","getExtentCenter","extent","indexInGeom","lineGeom","point","connect","actions","isRouteInfosOpen","NotificationHandler","handleOpen","handleClose","autoHideDuration","Alert","severity","variant","App","process","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db718480.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  center: [949042.143189, 5899715.591163],\n  currentMot: 'bus',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n  showLoadingBar: false,\n  selectedRoute: null,\n  isRouteInfoOpen: false,\n  dialogPosition: {\n    x: 10,\n    y: 240,\n  },\n};\n\nconst setCenter = (state, action) => {\n  const updatedState = {\n    center: action.center,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setShowLoadingBar = (state, action) => {\n  const updatedState = {\n    showLoadingBar: action.showLoadingBar,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setSelectedRoute = (state, action) => {\n  const updatedState = {\n    selectedRoute: action.selectedRoute,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsRouteInfoOpen = (state, action) => {\n  const updatedState = {\n    isRouteInfoOpen: action.isRouteInfoOpen,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setDialogPosition = (state, action) => {\n  const updatedState = {\n    dialogPosition: action.dialogPosition,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CENTER:\n      return setCenter(state, action);\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    case actionTypes.SET_SHOW_LOADING_BAR:\n      return setShowLoadingBar(state, action);\n    case actionTypes.SET_SELECTED_ROUTE:\n      return setSelectedRoute(state, action);\n    case actionTypes.SET_IS_ROUTE_INFO_OPEN:\n      return setIsRouteInfoOpen(state, action);\n    case actionTypes.SET_DIALOG_POSITION:\n      return setDialogPosition(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CENTER = 'SET_CENTER';\nexport const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\nexport const SET_SHOW_LOADING_BAR = 'SET_SHOW_LOADING_BAR';\nexport const SET_SELECTED_ROUTE = 'SET_SELECTED_ROUTE';\nexport const SET_IS_ROUTE_INFO_OPEN = 'SET_IS_ROUTE_INFO_OPEN';\nexport const SET_DIALOG_POSITION = 'SET_DIALOG_POSITION';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import * as actionTypes from './actionTypes';\n\nexport const setCenter = center => {\n  return {\n    type: actionTypes.SET_CENTER,\n    center,\n  };\n};\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n\nexport const setShowLoadingBar = showLoadingBar => {\n  return {\n    type: actionTypes.SET_SHOW_LOADING_BAR,\n    showLoadingBar,\n  };\n};\n\nexport const setSelectedRoute = selectedRoute => {\n  return {\n    type: actionTypes.SET_SELECTED_ROUTE,\n    selectedRoute,\n  };\n};\n\nexport const setIsRouteInfoOpen = isRouteInfoOpen => {\n  return {\n    type: actionTypes.SET_IS_ROUTE_INFO_OPEN,\n    isRouteInfoOpen,\n  };\n};\n\nexport const setDialogPosition = dialogPosition => {\n  return {\n    type: actionTypes.SET_DIALOG_POSITION,\n    dialogPosition,\n  };\n};\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nexport const DEFAULT_MOTS = ['rail', 'bus', 'foot'];\n\nexport const OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n];\n\nexport const VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport const GRAPHHOPPER_MOTS = ['foot', 'car'];\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = (coord, decimal = 4) => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326').map(c =>\n    c.toFixed(decimal),\n  );\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\n\nconst renderSecondary = (id, code, countryCode, ifopt) => {\n  const display = [];\n\n  if (countryCode) {\n    display.push(\n      `${countryCode}${id || code ? ':' : ''}${id ? ` ${id}` : ''}${\n        code ? ` ${code}` : ''\n      }`,\n    );\n  } else {\n    display.push(\n      `${id ? `${id}` : ''}${id && code ? ' ' : ''}${code ? `${code}` : ''}`,\n    );\n  }\n  if (ifopt) {\n    display.push(`ifopt: ${ifopt}`);\n  }\n  return display.filter(l => l !== '').join(',');\n};\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3}>\n      <List component=\"nav\" aria-label=\"search results\">\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={renderSecondary(\n                    searchResult.properties.id,\n                    searchResult.properties.code,\n                    searchResult.properties.country_code,\n                    searchResult.properties.ifopt,\n                  )}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={renderSecondary(\n                  searchResult.properties.id,\n                  searchResult.properties.code,\n                  searchResult.properties.country_code,\n                  searchResult.properties.ifopt,\n                )}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import PropTypes from 'prop-types';\n\nconst propTypeCoordinates = PropTypes.arrayOf(PropTypes.number.isRequired)\n  .isRequired;\n\nconst geometry = PropTypes.shape({\n  propTypeCoordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, propTypeCoordinates]),\n    '1': PropTypes.oneOfType([feature, propTypeCoordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, propTypeCoordinates]),\n);\n\nexport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\nconst useStyles = makeStyles(() => ({\n  gridContainer: {\n    width: '100%',\n    padding: '0px 0px 0px 20px',\n    boxSizing: 'unset',\n  },\n  button: {\n    color: 'black',\n    '& svg': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n  fieldWrapper: {\n    maxWidth: '75%',\n  },\n  buttonWrapper: {\n    maxWidth: '26px',\n  },\n}));\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n    onZoomRouteClick,\n    isActiveRoute,\n    onPanViaClick,\n    inputReference,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n\n  const addNextHopDisabled =\n    currentStops[index] === '' ||\n    (currentStops.length > 2 && currentStops[index + 1] === '');\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n            disabled={addNextHopDisabled}\n            className={classes.button}\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Room color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'End';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Zoom to the route\">\n          <IconButton\n            onClick={() => onZoomRouteClick()}\n            disabled={!isActiveRoute}\n            className={classes.button}\n            aria-label=\"Zoom to the route\"\n            size=\"small\"\n          >\n            <ZoomInIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Adjust fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              disabled={addNextHopDisabled}\n              onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n              className={classes.button}\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              className={classes.button}\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      className={classes.gridContainer}\n      alignItems=\"flex-end\"\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize} className={classes.fieldWrapper}>\n        <TextField\n          style={{\n            width: '100%',\n          }}\n          inputRef={inputReference}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n  onZoomRouteClick: PropTypes.func.isRequired,\n  onPanViaClick: PropTypes.func.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  inputReference: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]).isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n  setShowLoadingBar,\n} from '../../store/actions/Map';\nimport './RoutingMenu.scss';\nimport {\n  VALID_MOTS,\n  DEFAULT_MOTS,\n  OTHER_MOTS,\n  GRAPHHOPPER_MOTS,\n} from '../../constants';\nimport { to4326, to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '33%',\n    width: '33%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  select: {\n    height: '100%',\n  },\n  selectInput: {\n    backgroundColor: 'white',\n    '&:focus': {\n      backgroundColor: 'white',\n    },\n  },\n  checkbox: {\n    padding: '20px 23px',\n  },\n}));\n\nlet abortController = new AbortController();\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({\n  mots,\n  stationSearchUrl,\n  APIKey,\n  isActiveRoute,\n  onZoomRouteClick,\n  onPanViaClick,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const center = useSelector(state => state.MapReducer.center);\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const showLoadingBar = useSelector(state => state.MapReducer.showLoadingBar);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n\n  const elRefs = React.useRef([]);\n  if (elRefs.current.length !== currentStops.length) {\n    elRefs.current = Array(currentStops.length)\n      .fill()\n      .map((el, i) => elRefs.current[i] || React.createRef());\n  }\n\n  const [currentMots] = useState(currentMotsVal);\n  const [currentMot, setCurrentMotState] = useState(currentMotsVal[0].name);\n  const [otherMots] = useState(otherMotsVal);\n  const [lastChangedFieldIdx, setLastChangedFieldIdx] = useState(null);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  useEffect(() => {\n    dispatch(setCurrentMot(currentMots[0].name));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot) => {\n    setCurrentOtherMot(null);\n    setCurrentMotState(newMot);\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = (currStops, indexToInsertAt) => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n\n    if (updatedCurrentStopsGeoJSON[indexToInsertAt]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => k >= indexToInsertAt)\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n\n    if (updatedCurrentStopsGeoJSON[indexToRemoveFrom]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON);\n      keys.forEach(key => {\n        const k = parseInt(key, 10);\n        if (k === indexToRemoveFrom) {\n          delete updatedCurrentStopsGeoJSON[indexToRemoveFrom];\n        } else if (k > indexToRemoveFrom) {\n          updatedCurrentStopsGeoJSON[k - 1] = updatedCurrentStopsGeoJSON[k];\n        }\n      });\n      delete updatedCurrentStopsGeoJSON[keys.length - 1];\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    setLastChangedFieldIdx(fieldIndex);\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n      dispatch(setShowLoadingBar(false));\n      return;\n    }\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setShowLoadingBar(true));\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${stationSearchUrl}?q=${event.target.value}&key=${APIKey}${\n      !GRAPHHOPPER_MOTS.includes(currentMot)\n        ? `&mots=${searchMotOnly ? currentMot : ''}`\n        : ''\n    }&ref_location=${to4326(center)\n      .reverse()\n      .join(',')}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        if (response.error) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n          return;\n        }\n        if (response.features.length === 0) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n        }\n        setCurrentSearchResults(response.features);\n        dispatch(setShowLoadingBar(false));\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  const retriggerSearch = () => {\n    if (lastChangedFieldIdx === null) {\n      return;\n    }\n    searchStopsHandler(\n      {\n        target: {\n          value: elRefs.current[lastChangedFieldIdx].current.value,\n        },\n      },\n      lastChangedFieldIdx,\n    );\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(null);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: 'none',\n    background: isDragging ? '#ededed' : 'white',\n    ...draggableStyle,\n  });\n\n  const onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedCurrentStops = _.clone(currentStops);\n    const [removed] = updatedCurrentStops.splice(result.source.index, 1);\n    updatedCurrentStops.splice(result.destination.index, 0, removed);\n\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n    const newSource = { ...updatedCurrentStopsGeoJSON[result.source.index] };\n    if (result.destination.index < result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => {\n          return (\n            parseInt(k, 10) >= result.destination.index &&\n            parseInt(k, 10) < result.source.index\n          );\n        })\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n      updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n    } else if (result.destination.index > result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON).filter(\n        k =>\n          parseInt(k, 10) >= result.source.index &&\n          parseInt(k, 10) <= result.destination.index,\n      );\n      keys.forEach(k => {\n        if (parseInt(k, 10) === result.destination.index) {\n          updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n        } else {\n          updatedCurrentStopsGeoJSON[k] =\n            updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`];\n        }\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  if (!onZoomRouteClick || !onPanViaClick) {\n    return null;\n  }\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl className={classes.dropDown}>\n            <Select\n              renderValue={val => (val !== '' ? val : 'Other MOTs')}\n              className={classes.select}\n              classes={{ root: classes.selectInput }}\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot || ''}\n              disableUnderline={!currentOtherMot}\n              displayEmpty\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n              {provided => (\n                <div\n                  // eslint-disable-next-line react/jsx-props-no-spreading\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={{\n                    background: 'white',\n                  }}\n                >\n                  {currentStops.map((item, index) => (\n                    <Draggable\n                      // eslint-disable-next-line react/no-array-index-key\n                      key={`searchField-${index}`}\n                      draggableId={`searchField-${index}`}\n                      index={index}\n                    >\n                      {(prov, snpsht) => (\n                        <div\n                          ref={prov.innerRef}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.draggableProps}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.dragHandleProps}\n                          style={getItemStyle(\n                            snpsht.isDragging,\n                            prov.draggableProps.style,\n                          )}\n                        >\n                          <SearchField\n                            // eslint-disable-next-line react/no-array-index-key\n                            key={`searchField-${index}`}\n                            index={index}\n                            inputReference={elRefs.current[index]}\n                            addNewSearchFieldHandler={addNewSearchFieldHandler}\n                            currentStops={currentStops}\n                            removeSearchFieldHandler={removeSearchFieldHandler}\n                            searchStopsHandler={searchStopsHandler}\n                            singleStop={item}\n                            processHighlightedResultSelectHandler={\n                              processHighlightedResultSelectHandler\n                            }\n                            onFieldFocusHandler={onFieldFocusHandler}\n                            onZoomRouteClick={onZoomRouteClick}\n                            onPanViaClick={onPanViaClick}\n                            isActiveRoute={isActiveRoute}\n                          />\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => {\n                setSearchMotOnly(!searchMotOnly);\n                retriggerSearch(lastChangedFieldIdx);\n              }}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  onZoomRouteClick: PropTypes.func,\n  onPanViaClick: PropTypes.func,\n};\n\nRoutingMenu.defaultProps = {\n  onZoomRouteClick: undefined,\n  onPanViaClick: undefined,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Feature } from 'ol';\nimport { getLength } from 'ol/sphere';\nimport Dialog from '@geops/react-ui/components/Dialog';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Label } from 'recharts';\nimport { setIsRouteInfoOpen, setDialogPosition } from '../../store/actions/Map';\nimport './RouteInfosDialog.scss';\n\nconst propTypes = {\n  route: PropTypes.instanceOf(Feature).isRequired,\n};\n\nconst tickFormatter = (length, isMeter) => {\n  let output;\n  if (!isMeter) {\n    output = `${Math.round((length / 1000) * 100) / 100}`;\n  } else {\n    output = `${Math.round(length * 100) / 100}`;\n  }\n  return output;\n};\n\nconst everyNth = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n\nfunction RouteInfosDialog({ route }) {\n  const dispatch = useDispatch();\n  const dialogPosition = useSelector(state => state.MapReducer.dialogPosition);\n\n  const onDragStop = (evt, position) => {\n    dispatch(\n      setDialogPosition({\n        x: position.lastX,\n        y: position.lastY,\n      }),\n    );\n  };\n\n  const length = getLength(route.getGeometry());\n  const distanceUnit = length > 100 ? 'km' : 'm';\n\n  const altitudesArray = everyNth(route.getGeometry().getFlatCoordinates(), 3);\n  const data = [];\n  altitudesArray.forEach((alt, idx) => {\n    data.push({\n      alt,\n      val: length * (idx / (altitudesArray.length - 1)),\n    });\n  });\n\n  const ticks = [\n    0,\n    data[parseInt(altitudesArray.length * (2 / 4), 10)].val,\n    length,\n  ];\n\n  return (\n    <Dialog\n      isOpen\n      title={<span>Route information</span>}\n      isDraggable\n      onDragStop={onDragStop}\n      className=\"rd-dialog-container\"\n      classNameHeader=\"rd-dialog-header\"\n      classNameCloseBt=\"rd-dialog-close-bt\"\n      cancelDraggable=\".tm-dialog-body\"\n      position={dialogPosition}\n      onClose={() => dispatch(setIsRouteInfoOpen(false))}\n    >\n      <LineChart width={400} height={200} data={data}>\n        <YAxis axisLine={false} tickLine={false}>\n          <Label value=\"m\" offset={10} position=\"top\" />\n        </YAxis>\n        <XAxis\n          type=\"number\"\n          ticks={ticks}\n          dataKey=\"val\"\n          tickFormatter={val => tickFormatter(val, distanceUnit === 'm')}\n        >\n          <Label value={distanceUnit} offset={10} position=\"right\" />\n        </XAxis>\n        <CartesianGrid vertical={false} />\n        <Line\n          type=\"monotone\"\n          dataKey=\"alt\"\n          dot={false}\n          stroke=\"#3f51b5\"\n          strokeWidth={2}\n        />\n      </LineChart>\n    </Dialog>\n  );\n}\n\nRouteInfosDialog.propTypes = propTypes;\nexport default RouteInfosDialog;\n","import RouteInfosDialog from './RouteInfosDialog';\n\nexport default RouteInfosDialog;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst lineStyler = lineStyle => {\n  return lineStyle.map(\n    style =>\n      new Style({\n        stroke: new Stroke({\n          color: style[0],\n          width: style[1],\n          lineDash: style[2],\n        }),\n      }),\n  );\n};\n\nconst railLineStyle = lineStyler([\n  ['darkred', 6],\n  ['red', 3],\n]);\n\nconst railLineHoveredStyle = lineStyler([\n  ['darkred', 7],\n  ['red', 4],\n]);\n\nconst busLineStyle = lineStyler([\n  ['rgb(153,153,0)', 6],\n  ['yellow', 3],\n]);\n\nconst busLineHoveredStyle = lineStyler([\n  ['rgb(153,153,0)', 7],\n  ['yellow', 4],\n]);\n\nconst pedestrianLineStyle = lineStyler([\n  ['rgb(96, 186, 219)', 6],\n  ['rgb(173, 216, 230)', 3],\n]);\n\nconst pedestrianLineHoveredStyle = lineStyler([\n  ['rgb(96, 186, 219)', 7],\n  ['rgb(173, 216, 230)', 4],\n]);\n\nconst carLineStyle = lineStyler([\n  ['grey', 6],\n  ['darkgrey', 3],\n]);\n\nconst carLineHoveredStyle = lineStyler([\n  ['grey', 7],\n  ['darkgrey', 4],\n]);\n\nconst othersLineStyle = lineStyler([\n  ['darkblue', 6],\n  ['blue', 3],\n]);\n\nconst othersLineHoveredStyle = lineStyler([\n  ['darkblue', 7],\n  ['blue', 4],\n]);\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'darkred', width: 2 }),\n  }),\n});\n\nconst pedestrianPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'rgb(173, 216, 230)' }),\n    stroke: new Stroke({ color: 'rgb(96, 186, 219)', width: 2 }),\n  }),\n});\n\nconst carPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'darkgrey' }),\n    stroke: new Stroke({ color: 'grey', width: 2 }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'rgb(153,153,0)', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'darkblue', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianPointStyle;\n  }\n  if (mot === 'car') {\n    return carPointStyle;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = (mot, isHovered) => {\n  if (mot === 'rail') {\n    return isHovered ? railLineHoveredStyle : railLineStyle;\n  }\n  if (mot === 'bus') {\n    return isHovered ? busLineHoveredStyle : busLineStyle;\n  }\n  if (mot === 'foot') {\n    return isHovered ? pedestrianLineHoveredStyle : pedestrianLineStyle;\n  }\n  if (mot === 'car') {\n    return isHovered ? carLineHoveredStyle : carLineStyle;\n  }\n  return isHovered ? othersLineHoveredStyle : othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ConfigReader from 'react-spatial/ConfigReader';\nimport LayerService from 'react-spatial/LayerService';\nimport Layer from 'react-spatial/layers/Layer';\nimport BasicMap from 'react-spatial/components/BasicMap';\nimport { Map, Feature } from 'ol';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport _ from 'lodash/core';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport {\n  defaults as defaultInteractions,\n  Translate,\n  Modify,\n} from 'ol/interaction';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport RoutingMenu from '../RoutingMenu';\nimport RouteInfosDialog from '../RouteInfosDialog';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { GRAPHHOPPER_MOTS } from '../../constants';\nimport { to4326 } from '../../utils';\nimport './MapComponent.scss';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\nlet abortController = new AbortController();\nconst zoom = 6;\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  static getExtentCenter = extent => {\n    const X = extent[0] + (extent[2] - extent[0]) / 2;\n    const Y = extent[1] + (extent[3] - extent[1]) / 2;\n    return [X, Y];\n  };\n\n  static indexInGeom = (lineGeom, point) => {\n    const firstBreakIdx = lineGeom.indexOf(point[0]);\n    const secondBreakIdx = lineGeom.indexOf(point[1]);\n\n    return firstBreakIdx === secondBreakIdx - 1;\n  };\n\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    const { APIKey, onSetClickLocation } = this.props;\n    this.hoveredFeature = null;\n    this.hoveredRoute = null;\n    this.initialRouteDrag = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n      isActiveRoute: false,\n    };\n\n    this.projection = 'EPSG:3857';\n\n    const layerService = new LayerService(\n      ConfigReader.readConfig([\n        {\n          name: 'Basemap',\n          visible: true,\n          isBaseLayer: true,\n          data: {\n            type: 'mapbox',\n            url: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n          },\n        },\n      ]),\n    );\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    layerService.addLayer(\n      new Layer({\n        key: 'markerLayer',\n        name: 'markerLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.markerVectorSource,\n        }),\n      }),\n    );\n\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({\n      features: [],\n    });\n    layerService.addLayer(\n      new Layer({\n        key: 'routeLayer',\n        name: 'routeLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.routeVectorSource,\n        }),\n      }),\n    );\n\n    this.markerVectorLayer = layerService.getLayer('markerLayer');\n    this.routeVectorLayer = layerService.getLayer('routeLayer');\n    this.layers = [...layerService.getLayers()];\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer.olLayer],\n      hitTolerance: 3,\n    });\n\n    translate.on('translateend', evt => {\n      const {\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        const isCoordPresent = el => {\n          if (!Array.isArray(el)) {\n            return false;\n          }\n          const coords = id.slice().reverse();\n          return el[0] === coords[0] && el[1] === coords[1];\n        };\n        featureIndex = currentStops.findIndex(isCoordPresent);\n      }\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    const modify = new Modify({\n      source: this.routeVectorSource,\n      pixelTolerance: 2,\n      condition: () => {\n        const { currentMot } = this.props;\n        return !GRAPHHOPPER_MOTS.includes(currentMot);\n      },\n      style: () => {\n        const { currentMot } = this.props;\n        return pointStyleFunction(currentMot);\n      },\n    });\n\n    modify.on('modifystart', evt => {\n      // save start point to find where to add the new HOP!\n      this.initialRouteDrag = {\n        features: evt.features.getArray(),\n        coordinate: evt.mapBrowserEvent.coordinate,\n      };\n    });\n\n    modify.on('modifyend', evt => {\n      const { features } = this.initialRouteDrag;\n      const {\n        currentMot,\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const updatedCurrentStops = _.clone(currentStops);\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      let newHopIdx = -1;\n\n      // No drag for foot/car for now on.\n      if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        const flatCoords = features\n          .map(f => f.getGeometry())\n          .map(lineString => {\n            return [\n              ...lineString.getFirstCoordinate(),\n              ...lineString.getLastCoordinate(),\n            ];\n          });\n\n        const closestSegment = this.routeVectorSource\n          .getClosestFeatureToCoordinate(this.initialRouteDrag.coordinate)\n          .getGeometry();\n\n        const closestEdges = [\n          ...closestSegment.getFirstCoordinate(),\n          ...closestSegment.getLastCoordinate(),\n        ];\n\n        flatCoords.forEach((segment, idx) => {\n          if (\n            segment.length === closestEdges.length &&\n            segment.every((value, index) => {\n              return value === closestEdges[index];\n            })\n          ) {\n            newHopIdx = idx + 1;\n          }\n        });\n      }\n\n      if (newHopIdx >= 0) {\n        updatedCurrentStops.splice(\n          newHopIdx,\n          0,\n          evt.mapBrowserEvent.coordinate,\n        );\n\n        if (updatedCurrentStopsGeoJSON[newHopIdx]) {\n          const keys = Object.keys(updatedCurrentStopsGeoJSON).reverse();\n          keys.forEach(k => {\n            if (parseInt(k, 10) >= newHopIdx) {\n              updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n                updatedCurrentStopsGeoJSON[k];\n            }\n            if (parseInt(k, 10) === newHopIdx) {\n              updatedCurrentStopsGeoJSON[newHopIdx] = {\n                type: 'FeatureCollection',\n                features: [\n                  {\n                    type: 'Feature',\n                    properties: {\n                      id: evt.mapBrowserEvent.coordinate.slice().reverse(),\n                      type: 'coordinates',\n                    },\n                    geometry: {\n                      type: 'Point',\n                      coordinates: evt.mapBrowserEvent.coordinate,\n                    },\n                  },\n                ],\n              };\n            }\n          });\n        }\n\n        onSetCurrentStops(updatedCurrentStops);\n        onSetCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON);\n      }\n      this.initialRouteDrag = null;\n    });\n\n    const interactions = defaultInteractions().extend([translate, modify]);\n\n    this.map = new Map({\n      controls: [],\n      interactions,\n    });\n\n    this.onZoomRouteClick = () => {\n      let featExtent;\n      if (this.routeVectorSource.getFeatures().length) {\n        featExtent = this.routeVectorSource.getExtent();\n      }\n\n      if (featExtent.filter(f => Number.isFinite(f)).length === 4) {\n        this.map.getView().fit(this.routeVectorSource.getExtent(), {\n          size: this.map.getSize(),\n          duration: 500,\n          padding: [200, 200, 200, 200],\n        });\n      }\n    };\n\n    this.onPanViaClick = (item, idx) => {\n      const { currentStopsGeoJSON } = this.props;\n      if (currentStopsGeoJSON && currentStopsGeoJSON[idx]) {\n        const featureCoord = currentStopsGeoJSON[idx].features\n          ? currentStopsGeoJSON[idx].features[0].geometry.coordinates\n          : currentStopsGeoJSON[idx].geometry.coordinates;\n\n        this.map.getView().animate({\n          center: featureCoord,\n          duration: 500,\n          padding: [100, 100, 100, 100],\n        });\n      }\n    };\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStops } = this.props;\n      // if one field empty or if a field is focused\n      if (currentStops.includes('') || isFieldFocused) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      const { currentMot } = this.props;\n\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n\n      if (this.hoveredRoute) {\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n        this.hoveredRoute = null;\n      }\n      const hovFeats = this.map.getFeaturesAtPixel(evt.pixel);\n\n      hovFeats.forEach(feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          const featCountryCode = feature.get('country_code');\n          if (feature.get('name')) {\n            name = `${feature.get('name')}${\n              featCountryCode ? ` - ${featCountryCode}` : ''\n            }`;\n          } else {\n            name = `${to4326(feature.getGeometry().flatCoordinates)}`;\n          }\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        if (feature.getGeometry().getType() === 'LineString') {\n          this.hoveredRoute = feature;\n          this.routeVectorLayer.olLayer.setStyle(\n            lineStyleFunction(currentMot, true),\n          );\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n\n    if (currentMotChanged || currentStopsGeoJSONChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      this.setIsActiveRoute(false);\n\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  onMapMoved = evt => {\n    const { center, onSetCenter } = this.props;\n    const newCenter = evt.map.getView().getCenter();\n\n    if (center[0] !== newCenter[0] || center[1] !== newCenter[1]) {\n      onSetCenter(newCenter);\n    }\n  };\n\n  onFeaturesClick = feats => {\n    const { onSetIsRouteInfoOpen } = this.props;\n    const lines = feats.filter(f => f.getGeometry().getType() === 'LineString');\n    if (lines.length) {\n      onSetIsRouteInfoOpen(true);\n    }\n  };\n\n  setIsActiveRoute(isActiveRoute) {\n    this.setState({ isActiveRoute });\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = () => {\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      onShowNotification,\n      onSetShowLoadingBar,\n      onSetSelectedRoute,\n      onSetIsRouteInfoOpen,\n    } = this.props;\n\n    onSetShowLoadingBar(true);\n\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `${to4326(currentStopsGeoJSON[key].features[0].geometry.coordinates)\n            .slice()\n            .reverse()}`,\n        );\n      } else if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        hops.push(`!${currentStopsGeoJSON[key].properties.uid}`);\n      } else {\n        hops.push(`${currentStopsGeoJSON[key].properties.name}`);\n      }\n    });\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${routingUrl}?via=${hops.join(\n      '|',\n    )}&mot=${currentMot}&resolve-hops=false&key=${APIKey}&features={%22elevation%22:%20{}}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        onSetShowLoadingBar(false);\n        if (response.error) {\n          onShowNotification(\"Couldn't find route\", 'error');\n          onSetSelectedRoute(null);\n          onSetIsRouteInfoOpen(false);\n          return;\n        }\n        // A route was found, prepare to draw it.\n        this.routeVectorSource.clear();\n        const format = new GeoJSON({\n          dataProjection: 'EPSG:4326',\n          featureProjection: 'EPSG:3857',\n        });\n        this.routeVectorSource.addFeatures(format.readFeatures(response));\n        this.setIsActiveRoute(!!this.routeVectorSource.getFeatures().length);\n        onSetSelectedRoute(this.routeVectorSource.getFeatures()[0]);\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        onSetShowLoadingBar(false);\n        onSetIsRouteInfoOpen(false);\n        onSetSelectedRoute(null);\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const {\n      center,\n      mots,\n      APIKey,\n      selectedRoute,\n      isRouteInfoOpen,\n      stationSearchUrl,\n    } = this.props;\n\n    const {\n      isActiveRoute,\n      hoveredStationOpen,\n      hoveredStationName,\n    } = this.state;\n\n    return (\n      <>\n        <RoutingMenu\n          mots={mots}\n          stationSearchUrl={stationSearchUrl}\n          isActiveRoute={isActiveRoute}\n          onZoomRouteClick={this.onZoomRouteClick}\n          onPanViaClick={this.onPanViaClick}\n          APIKey={APIKey}\n        />\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <BasicMap\n          center={center}\n          layers={this.layers}\n          // To activate when elevation info ready\n          // onFeaturesClick={feats => this.onFeaturesClick(feats)}\n          onMapMoved={evt => this.onMapMoved(evt)}\n          zoom={zoom}\n          tabIndex={null}\n          map={this.map}\n          viewOptions={{\n            projection: this.projection,\n          }}\n        />\n        {isRouteInfoOpen && selectedRoute ? (\n          <RouteInfosDialog route={selectedRoute} />\n        ) : null}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    center: state.MapReducer.center,\n    selectedRoute: state.MapReducer.selectedRoute,\n    isRouteInfoOpen: state.MapReducer.isRouteInfoOpen,\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCenter: center => dispatch(actions.setCenter(center)),\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n    onSetShowLoadingBar: showLoadingBar =>\n      dispatch(actions.setShowLoadingBar(showLoadingBar)),\n    onSetIsRouteInfoOpen: isRouteInfosOpen =>\n      dispatch(actions.setIsRouteInfoOpen(isRouteInfosOpen)),\n    onSetSelectedRoute: selectedRoute =>\n      dispatch(actions.setSelectedRoute(selectedRoute)),\n  };\n};\n\nMapComponent.propTypes = {\n  center: propTypeCoordinates.isRequired,\n  selectedRoute: PropTypes.instanceOf(Feature),\n  isRouteInfoOpen: PropTypes.bool.isRequired,\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  onSetCenter: PropTypes.func.isRequired,\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetShowLoadingBar: PropTypes.func.isRequired,\n  onSetIsRouteInfoOpen: PropTypes.func.isRequired,\n  onSetSelectedRoute: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n};\n\nMapComponent.defaultProps = {\n  selectedRoute: null,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport { showNotification } from '../../store/actions';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    const { onShowNotification } = this.props;\n    this.setState({\n      open: false,\n    });\n    onShowNotification(null, 'error');\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(showNotification(notificationMessage, notificationType)),\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  onShowNotification: PropTypes.func.isRequired,\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport NotificationHandler from '../NotificationHandler';\nimport { VALID_MOTS } from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/v1/',\n  // routingUrl: 'https://api.geops.io/route-decorator/v1/decorate_route',\n  stationSearchUrl: 'https://api.geops.io/stops/dev/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  return (\n    <Provider store={store}>\n      <MapComponent\n        mots={mots}\n        routingUrl={routingUrl}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import polyfills for ie 11\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}