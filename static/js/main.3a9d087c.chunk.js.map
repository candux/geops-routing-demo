{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","store/actions/Map.jsx","constants.js","utils.jsx","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","store/prop-types.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","Components/RouteInfosDialog/RouteInfosDialog.jsx","Components/RouteInfosDialog/index.js","config/styleConfig.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","center","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","showLoadingBar","selectedRoute","isRouteInfoOpen","dialogPosition","x","y","setCenter","state","action","updatedState","setCurrentStops","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","setShowLoadingBar","setSelectedRoute","setIsRouteInfoOpen","setDialogPosition","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","GRAPHHOPPER_MOTS","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","decimal","transform","map","c","toFixed","renderSecondary","id","code","countryCode","ifopt","display","push","join","SearchResults","props","currentSearchResults","processClickedResultHandler","length","Paper","square","elevation","List","component","aria-label","searchResult","index","ListItem","onClick","button","key","nextId","ListItemIcon","ListItemText","primary","properties","secondary","country_code","selected","defaultProps","propTypeCoordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","oneOfType","currentStop","features","useStyles","makeStyles","gridContainer","width","padding","boxSizing","color","height","fieldWrapper","maxWidth","buttonWrapper","SearchField","val","classes","dispatch","useDispatch","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","onZoomRouteClick","isActiveRoute","onPanViaClick","inputReference","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","addNextHopDisabled","Tooltip","IconButton","className","size","fontSize","Grid","item","xs","disabled","container","spacing","alignItems","TextField","style","inputRef","label","onChange","e","value","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","target","select","TabPanel","children","Typography","role","hidden","aria-labelledby","tabs","tab","minWidth","dropDown","backgroundColor","selectInput","checkbox","abortController","AbortController","RoutingMenu","mots","stationSearchUrl","APIKey","validateMots","motsArray","validationMots","currentMotsArray","filter","mot","includes","forEach","providedMot","requestedMot","find","icon","currentMotsVal","otherMotsVal","useSelector","elRefs","React","useRef","current","fill","el","i","createRef","useState","currentMots","setCurrentMotState","otherMots","lastChangedFieldIdx","setLastChangedFieldIdx","setCurrentSearchResults","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","undefined","currentOtherMot","setCurrentOtherMot","useEffect","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","_","clone","tempGeoJSON","reverse","coordinates","handleMotChange","newMot","fieldIndex","currStops","indexToInsertAt","splice","Object","keys","k","parseInt","indexToRemoveFrom","abort","signal","reqUrl","fetch","then","response","json","error","catch","err","console","warn","firstSearchResult","updateCurrentSearchResults","toString","Tabs","indicatorColor","textColor","singleMot","Tab","FormControl","Select","renderValue","root","labelId","disableUnderline","displayEmpty","evt","MenuItem","onDragEnd","destination","source","removed","newSource","droppableId","provided","droppableProps","ref","innerRef","background","draggableId","prov","snpsht","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","placeholder","Checkbox","checked","inputProps","LinearProgress","RouteInfosDialog","arr","nth","route","getLength","getGeometry","distanceUnit","altitudesArray","getFlatCoordinates","data","alt","idx","ticks","Dialog","isOpen","isDraggable","onDragStop","position","lastX","lastY","classNameHeader","classNameCloseBt","cancelDraggable","onClose","axisLine","tickLine","offset","dataKey","tickFormatter","isMeter","Math","round","vertical","dot","stroke","strokeWidth","lineStyler","lineStyle","Style","Stroke","lineDash","railLineStyle","railLineHoveredStyle","busLineStyle","busLineHoveredStyle","pedestrianLineStyle","pedestrianLineHoveredStyle","carLineStyle","carLineHoveredStyle","othersLineStyle","othersLineHoveredStyle","railPointStyle","image","Circle","radius","Fill","pedestrianPointStyle","carPointStyle","busPointStyle","othersPointStyle","pointStyleFunction","lineStyleFunction","isHovered","MapComponent","onMapMoved","onSetCenter","newCenter","getView","getCenter","onFeaturesClick","feats","onSetIsRouteInfoOpen","f","getType","drawNewRoute","hops","routingUrl","onShowNotification","onSetShowLoadingBar","onSetSelectedRoute","uid","routeVectorSource","clear","format","GeoJSON","dataProjection","featureProjection","addFeatures","readFeatures","setIsActiveRoute","getFeatures","routeVectorLayer","olLayer","setStyle","onSetClickLocation","hoveredFeature","hoveredRoute","initialRouteDrag","hoveredStationOpen","hoveredStationName","projection","layerService","LayerService","ConfigReader","readConfig","visible","isBaseLayer","url","markerVectorSource","VectorSource","addLayer","Layer","VectorLayer","zIndex","markerVectorLayer","getLayer","layers","getLayers","translate","Translate","hitTolerance","on","featureIndex","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","newCurentStopsGeoJSON","getArray","getProperties","indexOf","findIndex","coords","coordinate","modify","Modify","pixelTolerance","condition","mapBrowserEvent","newHopIdx","flatCoords","lineString","getFirstCoordinate","getLastCoordinate","closestSegment","getClosestFeatureToCoordinate","closestEdges","segment","every","interactions","defaultInteractions","extend","Map","controls","featExtent","getExtent","Number","isFinite","fit","getSize","duration","featureCoord","animate","setState","getFeaturesAtPixel","pixel","featCountryCode","get","flatCoordinates","prevProps","this","currentMotChanged","currentStopsGeoJSONChanged","Snackbar","anchorOrigin","horizontal","open","message","BasicMap","zoom","tabIndex","viewOptions","Component","getExtentCenter","extent","indexInGeom","lineGeom","point","connect","actions","isRouteInfosOpen","NotificationHandler","handleOpen","handleClose","autoHideDuration","Alert","severity","variant","App","process","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a9d087c.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  center: [949042.143189, 5899715.591163],\n  currentMot: 'bus',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n  showLoadingBar: false,\n  selectedRoute: null,\n  isRouteInfoOpen: false,\n  dialogPosition: {\n    x: 10,\n    y: 240,\n  },\n};\n\nconst setCenter = (state, action) => {\n  const updatedState = {\n    center: action.center,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setShowLoadingBar = (state, action) => {\n  const updatedState = {\n    showLoadingBar: action.showLoadingBar,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setSelectedRoute = (state, action) => {\n  const updatedState = {\n    selectedRoute: action.selectedRoute,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsRouteInfoOpen = (state, action) => {\n  const updatedState = {\n    isRouteInfoOpen: action.isRouteInfoOpen,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setDialogPosition = (state, action) => {\n  const updatedState = {\n    dialogPosition: action.dialogPosition,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CENTER:\n      return setCenter(state, action);\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    case actionTypes.SET_SHOW_LOADING_BAR:\n      return setShowLoadingBar(state, action);\n    case actionTypes.SET_SELECTED_ROUTE:\n      return setSelectedRoute(state, action);\n    case actionTypes.SET_IS_ROUTE_INFO_OPEN:\n      return setIsRouteInfoOpen(state, action);\n    case actionTypes.SET_DIALOG_POSITION:\n      return setDialogPosition(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CENTER = 'SET_CENTER';\nexport const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\nexport const SET_SHOW_LOADING_BAR = 'SET_SHOW_LOADING_BAR';\nexport const SET_SELECTED_ROUTE = 'SET_SELECTED_ROUTE';\nexport const SET_IS_ROUTE_INFO_OPEN = 'SET_IS_ROUTE_INFO_OPEN';\nexport const SET_DIALOG_POSITION = 'SET_DIALOG_POSITION';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import * as actionTypes from './actionTypes';\n\nexport const setCenter = center => {\n  return {\n    type: actionTypes.SET_CENTER,\n    center,\n  };\n};\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n\nexport const setShowLoadingBar = showLoadingBar => {\n  return {\n    type: actionTypes.SET_SHOW_LOADING_BAR,\n    showLoadingBar,\n  };\n};\n\nexport const setSelectedRoute = selectedRoute => {\n  return {\n    type: actionTypes.SET_SELECTED_ROUTE,\n    selectedRoute,\n  };\n};\n\nexport const setIsRouteInfoOpen = isRouteInfoOpen => {\n  return {\n    type: actionTypes.SET_IS_ROUTE_INFO_OPEN,\n    isRouteInfoOpen,\n  };\n};\n\nexport const setDialogPosition = dialogPosition => {\n  return {\n    type: actionTypes.SET_DIALOG_POSITION,\n    dialogPosition,\n  };\n};\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nexport const DEFAULT_MOTS = ['rail', 'bus', 'foot'];\n\nexport const OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n];\n\nexport const VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport const GRAPHHOPPER_MOTS = ['foot', 'car'];\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = (coord, decimal = 4) => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326').map(c =>\n    c.toFixed(decimal),\n  );\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\n\nconst renderSecondary = (id, code, countryCode, ifopt) => {\n  const display = [];\n\n  if (countryCode) {\n    display.push(\n      `${countryCode}${id || code ? ':' : ''}${id ? ` ${id}` : ''}${\n        code ? ` ${code}` : ''\n      }`,\n    );\n  } else {\n    display.push(\n      `${id ? `${id}` : ''}${id && code ? ' ' : ''}${code ? `${code}` : ''}`,\n    );\n  }\n  if (ifopt) {\n    display.push(`ifopt: ${ifopt}`);\n  }\n  return display.join(',');\n};\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3}>\n      <List component=\"nav\" aria-label=\"search results\">\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={renderSecondary(\n                    searchResult.properties.id,\n                    searchResult.properties.code,\n                    searchResult.properties.country_code,\n                    searchResult.properties.ifopt,\n                  )}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={renderSecondary(\n                  searchResult.properties.id,\n                  searchResult.properties.code,\n                  searchResult.properties.country_code,\n                  searchResult.properties.ifopt,\n                )}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import PropTypes from 'prop-types';\n\nconst propTypeCoordinates = PropTypes.arrayOf(PropTypes.number.isRequired)\n  .isRequired;\n\nconst geometry = PropTypes.shape({\n  propTypeCoordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, propTypeCoordinates]),\n    '1': PropTypes.oneOfType([feature, propTypeCoordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, propTypeCoordinates]),\n);\n\nexport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\nconst useStyles = makeStyles(() => ({\n  gridContainer: {\n    width: '100%',\n    padding: '0px 0px 0px 20px',\n    boxSizing: 'unset',\n  },\n  button: {\n    color: 'black',\n    '& svg': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n  fieldWrapper: {\n    maxWidth: '75%',\n  },\n  buttonWrapper: {\n    maxWidth: '26px',\n  },\n}));\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n    onZoomRouteClick,\n    isActiveRoute,\n    onPanViaClick,\n    inputReference,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n\n  const addNextHopDisabled =\n    currentStops[index] === '' ||\n    (currentStops.length > 2 && currentStops[index + 1] === '');\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n            disabled={addNextHopDisabled}\n            className={classes.button}\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Room color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'End';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Zoom to the route\">\n          <IconButton\n            onClick={() => onZoomRouteClick()}\n            disabled={!isActiveRoute}\n            className={classes.button}\n            aria-label=\"Zoom to the route\"\n            size=\"small\"\n          >\n            <ZoomInIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Adjust fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              disabled={addNextHopDisabled}\n              onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n              className={classes.button}\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              className={classes.button}\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      className={classes.gridContainer}\n      alignItems=\"flex-end\"\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize} className={classes.fieldWrapper}>\n        <TextField\n          style={{\n            width: '100%',\n          }}\n          inputRef={inputReference}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n  onZoomRouteClick: PropTypes.func.isRequired,\n  onPanViaClick: PropTypes.func.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  inputReference: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]).isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n  setShowLoadingBar,\n} from '../../store/actions/Map';\nimport './RoutingMenu.scss';\nimport {\n  VALID_MOTS,\n  DEFAULT_MOTS,\n  OTHER_MOTS,\n  GRAPHHOPPER_MOTS,\n} from '../../constants';\nimport { to4326, to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '33%',\n    width: '33%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  select: {\n    height: '100%',\n  },\n  selectInput: {\n    backgroundColor: 'white',\n    '&:focus': {\n      backgroundColor: 'white',\n    },\n  },\n  checkbox: {\n    padding: '20px 23px',\n  },\n}));\n\nlet abortController = new AbortController();\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({\n  mots,\n  stationSearchUrl,\n  APIKey,\n  isActiveRoute,\n  onZoomRouteClick,\n  onPanViaClick,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const center = useSelector(state => state.MapReducer.center);\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const showLoadingBar = useSelector(state => state.MapReducer.showLoadingBar);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n\n  const elRefs = React.useRef([]);\n  if (elRefs.current.length !== currentStops.length) {\n    elRefs.current = Array(currentStops.length)\n      .fill()\n      .map((el, i) => elRefs.current[i] || React.createRef());\n  }\n\n  const [currentMots] = useState(currentMotsVal);\n  const [currentMot, setCurrentMotState] = useState(currentMotsVal[0].name);\n  const [otherMots] = useState(otherMotsVal);\n  const [lastChangedFieldIdx, setLastChangedFieldIdx] = useState(null);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  useEffect(() => {\n    dispatch(setCurrentMot(currentMots[0].name));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot) => {\n    setCurrentOtherMot(null);\n    setCurrentMotState(newMot);\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = (currStops, indexToInsertAt) => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n\n    if (updatedCurrentStopsGeoJSON[indexToInsertAt]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => k >= indexToInsertAt)\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n\n    if (updatedCurrentStopsGeoJSON[indexToRemoveFrom]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON);\n      keys.forEach(key => {\n        const k = parseInt(key, 10);\n        if (k === indexToRemoveFrom) {\n          delete updatedCurrentStopsGeoJSON[indexToRemoveFrom];\n        } else if (k > indexToRemoveFrom) {\n          updatedCurrentStopsGeoJSON[k - 1] = updatedCurrentStopsGeoJSON[k];\n        }\n      });\n      delete updatedCurrentStopsGeoJSON[keys.length - 1];\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    setLastChangedFieldIdx(fieldIndex);\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n      dispatch(setShowLoadingBar(false));\n      return;\n    }\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setShowLoadingBar(true));\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${stationSearchUrl}?q=${event.target.value}&key=${APIKey}${\n      !GRAPHHOPPER_MOTS.includes(currentMot)\n        ? `&mots=${searchMotOnly ? currentMot : ''}`\n        : ''\n    }&ref_location=${to4326(center)\n      .reverse()\n      .join(',')}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        if (response.error) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n          return;\n        }\n        if (response.features.length === 0) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n        }\n        setCurrentSearchResults(response.features);\n        dispatch(setShowLoadingBar(false));\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  const retriggerSearch = () => {\n    if (lastChangedFieldIdx === null) {\n      return;\n    }\n    searchStopsHandler(\n      {\n        target: {\n          value: elRefs.current[lastChangedFieldIdx].current.value,\n        },\n      },\n      lastChangedFieldIdx,\n    );\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(null);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: 'none',\n    background: isDragging ? '#ededed' : 'white',\n    ...draggableStyle,\n  });\n\n  const onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedCurrentStops = _.clone(currentStops);\n    const [removed] = updatedCurrentStops.splice(result.source.index, 1);\n    updatedCurrentStops.splice(result.destination.index, 0, removed);\n\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n    const newSource = { ...updatedCurrentStopsGeoJSON[result.source.index] };\n    if (result.destination.index < result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => {\n          return (\n            parseInt(k, 10) >= result.destination.index &&\n            parseInt(k, 10) < result.source.index\n          );\n        })\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n      updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n    } else if (result.destination.index > result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON).filter(\n        k =>\n          parseInt(k, 10) >= result.source.index &&\n          parseInt(k, 10) <= result.destination.index,\n      );\n      keys.forEach(k => {\n        if (parseInt(k, 10) === result.destination.index) {\n          updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n        } else {\n          updatedCurrentStopsGeoJSON[k] =\n            updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`];\n        }\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  if (!onZoomRouteClick || !onPanViaClick) {\n    return null;\n  }\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl className={classes.dropDown}>\n            <Select\n              renderValue={val => (val !== '' ? val : 'Other MOTs')}\n              className={classes.select}\n              classes={{ root: classes.selectInput }}\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot || ''}\n              disableUnderline={!currentOtherMot}\n              displayEmpty\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n              {provided => (\n                <div\n                  // eslint-disable-next-line react/jsx-props-no-spreading\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={{\n                    background: 'white',\n                  }}\n                >\n                  {currentStops.map((item, index) => (\n                    <Draggable\n                      // eslint-disable-next-line react/no-array-index-key\n                      key={`searchField-${index}`}\n                      draggableId={`searchField-${index}`}\n                      index={index}\n                    >\n                      {(prov, snpsht) => (\n                        <div\n                          ref={prov.innerRef}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.draggableProps}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.dragHandleProps}\n                          style={getItemStyle(\n                            snpsht.isDragging,\n                            prov.draggableProps.style,\n                          )}\n                        >\n                          <SearchField\n                            // eslint-disable-next-line react/no-array-index-key\n                            key={`searchField-${index}`}\n                            index={index}\n                            inputReference={elRefs.current[index]}\n                            addNewSearchFieldHandler={addNewSearchFieldHandler}\n                            currentStops={currentStops}\n                            removeSearchFieldHandler={removeSearchFieldHandler}\n                            searchStopsHandler={searchStopsHandler}\n                            singleStop={item}\n                            processHighlightedResultSelectHandler={\n                              processHighlightedResultSelectHandler\n                            }\n                            onFieldFocusHandler={onFieldFocusHandler}\n                            onZoomRouteClick={onZoomRouteClick}\n                            onPanViaClick={onPanViaClick}\n                            isActiveRoute={isActiveRoute}\n                          />\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => {\n                setSearchMotOnly(!searchMotOnly);\n                retriggerSearch(lastChangedFieldIdx);\n              }}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  onZoomRouteClick: PropTypes.func,\n  onPanViaClick: PropTypes.func,\n};\n\nRoutingMenu.defaultProps = {\n  onZoomRouteClick: undefined,\n  onPanViaClick: undefined,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Feature } from 'ol';\nimport { getLength } from 'ol/sphere';\nimport Dialog from '@geops/react-ui/components/Dialog';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Label } from 'recharts';\nimport { setIsRouteInfoOpen, setDialogPosition } from '../../store/actions/Map';\nimport './RouteInfosDialog.scss';\n\nconst propTypes = {\n  route: PropTypes.instanceOf(Feature).isRequired,\n};\n\nconst tickFormatter = (length, isMeter) => {\n  let output;\n  if (!isMeter) {\n    output = `${Math.round((length / 1000) * 100) / 100}`;\n  } else {\n    output = `${Math.round(length * 100) / 100}`;\n  }\n  return output;\n};\n\nconst everyNth = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n\nfunction RouteInfosDialog({ route }) {\n  const dispatch = useDispatch();\n  const dialogPosition = useSelector(state => state.MapReducer.dialogPosition);\n\n  const onDragStop = (evt, position) => {\n    dispatch(\n      setDialogPosition({\n        x: position.lastX,\n        y: position.lastY,\n      }),\n    );\n  };\n\n  const length = getLength(route.getGeometry());\n  const distanceUnit = length > 100 ? 'km' : 'm';\n\n  const altitudesArray = everyNth(route.getGeometry().getFlatCoordinates(), 3);\n  const data = [];\n  altitudesArray.forEach((alt, idx) => {\n    data.push({\n      alt,\n      val: length * (idx / (altitudesArray.length - 1)),\n    });\n  });\n\n  const ticks = [\n    0,\n    data[parseInt(altitudesArray.length * (2 / 4), 10)].val,\n    length,\n  ];\n\n  return (\n    <Dialog\n      isOpen\n      title={<span>Route information</span>}\n      isDraggable\n      onDragStop={onDragStop}\n      className=\"rd-dialog-container\"\n      classNameHeader=\"rd-dialog-header\"\n      classNameCloseBt=\"rd-dialog-close-bt\"\n      cancelDraggable=\".tm-dialog-body\"\n      position={dialogPosition}\n      onClose={() => dispatch(setIsRouteInfoOpen(false))}\n    >\n      <LineChart width={400} height={200} data={data}>\n        <YAxis axisLine={false} tickLine={false}>\n          <Label value=\"m\" offset={10} position=\"top\" />\n        </YAxis>\n        <XAxis\n          type=\"number\"\n          ticks={ticks}\n          dataKey=\"val\"\n          tickFormatter={val => tickFormatter(val, distanceUnit === 'm')}\n        >\n          <Label value={distanceUnit} offset={10} position=\"right\" />\n        </XAxis>\n        <CartesianGrid vertical={false} />\n        <Line\n          type=\"monotone\"\n          dataKey=\"alt\"\n          dot={false}\n          stroke=\"#3f51b5\"\n          strokeWidth={2}\n        />\n      </LineChart>\n    </Dialog>\n  );\n}\n\nRouteInfosDialog.propTypes = propTypes;\nexport default RouteInfosDialog;\n","import RouteInfosDialog from './RouteInfosDialog';\n\nexport default RouteInfosDialog;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst lineStyler = lineStyle => {\n  return lineStyle.map(\n    style =>\n      new Style({\n        stroke: new Stroke({\n          color: style[0],\n          width: style[1],\n          lineDash: style[2],\n        }),\n      }),\n  );\n};\n\nconst railLineStyle = lineStyler([\n  ['darkred', 6],\n  ['red', 3],\n]);\n\nconst railLineHoveredStyle = lineStyler([\n  ['darkred', 7],\n  ['red', 4],\n]);\n\nconst busLineStyle = lineStyler([\n  ['rgb(153,153,0)', 6],\n  ['yellow', 3],\n]);\n\nconst busLineHoveredStyle = lineStyler([\n  ['rgb(153,153,0)', 7],\n  ['yellow', 4],\n]);\n\nconst pedestrianLineStyle = lineStyler([\n  ['rgb(96, 186, 219)', 6],\n  ['rgb(173, 216, 230)', 3],\n]);\n\nconst pedestrianLineHoveredStyle = lineStyler([\n  ['rgb(96, 186, 219)', 7],\n  ['rgb(173, 216, 230)', 4],\n]);\n\nconst carLineStyle = lineStyler([\n  ['grey', 6],\n  ['darkgrey', 3],\n]);\n\nconst carLineHoveredStyle = lineStyler([\n  ['grey', 7],\n  ['darkgrey', 4],\n]);\n\nconst othersLineStyle = lineStyler([\n  ['darkblue', 6],\n  ['blue', 3],\n]);\n\nconst othersLineHoveredStyle = lineStyler([\n  ['darkblue', 7],\n  ['blue', 4],\n]);\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'darkred', width: 2 }),\n  }),\n});\n\nconst pedestrianPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'rgb(173, 216, 230)' }),\n    stroke: new Stroke({ color: 'rgb(96, 186, 219)', width: 2 }),\n  }),\n});\n\nconst carPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'darkgrey' }),\n    stroke: new Stroke({ color: 'grey', width: 2 }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'rgb(153,153,0)', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'darkblue', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianPointStyle;\n  }\n  if (mot === 'car') {\n    return carPointStyle;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = (mot, isHovered) => {\n  if (mot === 'rail') {\n    return isHovered ? railLineHoveredStyle : railLineStyle;\n  }\n  if (mot === 'bus') {\n    return isHovered ? busLineHoveredStyle : busLineStyle;\n  }\n  if (mot === 'foot') {\n    return isHovered ? pedestrianLineHoveredStyle : pedestrianLineStyle;\n  }\n  if (mot === 'car') {\n    return isHovered ? carLineHoveredStyle : carLineStyle;\n  }\n  return isHovered ? othersLineHoveredStyle : othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ConfigReader from 'react-spatial/ConfigReader';\nimport LayerService from 'react-spatial/LayerService';\nimport Layer from 'react-spatial/layers/Layer';\nimport BasicMap from 'react-spatial/components/BasicMap';\nimport { Map, Feature } from 'ol';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport _ from 'lodash/core';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport {\n  defaults as defaultInteractions,\n  Translate,\n  Modify,\n} from 'ol/interaction';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport RoutingMenu from '../RoutingMenu';\nimport RouteInfosDialog from '../RouteInfosDialog';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCoordinates,\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { GRAPHHOPPER_MOTS } from '../../constants';\nimport { to4326 } from '../../utils';\nimport './MapComponent.scss';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\nlet abortController = new AbortController();\nconst zoom = 6;\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  static getExtentCenter = extent => {\n    const X = extent[0] + (extent[2] - extent[0]) / 2;\n    const Y = extent[1] + (extent[3] - extent[1]) / 2;\n    return [X, Y];\n  };\n\n  static indexInGeom = (lineGeom, point) => {\n    const firstBreakIdx = lineGeom.indexOf(point[0]);\n    const secondBreakIdx = lineGeom.indexOf(point[1]);\n\n    return firstBreakIdx === secondBreakIdx - 1;\n  };\n\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    const { APIKey, onSetClickLocation } = this.props;\n    this.hoveredFeature = null;\n    this.hoveredRoute = null;\n    this.initialRouteDrag = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n      isActiveRoute: false,\n    };\n\n    this.projection = 'EPSG:3857';\n\n    const layerService = new LayerService(\n      ConfigReader.readConfig([\n        {\n          name: 'Basemap',\n          visible: true,\n          isBaseLayer: true,\n          data: {\n            type: 'mapbox',\n            url: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n          },\n        },\n      ]),\n    );\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    layerService.addLayer(\n      new Layer({\n        key: 'markerLayer',\n        name: 'markerLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.markerVectorSource,\n        }),\n      }),\n    );\n\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({\n      features: [],\n    });\n    layerService.addLayer(\n      new Layer({\n        key: 'routeLayer',\n        name: 'routeLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.routeVectorSource,\n        }),\n      }),\n    );\n\n    this.markerVectorLayer = layerService.getLayer('markerLayer');\n    this.routeVectorLayer = layerService.getLayer('routeLayer');\n    this.layers = [...layerService.getLayers()];\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer.olLayer],\n      hitTolerance: 3,\n    });\n\n    translate.on('translateend', evt => {\n      const {\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        const isCoordPresent = el => {\n          if (!Array.isArray(el)) {\n            return false;\n          }\n          const coords = id.slice().reverse();\n          return el[0] === coords[0] && el[1] === coords[1];\n        };\n        featureIndex = currentStops.findIndex(isCoordPresent);\n      }\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    const modify = new Modify({\n      source: this.routeVectorSource,\n      pixelTolerance: 2,\n      condition: () => {\n        const { currentMot } = this.props;\n        return !GRAPHHOPPER_MOTS.includes(currentMot);\n      },\n      style: () => {\n        const { currentMot } = this.props;\n        return pointStyleFunction(currentMot);\n      },\n    });\n\n    modify.on('modifystart', evt => {\n      // save start point to find where to add the new HOP!\n      this.initialRouteDrag = {\n        features: evt.features.getArray(),\n        coordinate: evt.mapBrowserEvent.coordinate,\n      };\n    });\n\n    modify.on('modifyend', evt => {\n      const { features } = this.initialRouteDrag;\n      const {\n        currentMot,\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const updatedCurrentStops = _.clone(currentStops);\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      let newHopIdx = -1;\n\n      // No drag for foot/car for now on.\n      if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        const flatCoords = features\n          .map(f => f.getGeometry())\n          .map(lineString => {\n            return [\n              ...lineString.getFirstCoordinate(),\n              ...lineString.getLastCoordinate(),\n            ];\n          });\n\n        const closestSegment = this.routeVectorSource\n          .getClosestFeatureToCoordinate(this.initialRouteDrag.coordinate)\n          .getGeometry();\n\n        const closestEdges = [\n          ...closestSegment.getFirstCoordinate(),\n          ...closestSegment.getLastCoordinate(),\n        ];\n\n        flatCoords.forEach((segment, idx) => {\n          if (\n            segment.length === closestEdges.length &&\n            segment.every((value, index) => {\n              return value === closestEdges[index];\n            })\n          ) {\n            newHopIdx = idx + 1;\n          }\n        });\n      }\n\n      if (newHopIdx >= 0) {\n        updatedCurrentStops.splice(\n          newHopIdx,\n          0,\n          evt.mapBrowserEvent.coordinate,\n        );\n\n        if (updatedCurrentStopsGeoJSON[newHopIdx]) {\n          const keys = Object.keys(updatedCurrentStopsGeoJSON).reverse();\n          keys.forEach(k => {\n            if (parseInt(k, 10) >= newHopIdx) {\n              updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n                updatedCurrentStopsGeoJSON[k];\n            }\n            if (parseInt(k, 10) === newHopIdx) {\n              updatedCurrentStopsGeoJSON[newHopIdx] = {\n                type: 'FeatureCollection',\n                features: [\n                  {\n                    type: 'Feature',\n                    properties: {\n                      id: evt.mapBrowserEvent.coordinate.slice().reverse(),\n                      type: 'coordinates',\n                    },\n                    geometry: {\n                      type: 'Point',\n                      coordinates: evt.mapBrowserEvent.coordinate,\n                    },\n                  },\n                ],\n              };\n            }\n          });\n        }\n\n        onSetCurrentStops(updatedCurrentStops);\n        onSetCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON);\n      }\n      this.initialRouteDrag = null;\n    });\n\n    const interactions = defaultInteractions().extend([translate, modify]);\n\n    this.map = new Map({\n      controls: [],\n      interactions,\n    });\n\n    this.onZoomRouteClick = () => {\n      let featExtent;\n      if (this.routeVectorSource.getFeatures().length) {\n        featExtent = this.routeVectorSource.getExtent();\n      }\n\n      if (featExtent.filter(f => Number.isFinite(f)).length === 4) {\n        this.map.getView().fit(this.routeVectorSource.getExtent(), {\n          size: this.map.getSize(),\n          duration: 500,\n          padding: [200, 200, 200, 200],\n        });\n      }\n    };\n\n    this.onPanViaClick = (item, idx) => {\n      const { currentStopsGeoJSON } = this.props;\n      if (currentStopsGeoJSON && currentStopsGeoJSON[idx]) {\n        const featureCoord = currentStopsGeoJSON[idx].features\n          ? currentStopsGeoJSON[idx].features[0].geometry.coordinates\n          : currentStopsGeoJSON[idx].geometry.coordinates;\n\n        this.map.getView().animate({\n          center: featureCoord,\n          duration: 500,\n          padding: [100, 100, 100, 100],\n        });\n      }\n    };\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStops } = this.props;\n      // if one field empty or if a field is focused\n      if (currentStops.includes('') || isFieldFocused) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      const { currentMot } = this.props;\n\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n\n      if (this.hoveredRoute) {\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n        this.hoveredRoute = null;\n      }\n      const hovFeats = this.map.getFeaturesAtPixel(evt.pixel);\n\n      hovFeats.forEach(feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          const featCountryCode = feature.get('country_code');\n          if (feature.get('name')) {\n            name = `${feature.get('name')}${\n              featCountryCode ? ` - ${featCountryCode}` : ''\n            }`;\n          } else {\n            name = `${to4326(feature.getGeometry().flatCoordinates)}`;\n          }\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        if (feature.getGeometry().getType() === 'LineString') {\n          this.hoveredRoute = feature;\n          this.routeVectorLayer.olLayer.setStyle(\n            lineStyleFunction(currentMot, true),\n          );\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n\n    if (currentMotChanged || currentStopsGeoJSONChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      this.setIsActiveRoute(false);\n\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  onMapMoved = evt => {\n    const { center, onSetCenter } = this.props;\n    const newCenter = evt.map.getView().getCenter();\n\n    if (center[0] !== newCenter[0] || center[1] !== newCenter[1]) {\n      onSetCenter(newCenter);\n    }\n  };\n\n  onFeaturesClick = feats => {\n    const { onSetIsRouteInfoOpen } = this.props;\n    const lines = feats.filter(f => f.getGeometry().getType() === 'LineString');\n    if (lines.length) {\n      onSetIsRouteInfoOpen(true);\n    }\n  };\n\n  setIsActiveRoute(isActiveRoute) {\n    this.setState({ isActiveRoute });\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = () => {\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      onShowNotification,\n      onSetShowLoadingBar,\n      onSetSelectedRoute,\n      onSetIsRouteInfoOpen,\n    } = this.props;\n\n    onSetShowLoadingBar(true);\n\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `${to4326(currentStopsGeoJSON[key].features[0].geometry.coordinates)\n            .slice()\n            .reverse()}`,\n        );\n      } else if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        hops.push(`!${currentStopsGeoJSON[key].properties.uid}`);\n      } else {\n        hops.push(`${currentStopsGeoJSON[key].properties.name}`);\n      }\n    });\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${routingUrl}?via=${hops.join(\n      '|',\n    )}&mot=${currentMot}&resolve-hops=false&key=${APIKey}&features={%22elevation%22:%20{}}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        onSetShowLoadingBar(false);\n        if (response.error) {\n          onShowNotification(\"Couldn't find route\", 'error');\n          onSetSelectedRoute(null);\n          onSetIsRouteInfoOpen(false);\n          return;\n        }\n        // A route was found, prepare to draw it.\n        this.routeVectorSource.clear();\n        const format = new GeoJSON({\n          dataProjection: 'EPSG:4326',\n          featureProjection: 'EPSG:3857',\n        });\n        this.routeVectorSource.addFeatures(format.readFeatures(response));\n        this.setIsActiveRoute(!!this.routeVectorSource.getFeatures().length);\n        onSetSelectedRoute(this.routeVectorSource.getFeatures()[0]);\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        onSetShowLoadingBar(false);\n        onSetIsRouteInfoOpen(false);\n        onSetSelectedRoute(null);\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const {\n      center,\n      mots,\n      APIKey,\n      selectedRoute,\n      isRouteInfoOpen,\n      stationSearchUrl,\n    } = this.props;\n\n    const {\n      isActiveRoute,\n      hoveredStationOpen,\n      hoveredStationName,\n    } = this.state;\n\n    return (\n      <>\n        <RoutingMenu\n          mots={mots}\n          stationSearchUrl={stationSearchUrl}\n          isActiveRoute={isActiveRoute}\n          onZoomRouteClick={this.onZoomRouteClick}\n          onPanViaClick={this.onPanViaClick}\n          APIKey={APIKey}\n        />\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <BasicMap\n          center={center}\n          layers={this.layers}\n          // To activate when elevation info ready\n          // onFeaturesClick={feats => this.onFeaturesClick(feats)}\n          onMapMoved={evt => this.onMapMoved(evt)}\n          zoom={zoom}\n          tabIndex={null}\n          map={this.map}\n          viewOptions={{\n            projection: this.projection,\n          }}\n        />\n        {isRouteInfoOpen && selectedRoute ? (\n          <RouteInfosDialog route={selectedRoute} />\n        ) : null}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    center: state.MapReducer.center,\n    selectedRoute: state.MapReducer.selectedRoute,\n    isRouteInfoOpen: state.MapReducer.isRouteInfoOpen,\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCenter: center => dispatch(actions.setCenter(center)),\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n    onSetShowLoadingBar: showLoadingBar =>\n      dispatch(actions.setShowLoadingBar(showLoadingBar)),\n    onSetIsRouteInfoOpen: isRouteInfosOpen =>\n      dispatch(actions.setIsRouteInfoOpen(isRouteInfosOpen)),\n    onSetSelectedRoute: selectedRoute =>\n      dispatch(actions.setSelectedRoute(selectedRoute)),\n  };\n};\n\nMapComponent.propTypes = {\n  center: propTypeCoordinates.isRequired,\n  selectedRoute: PropTypes.instanceOf(Feature),\n  isRouteInfoOpen: PropTypes.bool.isRequired,\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  onSetCenter: PropTypes.func.isRequired,\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetShowLoadingBar: PropTypes.func.isRequired,\n  onSetIsRouteInfoOpen: PropTypes.func.isRequired,\n  onSetSelectedRoute: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n};\n\nMapComponent.defaultProps = {\n  selectedRoute: null,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport { showNotification } from '../../store/actions';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    const { onShowNotification } = this.props;\n    this.setState({\n      open: false,\n    });\n    onShowNotification(null, 'error');\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(showNotification(notificationMessage, notificationType)),\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  onShowNotification: PropTypes.func.isRequired,\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport NotificationHandler from '../NotificationHandler';\nimport { VALID_MOTS } from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/v1/',\n  // routingUrl: 'https://api.geops.io/route-decorator/v1/decorate_route',\n  stationSearchUrl: 'https://api.geops.io/stops/dev/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  return (\n    <Provider store={store}>\n      <MapComponent\n        mots={mots}\n        routingUrl={routingUrl}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import polyfills for ie 11\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}