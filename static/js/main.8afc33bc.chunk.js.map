{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/RoutingMenu/constants.js","Components/RoutingMenu/RoutingMenu.jsx","store/actions/Map.jsx","Components/GeopsRoutingDemo/GeopsRoutingDemo.jsx","Components/index.js","serviceWorker.js","index.js"],"names":["initialState","currentMot","currentStopsGeoJSON","setCurrentStopsGeoJSON","state","action","updatedState","setCurrentMot","reducer","type","composeEnhancers","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","MapComponent","props","drawNewRoute","findRouteCancel","hops","key","push","properties","id","axios","get","routingUrl","params","via","join","mot","APIKey","cancelToken","findRouteCancelToken","cancel","then","response","vectorSource","VectorSource","features","GeoJSON","readFeatures","data","vectorLayer","VectorLayer","source","style","routeStyle","set","map","addLayer","getView","fit","getExtent","size","getSize","duration","error","console","log","removeCurrentRoute","getLayers","forEach","layer","removeLayer","CancelToken","Style","stroke","Stroke","color","lineDash","width","openStreetMap","TileLayer","OSM","this","Map","target","layers","view","View","projection","center","zoom","prevProps","image","Icon","crossOrigin","src","coordinate","getFeatures","getGeometry","getCoordinates","animate","Object","keys","length","className","Component","connect","VALID_MOTS","name","icon","TabPanel","children","value","index","other","Typography","component","role","hidden","aria-labelledby","Box","p","RoutingMenu","validateMots","mots","currentMots","providedMot","requestedMot","find","handleMotChange","event","newMot","setState","onSetCurrentMot","onFieldFocus","fieldIndex","focusedFieldIndex","onFieldBlur","searchStops","updateCurrentStops","currentStops","currentSearchResults","showLoadingBar","searchCancel","stationSearchUrl","q","searchCancelToken","searchResults","singleResult","processHighlightedResultSelect","updateCurrentStopsGeoJSON","onSetCurrentStopsGeoJSON","updateCurrentSearchResults","toString","processRoute","onFindRoute","canSearchForRoute","filter","singleStop","Paper","square","elevation","Tabs","onChange","variant","scrollButtons","indicatorColor","textColor","aria-label","Tab","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","fontSize","Grid","item","xs","IconButton","disabled","onClick","Fragment","container","spacing","alignItems","TextField","label","e","onKeyDown","onFocus","onBlur","LinearProgress","searchResult","gutterBottom","React","dispatch","actions","GeopsRoutingDemo","Boolean","window","location","hostname","match","geopsRoutingDemo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8afc33bc.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    currentMot: \"bus\",\r\n    currentStopsGeoJSON: {},\r\n};\r\n\r\nconst setCurrentStopsGeoJSON = (state, action) => {\r\n    const updatedState = {\r\n        currentStopsGeoJSON: action.currentStopsGeoJSON,\r\n    };\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n};\r\n\r\nconst setCurrentMot = (state, action) => {\r\n    const updatedState = {\r\n        currentMot: action.currentMot,\r\n    };\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_CURRENT_STOPS_GEOJSON:\r\n            return setCurrentStopsGeoJSON(state, action);\r\n        case actionTypes.SET_CURRENT_MOT:\r\n            return setCurrentMot(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","export const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\r\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';","import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport MapReducer from './reducers/Map';\r\n\r\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || null : compose;\r\nconst rootReducer = combineReducers({\r\n    MapReducer: MapReducer,\r\n});\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\nexport default store;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Map, View} from 'ol';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\r\nimport OSM from 'ol/source/OSM';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport {Vector as VectorSource} from 'ol/source';\r\nimport axios from 'axios';\r\nimport \"./MapComponent.css\";\r\nimport {Stroke, Style, Icon} from \"ol/style\";\r\n\r\nclass MapComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.findRouteCancelToken = axios.CancelToken;\r\n        this.findRouteCancel = null;\r\n        this.routeStyle = new Style({\r\n            stroke: new Stroke({\r\n                color: 'blue',\r\n                lineDash: [4],\r\n                width: 3\r\n            })\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const openStreetMap = new TileLayer({\r\n            source: new OSM()\r\n        });\r\n        this.map = new Map({\r\n            target: 'map',\r\n            layers: [openStreetMap],\r\n            view: new View({\r\n                projection: 'EPSG:4326',\r\n                center: [10, 50],\r\n                zoom: 6\r\n            }),\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.currentStopsGeoJSON && this.props.currentStopsGeoJSON !== prevProps.currentStopsGeoJSON) {\r\n            // First remove layers\r\n            this.map.getLayers().forEach(layer => {\r\n                if (layer && layer.get('type') === 'markers') {\r\n                    this.map.removeLayer(layer);\r\n                }\r\n            });\r\n            // Then add new ones\r\n            for (let key in this.props.currentStopsGeoJSON) {\r\n                const vectorSource = new VectorSource({\r\n                    features: (new GeoJSON()).readFeatures(this.props.currentStopsGeoJSON[key])\r\n                });\r\n                const vectorLayer = new VectorLayer({\r\n                    source: vectorSource,\r\n                    style: new Style({\r\n                        image: new Icon({\r\n                            crossOrigin: 'anonymous',\r\n                            src: 'img/map-marker.png'\r\n                        })\r\n                    })\r\n                });\r\n                vectorLayer.set('type', 'markers');\r\n                this.map.addLayer(vectorLayer);\r\n                const coordinate = vectorSource.getFeatures()[0].getGeometry().getCoordinates();\r\n                this.map.getView().animate({\r\n                    center: coordinate,\r\n                    duration: 500\r\n                })\r\n            }\r\n            // Draw route\r\n            if (Object.keys(this.props.currentStopsGeoJSON).length > 1) {\r\n                this.drawNewRoute();\r\n            } else {\r\n                this.removeCurrentRoute();\r\n            }\r\n        }\r\n    }\r\n\r\n    drawNewRoute = () => {\r\n        if (this.findRouteCancel)\r\n            this.findRouteCancel();\r\n        let hops = [];\r\n        for (let key in this.props.currentStopsGeoJSON) {\r\n            hops.push(\"!\" + this.props.currentStopsGeoJSON[key].properties.id);\r\n        }\r\n        axios.get(this.props.routingUrl, {\r\n            params: {\r\n                via: hops.join(\"|\"),\r\n                mot: this.props.currentMot,\r\n                key: this.props.APIKey\r\n            },\r\n            cancelToken: new this.findRouteCancelToken((cancel) => {\r\n                this.findRouteCancel = cancel;\r\n            })\r\n        })\r\n            .then((response) => {\r\n                const vectorSource = new VectorSource({\r\n                    features: (new GeoJSON()).readFeatures(response.data)\r\n                });\r\n                const vectorLayer = new VectorLayer({\r\n                    source: vectorSource,\r\n                    style: this.routeStyle\r\n                });\r\n                vectorLayer.set('type', 'route');\r\n                this.map.addLayer(vectorLayer);\r\n                this.map.getView().fit(vectorSource.getExtent(), {size: this.map.getSize(), duration: 500});\r\n            }, (error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    removeCurrentRoute = () => {\r\n        this.map.getLayers().forEach(layer => {\r\n            if (layer && layer.get('type') === 'route') {\r\n                this.map.removeLayer(layer);\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\" className=\"MapComponent\"/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentMot: state.MapReducer.currentMot,\r\n        currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MapComponent);","import MapComponent from \"./MapComponent\";\r\n\r\nexport default MapComponent;","import React from 'react';\r\nimport DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\r\nimport DirectionsBoatIcon from '@material-ui/icons/DirectionsBoat';\r\nimport RowingIcon from '@material-ui/icons/Rowing';\r\nimport TramIcon from '@material-ui/icons/Tram';\r\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\r\nimport DirectionsSubwayIcon from '@material-ui/icons/DirectionsSubway';\r\nimport CallMergeIcon from '@material-ui/icons/CallMerge';\r\nimport SubwayIcon from '@material-ui/icons/Subway';\r\n\r\nexport const VALID_MOTS = [\r\n    {\r\n        name: \"bus\",\r\n        icon: <DirectionsBusIcon/>\r\n    },\r\n    {\r\n        name: \"ferry\",\r\n        icon: <DirectionsBoatIcon/>\r\n    },\r\n    {\r\n        name: \"gondola\",\r\n        icon: <RowingIcon/>\r\n    },\r\n    {\r\n        name: \"tram\",\r\n        icon: <TramIcon/>\r\n    },\r\n    {\r\n        name: \"rail\",\r\n        icon: <DirectionsRailwayIcon/>\r\n    },\r\n    {\r\n        name: \"funicular\",\r\n        icon: <DirectionsSubwayIcon/>\r\n    },\r\n    {\r\n        name: \"cable_car\",\r\n        icon: <CallMergeIcon/>\r\n    },\r\n    {\r\n        name: \"subway\",\r\n        icon: <SubwayIcon/>\r\n    }];","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Adjust from '@material-ui/icons/Adjust';\r\nimport Room from '@material-ui/icons/Room';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport DirectionsIcon from '@material-ui/icons/Directions';\r\n\r\nimport * as actions from \"../../store/actions\";\r\nimport \"./RoutingMenu.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {VALID_MOTS} from \"./constants\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nclass RoutingMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const currentMots = this.validateMots(props.mots);\r\n        this.state = {\r\n            currentMots: currentMots,\r\n            currentMot: currentMots[0].name,\r\n            currentSearchResults: [],\r\n            focusedFieldIndex: null,\r\n            currentStops: [\"\", \"\"],\r\n            currentStopsGeoJSON: {},\r\n            showLoadingBar: false,\r\n        };\r\n\r\n        this.searchCancelToken = axios.CancelToken;\r\n        this.searchCancel = null;\r\n        this.props.onSetCurrentMot(currentMots[0].name);\r\n    }\r\n\r\n    validateMots = mots => {\r\n        let currentMots = [];\r\n        mots.forEach(providedMot => {\r\n            let requestedMot = VALID_MOTS.find(mot => mot.name === providedMot);\r\n            if (requestedMot)\r\n                currentMots.push(requestedMot);\r\n        });\r\n        if (currentMots.length === 0)\r\n            currentMots.push(VALID_MOTS[0]);\r\n        return (currentMots);\r\n    };\r\n\r\n    handleMotChange = (event, newMot) => {\r\n        this.setState({currentMot: newMot});\r\n        this.props.onSetCurrentMot(newMot);\r\n    };\r\n\r\n    onFieldFocus = fieldIndex => {\r\n        this.setState({focusedFieldIndex: fieldIndex});\r\n    };\r\n\r\n    onFieldBlur = () => {\r\n        this.setState({focusedFieldIndex: null});\r\n    };\r\n\r\n    searchStops = (event, fieldIndex) => {\r\n        // only search if text is available\r\n        if (!event.target.value) {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[fieldIndex] = \"\";\r\n            this.setState({\r\n                currentSearchResults: [],\r\n                currentStops: updateCurrentStops,\r\n                showLoadingBar: false\r\n            });\r\n            return;\r\n        } else {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[fieldIndex] = event.target.value;\r\n            this.setState({\r\n                currentStops: updateCurrentStops,\r\n                showLoadingBar: true\r\n            });\r\n        }\r\n        if (this.searchCancel)\r\n            this.searchCancel();\r\n        axios.get(this.props.stationSearchUrl, {\r\n            params: {\r\n                q: event.target.value,\r\n                key: this.props.APIKey\r\n            },\r\n            cancelToken: new this.searchCancelToken((cancel) => {\r\n                this.searchCancel = cancel;\r\n            })\r\n        })\r\n            .then((response) => {\r\n                const searchResults = [];\r\n                response.data.features.forEach(singleResult => {\r\n                    if (singleResult.properties.mot[this.state.currentMot])\r\n                        searchResults.push(singleResult);\r\n                });\r\n                this.setState({\r\n                    currentSearchResults: searchResults,\r\n                    showLoadingBar: false\r\n                });\r\n            }, (error) => {\r\n                console.log(error);\r\n                this.setState({\r\n                    showLoadingBar: false\r\n                });\r\n            });\r\n    };\r\n\r\n    processHighlightedResultSelect = event => {\r\n        if (event.key === \"Enter\" && this.state.currentSearchResults[0]) {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[this.state.focusedFieldIndex] = this.state.currentSearchResults[0].properties.name;\r\n            let updateCurrentStopsGeoJSON = {...this.state.currentStopsGeoJSON};\r\n            updateCurrentStopsGeoJSON[this.state.focusedFieldIndex] = this.state.currentSearchResults[0];\r\n            this.setState({\r\n                currentStops: updateCurrentStops,\r\n                currentSearchResults: [],\r\n                currentStopsGeoJSON: updateCurrentStopsGeoJSON\r\n            });\r\n            this.props.onSetCurrentStopsGeoJSON(updateCurrentStopsGeoJSON);\r\n        }\r\n        if(event.key === \"Backspace\") {\r\n            let updateCurrentSearchResults = [];\r\n            if(event.target.value)\r\n                updateCurrentSearchResults = this.state.currentSearchResults;\r\n            let updateCurrentStopsGeoJSON = {};\r\n            for (let key in this.state.currentStopsGeoJSON) {\r\n                if(key !== this.state.focusedFieldIndex.toString()) {\r\n                    updateCurrentStopsGeoJSON[key] = this.state.currentStopsGeoJSON[key];\r\n                }\r\n            }\r\n            this.setState({\r\n                currentStopsGeoJSON: updateCurrentStopsGeoJSON,\r\n                currentSearchResults: updateCurrentSearchResults\r\n            });\r\n            this.props.onSetCurrentStopsGeoJSON(updateCurrentStopsGeoJSON);\r\n        }\r\n    };\r\n\r\n    processRoute = () => {\r\n        this.props.onFindRoute(this.state.currentStopsGeoJSON, this.state.currentMot);\r\n    };\r\n\r\n    render() {\r\n        const actualStops = this.state.currentStops.filter(function (singleStop) {\r\n            return singleStop !== \"\";\r\n        });\r\n        const canSearchForRoute = actualStops.length > 1 ? true : false;\r\n        return (\r\n            <div className=\"RoutingMenu\">\r\n                <Paper square elevation={3}>\r\n                    <Tabs\r\n                        value={this.state.currentMot}\r\n                        onChange={this.handleMotChange}\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        aria-label=\"icon tabs example\"\r\n                    >\r\n                        {\r\n                            this.state.currentMots.map(currentMot => {\r\n                                return (\r\n                                    <Tab key={\"mot-\" + currentMot.name} value={currentMot.name} icon={currentMot.icon}\r\n                                         aria-label={currentMot.name}/>);\r\n                            })\r\n                        }\r\n                    </Tabs>\r\n                    <TabPanel>\r\n                        {\r\n                            this.state.currentStops.map((singleStop, index) => {\r\n                                let fieldLeftIcon = null;\r\n                                let searchFieldSize = 10;\r\n                                let searchFieldLabel = \"\";\r\n                                let fieldRightIcon = null;\r\n                                if(index === 0) {\r\n                                    fieldLeftIcon = <RadioButtonCheckedIcon fontSize=\"small\" color=\"secondary\"/>;\r\n                                    searchFieldLabel = \"Select start station, or click on the map\";\r\n                                    fieldRightIcon = (\r\n                                        <Grid item xs={1}>\r\n                                            <IconButton className=\"addHop\" color=\"primary\" aria-label=\"Add Hop\"\r\n                                                        component=\"span\">\r\n                                                <AddCircleOutlineIcon/>\r\n                                            </IconButton></Grid>);\r\n                                } else if (index === this.state.currentStops.length - 1) {\r\n                                    fieldLeftIcon = <Room color=\"secondary\"/>;\r\n                                    searchFieldLabel = \"Select end station, or click on the map\";\r\n                                    fieldRightIcon = (\r\n                                        <Grid item xs={1}>\r\n                                            <IconButton disabled={!canSearchForRoute} className=\"addHop\" color=\"primary\"\r\n                                                        aria-label=\"Find Route\" onClick={this.processRoute}\r\n                                                        component=\"span\">\r\n                                                <DirectionsIcon/>\r\n                                            </IconButton></Grid>);\r\n                                } else {\r\n                                    fieldLeftIcon = <Adjust fontSize=\"small\" color=\"secondary\"/>;\r\n                                    searchFieldSize = 9;\r\n                                    searchFieldLabel = \"Select station, or click on the map\";\r\n                                    fieldRightIcon = (\r\n                                        <React.Fragment><Grid item xs={1}>\r\n                                            <IconButton className=\"addHop\" color=\"secondary\" aria-label=\"upload picture\"\r\n                                                        component=\"span\">\r\n                                                <RemoveCircleOutlineIcon/>\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                            <Grid item xs={1}>\r\n                                                <IconButton className=\"addHop\" color=\"primary\"\r\n                                                            aria-label=\"upload picture\"\r\n                                                            component=\"span\">\r\n                                                    <AddCircleOutlineIcon/>\r\n                                                </IconButton></Grid></React.Fragment>);\r\n                                }\r\n                                return(\r\n                                    <Grid key={\"searchField-\"+index} container spacing={1} alignItems=\"flex-end\" style={{width: '100%'}}>\r\n                                        <Grid item xs={1}>\r\n                                            {fieldLeftIcon}\r\n                                        </Grid>\r\n                                        <Grid item xs={searchFieldSize}>\r\n                                            <TextField style={{width: '100%'}} label={searchFieldLabel}\r\n                                                       color=\"secondary\" onChange={(e) => this.searchStops(e, index)}\r\n                                                       value={singleStop}\r\n                                                       onKeyDown={this.processHighlightedResultSelect}\r\n                                                       onFocus={() => this.onFieldFocus(index)}\r\n                                                       onBlur={this.onFieldBlur}/>\r\n                                        </Grid>\r\n                                            {fieldRightIcon}\r\n                                    </Grid>\r\n                                )\r\n                            })\r\n                        }\r\n                    </TabPanel>\r\n                    {this.state.showLoadingBar ? <LinearProgress/> : null}\r\n                </Paper>\r\n                {\r\n                    this.state.currentSearchResults.length !== 0 ?\r\n                        <div>\r\n                            <hr/>\r\n                            <Paper square elevation={1}>\r\n                                <TabPanel>\r\n                                    {this.state.currentSearchResults.map((searchResult, index) => {\r\n                                        if (index !== 0) {\r\n                                            return (\r\n                                                <Typography key={\"searchResult-\" + searchResult.properties.name} variant=\"subtitle1\"\r\n                                                            gutterBottom>\r\n                                                    {searchResult.properties.name}\r\n                                                </Typography>\r\n                                            );\r\n                                        } else {\r\n                                            // First Element\r\n                                            return (\r\n                                                <Typography key={\"searchResult-\" + searchResult.properties.name} variant=\"h6\"\r\n                                                            gutterBottom>\r\n                                                    {searchResult.properties.name}\r\n                                                </Typography>\r\n                                            );\r\n                                        }\r\n                                    })}\r\n                                </TabPanel>\r\n                            </Paper>\r\n                        </div> : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSetCurrentMot: (currentMot) => dispatch(actions.setCurrentMot(currentMot)),\r\n        onSetCurrentStopsGeoJSON: (currentStopsGeoJSON) => dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RoutingMenu);","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const setCurrentStopsGeoJSON = (currentStopsGeoJSON) => {\r\n    return {\r\n        type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\r\n        currentStopsGeoJSON: currentStopsGeoJSON,\r\n    };\r\n};\r\n\r\nexport const setCurrentMot = (currentMot) => {\r\n    return {\r\n        type: actionTypes.SET_CURRENT_MOT,\r\n        currentMot: currentMot,\r\n    };\r\n};","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport store from '../../store/store';\r\nimport MapComponent from \"../MapComponent\";\r\nimport RoutingMenu from \"../RoutingMenu/RoutingMenu\";\r\n\r\nfunction GeopsRoutingDemo(props) {\r\n    return (\r\n        <Provider store={store}>\r\n            <RoutingMenu {...props}/>\r\n            <MapComponent {...props}/>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default GeopsRoutingDemo;\r\n","import GeopsRoutingDemo from \"./GeopsRoutingDemo\";\r\n\r\nexport default GeopsRoutingDemo;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GeopsRoutingDemo from './Components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst geopsRoutingDemo =\r\n    <GeopsRoutingDemo\r\n        mots={['rail','bus','tram']}\r\n        routingUrl=\"https://api.geops.io/routing/v1/\"\r\n        stationSearchUrl=\"https://api.geops.io/stops/v1/\"\r\n        APIKey=\"5cc87b12d7c5370001c1d655d0a18192eba64838a5fa1ad7d482ab82\"\r\n    />;\r\nReactDOM.render(geopsRoutingDemo, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}