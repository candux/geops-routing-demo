{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","store/actions/Map.jsx","constants.js","utils.jsx","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","store/prop-types.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","config/styleConfig.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","setCurrentStops","state","action","updatedState","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","GRAPHHOPPER_MOTS","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","decimal","transform","map","c","toFixed","renderSecondary","code","countryCode","SearchResults","props","currentSearchResults","processClickedResultHandler","length","Paper","square","elevation","List","component","aria-label","searchResult","index","ListItem","onClick","button","key","nextId","ListItemIcon","ListItemText","primary","properties","secondary","country_code","selected","defaultProps","coordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","id","oneOfType","currentStop","features","useStyles","makeStyles","gridContainer","width","padding","boxSizing","color","height","fieldWrapper","maxWidth","buttonWrapper","SearchField","val","classes","dispatch","useDispatch","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","onZoomRouteClick","isActiveRoute","onPanViaClick","inputReference","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","addNextHopDisabled","Tooltip","IconButton","className","size","fontSize","Grid","item","xs","disabled","container","spacing","alignItems","TextField","style","inputRef","label","onChange","e","value","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","target","select","TabPanel","children","Typography","role","hidden","aria-labelledby","tabs","tab","minWidth","dropDown","backgroundColor","selectInput","checkbox","abortController","AbortController","RoutingMenu","mots","stationSearchUrl","APIKey","validateMots","motsArray","validationMots","currentMotsArray","filter","mot","includes","forEach","providedMot","requestedMot","find","push","icon","currentMotsVal","otherMotsVal","useSelector","elRefs","React","useRef","current","fill","el","i","createRef","useState","currentMots","setCurrentMotState","otherMots","lastChangedFieldIdx","setLastChangedFieldIdx","setCurrentSearchResults","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","showLoadingBar","setShowLoadingBar","undefined","currentOtherMot","setCurrentOtherMot","useEffect","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","_","clone","tempGeoJSON","reverse","handleMotChange","newMot","fieldIndex","currStops","indexToInsertAt","splice","keys","Object","k","parseInt","indexToRemoveFrom","abort","signal","reqUrl","fetch","then","response","json","error","catch","err","console","warn","firstSearchResult","updateCurrentSearchResults","toString","Tabs","indicatorColor","textColor","singleMot","Tab","FormControl","Select","renderValue","root","labelId","disableUnderline","displayEmpty","evt","MenuItem","Checkbox","checked","inputProps","LinearProgress","lineStyler","lineStyle","Style","stroke","Stroke","lineDash","railLineStyle","railLineHoveredStyle","busLineStyle","busLineHoveredStyle","pedestrianLineStyle","pedestrianLineHoveredStyle","carLineStyle","carLineHoveredStyle","othersLineStyle","othersLineHoveredStyle","railPointStyle","image","Circle","radius","Fill","pedestrianPointStyle","carPointStyle","busPointStyle","othersPointStyle","lineStyleFunction","isHovered","MapComponent","drawNewRoute","hops","routingUrl","onShowNotification","uid","join","routeVectorSource","clear","format","GeoJSON","dataProjection","featureProjection","addFeatures","readFeatures","setIsActiveRoute","getFeatures","f","setStyle","hoveredFeature","hoveredRoute","hoveredStationOpen","hoveredStationName","this","onSetClickLocation","center","markerVectorSource","VectorSource","markerVectorLayer","VectorLayer","zIndex","source","routeVectorLayer","translate","Translate","layers","on","featureIndex","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","newCurentStopsGeoJSON","getArray","getProperties","indexOf","array","isItemInArray","coordinate","Map","interactions","defaultInteractions","extend","view","View","projection","zoom","mbMap","mapboxgl","attributionControl","boxZoom","toLonLat","getTargetElement","doubleClickZoom","dragPan","dragRotate","interactive","keyboard","pitchWithRotate","scrollZoom","touchZoomRotate","mbLayer","Layer","render","frameState","canvas","getCanvas","viewState","visible","getVisible","display","opacity","getOpacity","rotation","rotateTo","Math","PI","animate","jumpTo","_frame","cancel","_render","l","addLayer","featExtent","getExtent","Number","isFinite","getView","fit","getSize","duration","idx","featureCoord","setState","hovFeats","getFeaturesAtPixel","pixel","document","body","classList","add","contains","remove","getGeometry","getType","featCountryCode","get","flatCoordinates","prevProps","currentMotChanged","currentStopsGeoJSONChanged","Snackbar","anchorOrigin","vertical","horizontal","open","message","Component","getExtentCenter","extent","connect","actions","NotificationHandler","handleOpen","handleClose","autoHideDuration","onClose","Alert","severity","variant","App","process","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.301f14b9.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  currentMot: 'bus',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import * as actionTypes from './actionTypes';\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nexport const DEFAULT_MOTS = ['rail', 'bus', 'foot'];\n\nexport const OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n];\n\nexport const VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport const GRAPHHOPPER_MOTS = ['foot', 'car'];\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = (coord, decimal = 4) => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326').map(c =>\n    c.toFixed(decimal),\n  );\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\n\nconst renderSecondary = (code, countryCode) => {\n  if (code && countryCode) {\n    return `${code} - ${countryCode}`;\n  }\n  if (code || countryCode) {\n    return code || countryCode;\n  }\n  return null;\n};\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3}>\n      <List component=\"nav\" aria-label=\"search results\">\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={renderSecondary(\n                    searchResult.properties.code,\n                    searchResult.properties.country_code,\n                  )}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={renderSecondary(\n                  searchResult.properties.code,\n                  searchResult.properties.country_code,\n                )}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import PropTypes from 'prop-types';\n\nconst coordinates = PropTypes.arrayOf(PropTypes.number.isRequired).isRequired;\n\nconst geometry = PropTypes.shape({\n  coordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, coordinates]),\n    '1': PropTypes.oneOfType([feature, coordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, coordinates]),\n);\n\nexport { propTypeCurrentStops, propTypeCurrentStopsGeoJSON };\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\nconst useStyles = makeStyles(() => ({\n  gridContainer: {\n    width: '100%',\n    padding: '0px 0px 0px 20px',\n    boxSizing: 'unset',\n  },\n  button: {\n    color: 'black',\n    '& svg': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n  fieldWrapper: {\n    maxWidth: '75%',\n  },\n  buttonWrapper: {\n    maxWidth: '26px',\n  },\n}));\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n    onZoomRouteClick,\n    isActiveRoute,\n    onPanViaClick,\n    inputReference,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n\n  const addNextHopDisabled =\n    currentStops[index] === '' ||\n    (currentStops.length > 2 && currentStops[index + 1] === '');\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n            disabled={addNextHopDisabled}\n            className={classes.button}\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Room color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'End';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Zoom to the route\">\n          <IconButton\n            onClick={() => onZoomRouteClick()}\n            disabled={!isActiveRoute}\n            className={classes.button}\n            aria-label=\"Zoom to the route\"\n            size=\"small\"\n          >\n            <ZoomInIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Adjust fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              disabled={addNextHopDisabled}\n              onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n              className={classes.button}\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              className={classes.button}\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      className={classes.gridContainer}\n      alignItems=\"flex-end\"\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize} className={classes.fieldWrapper}>\n        <TextField\n          style={{\n            width: '100%',\n          }}\n          inputRef={inputReference}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n  onZoomRouteClick: PropTypes.func.isRequired,\n  onPanViaClick: PropTypes.func.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  inputReference: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]).isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n} from '../../store/actions/Map';\nimport './RoutingMenu.css';\nimport {\n  VALID_MOTS,\n  DEFAULT_MOTS,\n  OTHER_MOTS,\n  GRAPHHOPPER_MOTS,\n} from '../../constants';\nimport { to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '33%',\n    width: '33%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  select: {\n    height: '100%',\n  },\n  selectInput: {\n    backgroundColor: 'white',\n    '&:focus': {\n      backgroundColor: 'white',\n    },\n  },\n  checkbox: {\n    padding: '20px 23px',\n  },\n}));\n\nlet abortController = new AbortController();\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({\n  mots,\n  stationSearchUrl,\n  APIKey,\n  isActiveRoute,\n  onZoomRouteClick,\n  onPanViaClick,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n\n  const elRefs = React.useRef([]);\n  if (elRefs.current.length !== currentStops.length) {\n    elRefs.current = Array(currentStops.length)\n      .fill()\n      .map((el, i) => elRefs.current[i] || React.createRef());\n  }\n\n  const [currentMots] = useState(currentMotsVal);\n  const [currentMot, setCurrentMotState] = useState(currentMotsVal[0].name);\n  const [otherMots] = useState(otherMotsVal);\n  const [lastChangedFieldIdx, setLastChangedFieldIdx] = useState(null);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [showLoadingBar, setShowLoadingBar] = useState(false);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  useEffect(() => {\n    dispatch(setCurrentMot(currentMots[0].name));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot) => {\n    setCurrentOtherMot(null);\n    setCurrentMotState(newMot);\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = (currStops, indexToInsertAt) => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n\n    if (updatedCurrentStopsGeoJSON[indexToInsertAt]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON).reverse();\n      keys.forEach(k => {\n        if (parseInt(k, 10) >= keys.length - 1) {\n          updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n            updatedCurrentStopsGeoJSON[k];\n        }\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n\n    if (updatedCurrentStopsGeoJSON[indexToRemoveFrom]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON);\n      keys.forEach(key => {\n        const k = parseInt(key, 10);\n        if (k === indexToRemoveFrom) {\n          delete updatedCurrentStopsGeoJSON[indexToRemoveFrom];\n        } else if (k > indexToRemoveFrom) {\n          updatedCurrentStopsGeoJSON[k - 1] = updatedCurrentStopsGeoJSON[k];\n        }\n      });\n      delete updatedCurrentStopsGeoJSON[keys.length - 1];\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    setLastChangedFieldIdx(fieldIndex);\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setShowLoadingBar(false);\n      return;\n    }\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setShowLoadingBar(true);\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${stationSearchUrl}?q=${event.target.value}&key=${APIKey}${\n      !GRAPHHOPPER_MOTS.includes(currentMot)\n        ? `&mots=${searchMotOnly ? currentMot : ''}`\n        : ''\n    }`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        if (response.error) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n          return;\n        }\n        if (response.features.length === 0) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n        }\n        setCurrentSearchResults(response.features);\n        setShowLoadingBar(false);\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  const retriggerSearch = () => {\n    if (lastChangedFieldIdx === null) {\n      return;\n    }\n    searchStopsHandler(\n      {\n        target: {\n          value: elRefs.current[lastChangedFieldIdx].current.value,\n        },\n      },\n      lastChangedFieldIdx,\n    );\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(null);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  if (!onZoomRouteClick || !onPanViaClick) {\n    return null;\n  }\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl className={classes.dropDown}>\n            <Select\n              renderValue={val => (val !== '' ? val : 'Other MOTs')}\n              className={classes.select}\n              classes={{ root: classes.selectInput }}\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot || ''}\n              disableUnderline={!currentOtherMot}\n              displayEmpty\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          {currentStops.map((singleStop, index) => {\n            return (\n              <SearchField\n                // eslint-disable-next-line react/no-array-index-key\n                key={`searchField-${index}`}\n                index={index}\n                inputReference={elRefs.current[index]}\n                addNewSearchFieldHandler={addNewSearchFieldHandler}\n                currentStops={currentStops}\n                removeSearchFieldHandler={removeSearchFieldHandler}\n                searchStopsHandler={searchStopsHandler}\n                singleStop={singleStop}\n                processHighlightedResultSelectHandler={\n                  processHighlightedResultSelectHandler\n                }\n                onFieldFocusHandler={onFieldFocusHandler}\n                onZoomRouteClick={onZoomRouteClick}\n                onPanViaClick={onPanViaClick}\n                isActiveRoute={isActiveRoute}\n              />\n            );\n          })}\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => {\n                setSearchMotOnly(!searchMotOnly);\n                retriggerSearch(lastChangedFieldIdx);\n              }}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  onZoomRouteClick: PropTypes.func,\n  onPanViaClick: PropTypes.func,\n};\n\nRoutingMenu.defaultProps = {\n  onZoomRouteClick: undefined,\n  onPanViaClick: undefined,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst lineStyler = lineStyle => {\n  return lineStyle.map(\n    style =>\n      new Style({\n        stroke: new Stroke({\n          color: style[0],\n          width: style[1],\n          lineDash: style[2],\n        }),\n      }),\n  );\n};\n\nconst railLineStyle = lineStyler([\n  ['darkred', 6],\n  ['red', 3],\n]);\n\nconst railLineHoveredStyle = lineStyler([\n  ['darkred', 7],\n  ['red', 4],\n]);\n\nconst busLineStyle = lineStyler([\n  ['rgb(153,153,0)', 6],\n  ['yellow', 3],\n]);\n\nconst busLineHoveredStyle = lineStyler([\n  ['rgb(153,153,0)', 7],\n  ['yellow', 4],\n]);\n\nconst pedestrianLineStyle = lineStyler([\n  ['rgb(96, 186, 219)', 6],\n  ['rgb(173, 216, 230)', 3],\n]);\n\nconst pedestrianLineHoveredStyle = lineStyler([\n  ['rgb(96, 186, 219)', 7],\n  ['rgb(173, 216, 230)', 4],\n]);\n\nconst carLineStyle = lineStyler([\n  ['grey', 6],\n  ['darkgrey', 3],\n]);\n\nconst carLineHoveredStyle = lineStyler([\n  ['grey', 7],\n  ['darkgrey', 4],\n]);\n\nconst othersLineStyle = lineStyler([\n  ['darkblue', 6],\n  ['blue', 3],\n]);\n\nconst othersLineHoveredStyle = lineStyler([\n  ['darkblue', 7],\n  ['blue', 4],\n]);\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'darkred', width: 2 }),\n  }),\n});\n\nconst pedestrianPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'rgb(173, 216, 230)' }),\n    stroke: new Stroke({ color: 'rgb(96, 186, 219)', width: 2 }),\n  }),\n});\n\nconst carPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'darkgrey' }),\n    stroke: new Stroke({ color: 'grey', width: 2 }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'rgb(153,153,0)', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'darkblue', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianPointStyle;\n  }\n  if (mot === 'car') {\n    return carPointStyle;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = (mot, isHovered) => {\n  if (mot === 'rail') {\n    return isHovered ? railLineHoveredStyle : railLineStyle;\n  }\n  if (mot === 'bus') {\n    return isHovered ? busLineHoveredStyle : busLineStyle;\n  }\n  if (mot === 'foot') {\n    return isHovered ? pedestrianLineHoveredStyle : pedestrianLineStyle;\n  }\n  if (mot === 'car') {\n    return isHovered ? carLineHoveredStyle : carLineStyle;\n  }\n  return isHovered ? othersLineHoveredStyle : othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Map, View } from 'ol';\nimport { toLonLat } from 'ol/proj';\nimport { Layer, Vector as VectorLayer } from 'ol/layer';\nimport mapboxgl from 'mapbox-gl';\nimport _ from 'lodash/core';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport { defaults as defaultInteractions, Translate } from 'ol/interaction';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport RoutingMenu from '../RoutingMenu';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { GRAPHHOPPER_MOTS } from '../../constants';\nimport { to4326 } from '../../utils';\nimport './MapComponent.css';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\nlet abortController = new AbortController();\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  static getExtentCenter = extent => {\n    const X = extent[0] + (extent[2] - extent[0]) / 2;\n    const Y = extent[1] + (extent[3] - extent[1]) / 2;\n    return [X, Y];\n  };\n\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    this.hoveredFeature = null;\n    this.hoveredRoute = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n      isActiveRoute: false,\n    };\n  }\n\n  /**\n   * Create Openlayers map (source, view, layer, etc...).\n   * Add event listener onClick to handle location selection from map.\n   * @category Map\n   */\n  componentDidMount() {\n    const { APIKey, onSetClickLocation } = this.props;\n    const center = [949042.143189, 5899715.591163];\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    this.markerVectorLayer = new VectorLayer({\n      zIndex: 1,\n      source: this.markerVectorSource,\n    });\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({});\n    this.routeVectorLayer = new VectorLayer({\n      zIndex: 0,\n      source: this.routeVectorSource,\n    });\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer],\n    });\n\n    const isItemInArray = (array, item) => {\n      for (let i = 0; i < array.length; i += 1) {\n        if (array[i][0] === item[0] && array[i][1] === item[1]) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    const handleMapCursor = isHovering => {\n      if (isHovering) {\n        document.body.classList.add('rd-pointer');\n      } else if (document.body.classList.contains('rd-pointer')) {\n        document.body.classList.remove('rd-pointer');\n      }\n    };\n\n    translate.on('translateend', evt => {\n      const {\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        featureIndex = isItemInArray(currentStops, id.slice().reverse());\n      }\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    this.map = new Map({\n      target: 'map',\n      interactions: defaultInteractions().extend([translate]),\n      view: new View({\n        projection: 'EPSG:3857',\n        center,\n        zoom: 6,\n      }),\n    });\n\n    const mbMap = new mapboxgl.Map({\n      style: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n      attributionControl: false,\n      boxZoom: false,\n      center: toLonLat(center),\n      container: this.map.getTargetElement(),\n      doubleClickZoom: false,\n      dragPan: false,\n      dragRotate: false,\n      interactive: false,\n      keyboard: false,\n      pitchWithRotate: false,\n      scrollZoom: false,\n      touchZoomRotate: false,\n    });\n\n    /* eslint-disable no-underscore-dangle */\n    const mbLayer = new Layer({\n      render: frameState => {\n        const canvas = mbMap.getCanvas();\n        const { viewState } = frameState;\n\n        const visible = mbLayer.getVisible();\n        canvas.style.display = visible ? 'block' : 'none';\n\n        const opacity = mbLayer.getOpacity();\n        canvas.style.opacity = opacity;\n\n        // adjust view parameters in mapbox\n        const { rotation } = viewState;\n        if (rotation) {\n          mbMap.rotateTo((-rotation * 180) / Math.PI, {\n            animate: false,\n          });\n        }\n        mbMap.jumpTo({\n          center: toLonLat(viewState.center),\n          zoom: viewState.zoom - 1,\n          animate: false,\n        });\n\n        if (mbMap._frame) {\n          mbMap._frame.cancel();\n          mbMap._frame = null;\n        }\n        mbMap._render();\n\n        return canvas;\n      },\n    });\n\n    [mbLayer, this.markerVectorLayer, this.routeVectorLayer].forEach(l =>\n      this.map.addLayer(l),\n    );\n\n    this.onZoomRouteClick = () => {\n      let featExtent;\n      if (this.routeVectorSource.getFeatures().length) {\n        featExtent = this.routeVectorSource.getExtent();\n      }\n\n      if (featExtent.filter(f => Number.isFinite(f)).length === 4) {\n        this.map.getView().fit(this.routeVectorSource.getExtent(), {\n          size: this.map.getSize(),\n          duration: 500,\n          padding: [200, 200, 200, 200],\n        });\n      }\n    };\n\n    this.onPanViaClick = (item, idx) => {\n      const { currentStopsGeoJSON } = this.props;\n      if (currentStopsGeoJSON && currentStopsGeoJSON[idx]) {\n        const featureCoord = currentStopsGeoJSON[idx].features\n          ? currentStopsGeoJSON[idx].features[0].geometry.coordinates\n          : currentStopsGeoJSON[idx].geometry.coordinates;\n\n        this.map.getView().animate({\n          center: featureCoord,\n          duration: 500,\n          padding: [100, 100, 100, 100],\n        });\n      }\n    };\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStops } = this.props;\n      // if one field empty or if a field is focused\n      if (currentStops.includes('') || isFieldFocused) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      const { currentMot } = this.props;\n\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n\n      if (this.hoveredRoute) {\n        this.hoveredRoute.setStyle(lineStyleFunction(currentMot, false));\n        this.hoveredRoute = null;\n      }\n      const hovFeats = this.map.getFeaturesAtPixel(evt.pixel);\n      handleMapCursor(hovFeats.length);\n\n      hovFeats.forEach(feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          const featCountryCode = feature.get('country_code');\n          if (feature.get('name')) {\n            name = `${feature.get('name')}${\n              featCountryCode ? ` - ${featCountryCode}` : ''\n            }`;\n          } else {\n            name = `${to4326(feature.getGeometry().flatCoordinates)}`;\n          }\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        if (feature.getGeometry().getType() === 'LineString') {\n          this.hoveredRoute = feature;\n          feature.setStyle(lineStyleFunction(currentMot, true));\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n\n    if (currentMotChanged || currentStopsGeoJSONChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      this.setIsActiveRoute(false);\n\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  setIsActiveRoute(isActiveRoute) {\n    this.setState({ isActiveRoute });\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = () => {\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      onShowNotification,\n    } = this.props;\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `${to4326(currentStopsGeoJSON[key].features[0].geometry.coordinates)\n            .slice()\n            .reverse()}`,\n        );\n      } else if (currentMot === 'rail' || currentMot === 'bus') {\n        hops.push(`!${currentStopsGeoJSON[key].properties.uid}`);\n      } else {\n        hops.push(`${currentStopsGeoJSON[key].properties.name}`);\n      }\n    });\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${routingUrl}?via=${hops.join(\n      '|',\n    )}&mot=${currentMot}&resolve-hops=false&srs=3857&key=${APIKey}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        if (response.error) {\n          onShowNotification(\"Couldn't find route\", 'error');\n          return;\n        }\n        // A route was found, prepare to draw it.\n        this.routeVectorSource.clear();\n        const format = GRAPHHOPPER_MOTS.includes(currentMot)\n          ? new GeoJSON({\n              dataProjection: 'EPSG:4326',\n              featureProjection: 'EPSG:3857',\n            })\n          : new GeoJSON();\n        this.routeVectorSource.addFeatures(format.readFeatures(response));\n        this.setIsActiveRoute(!!this.routeVectorSource.getFeatures().length);\n\n        this.routeVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(lineStyleFunction(currentMot)));\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const { mots, APIKey, stationSearchUrl } = this.props;\n    const {\n      isActiveRoute,\n      hoveredStationOpen,\n      hoveredStationName,\n    } = this.state;\n    return (\n      <>\n        <RoutingMenu\n          mots={mots}\n          stationSearchUrl={stationSearchUrl}\n          isActiveRoute={isActiveRoute}\n          onZoomRouteClick={this.onZoomRouteClick}\n          onPanViaClick={this.onPanViaClick}\n          APIKey={APIKey}\n        />\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <div id=\"map\" className=\"rd-map-comp\" />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n  };\n};\n\nMapComponent.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport { showNotification } from '../../store/actions';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    const { onShowNotification } = this.props;\n    this.setState({\n      open: false,\n    });\n    onShowNotification(null, 'error');\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(showNotification(notificationMessage, notificationType)),\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  onShowNotification: PropTypes.func.isRequired,\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport NotificationHandler from '../NotificationHandler';\nimport { VALID_MOTS } from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/dev/',\n  stationSearchUrl: 'https://api.geops.io/stops/dev/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  return (\n    <Provider store={store}>\n      <MapComponent\n        mots={mots}\n        routingUrl={routingUrl}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import polyfills for ie 11\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}