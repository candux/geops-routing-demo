{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","store/actions/Map.jsx","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/RoutingMenu/constants.js","Components/RoutingMenu/RoutingMenu.jsx","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/GeopsRoutingDemo/GeopsRoutingDemo.jsx","Components/index.js","serviceWorker.js","index.js"],"names":["initialState","currentMot","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","setCurrentStopsGeoJSON","state","action","updatedState","setCurrentMot","setClickLocation","showNotification","reducer","type","composeEnhancers","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","MapComponent","props","drawNewRoute","findRouteCancel","hops","key","features","push","properties","id","axios","get","routingUrl","params","via","join","mot","APIKey","cancelToken","findRouteCancelToken","cancel","then","response","vectorSource","VectorSource","GeoJSON","readFeatures","data","vectorLayer","VectorLayer","source","style","routeStyle","set","map","addLayer","getView","fit","getExtent","size","getSize","duration","error","console","log","onShowNotification","removeCurrentRoute","getLayers","forEach","layer","removeLayer","CancelToken","Style","stroke","Stroke","color","width","esriTopoMap","TileLayer","XYZ","attributions","url","this","Map","target","layers","view","View","projection","center","zoom","on","evt","onSetClickLocation","coordinate","prevProps","getFeatures","getGeometry","getCoordinates","animate","Object","keys","length","className","Component","connect","dispatch","actions","VALID_MOTS","name","icon","TabPanel","children","value","index","other","Typography","component","role","hidden","aria-labelledby","Box","p","RoutingMenu","validateMots","mots","currentMots","providedMot","requestedMot","find","handleMotChange","event","newMot","setState","onSetCurrentMot","onFieldFocus","fieldIndex","focusedFieldIndex","onFieldBlur","addNewSearchField","indexToInsertAt","updatedCurrentStops","currentStops","splice","removeSearchField","indexToRemoveFrom","updateCurrentStopsGeoJSON","toString","onSetCurrentStopsGeoJSON","searchStops","updateCurrentStops","currentSearchResults","showLoadingBar","searchCancel","stationSearchUrl","q","searchCancelToken","searchResults","singleResult","processHighlightedResultSelect","updateCurrentSearchResults","processClickedResult","searchResult","processRoute","onFindRoute","tempGeoJSON","slice","reverse","filter","singleStop","Paper","square","elevation","Tabs","onChange","variant","scrollButtons","indicatorColor","textColor","aria-label","Tab","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","fontSize","Grid","item","xs","Tooltip","title","IconButton","onClick","Fragment","container","spacing","alignItems","TextField","label","e","onKeyDown","onFocus","onBlur","LinearProgress","List","ListItem","button","ListItemIcon","ListItemText","primary","secondary","code","country_code","selected","React","Alert","NotificationHandler","handleClose","open","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","severity","GeopsRoutingDemo","Boolean","window","location","hostname","match","geopsRoutingDemo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAEMA,EAAe,CACjBC,WAAY,MACZC,oBAAqB,GACrBC,cAAe,KACfC,oBAAqB,GACrBC,iBAAkB,QAGhBC,EAAyB,SAACC,EAAOC,GACnC,IAAMC,EAAe,CACjBP,oBAAqBM,EAAON,qBAEhC,OAAO,eACAK,EADP,GAEOE,IAILC,EAAgB,SAACH,EAAOC,GAC1B,IAAMC,EAAe,CACjBR,WAAYO,EAAOP,YAEvB,OAAO,eACAM,EADP,GAEOE,IAILE,EAAmB,SAACJ,EAAOC,GAC7B,IAAMC,EAAe,CACjBN,cAAeK,EAAOL,eAE1B,OAAO,eACAI,EADP,GAEOE,IAILG,EAAmB,SAACL,EAAOC,GAC7B,IAAMC,EAAe,CACjBL,oBAAqBI,EAAOJ,oBAC5BC,iBAAkBG,EAAOH,kBAE7B,OAAO,eACAE,EADP,GAEOE,IAoBII,EAfC,WAAmC,IAAlCN,EAAiC,uDAAzBP,EAAcQ,EAAW,uCAC9C,OAAQA,EAAOM,MACX,ICtDiC,4BDuD7B,OAAOR,EAAuBC,EAAOC,GACzC,ICvDuB,kBDwDnB,OAAOE,EAAcH,EAAOC,GAChC,ICxD0B,qBDyDtB,OAAOG,EAAiBJ,EAAOC,GACnC,ICzDyB,oBD0DrB,OAAOI,EAAiBL,EAAOC,GACnC,QACI,OAAOD,IE1DbQ,EAAkHC,IAClHC,EAAcC,YAAgB,CAChCC,WAAYA,IAMDC,EAJDC,YAAYJ,EAAaF,EACnCO,YAAgBC,O,mJCMPZ,EAAmB,SAACR,GAC7B,MAAO,CACHW,KFhB0B,qBEiB1BX,cAAeA,IAIVS,EAAmB,SAACR,EAAqBC,GAClD,MAAO,CACHS,KFtByB,oBEuBzBV,oBAAqBA,EACrBC,iBAAkBA,ICfpBmB,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAmEVC,aAAe,WACP,EAAKC,iBACL,EAAKA,kBACT,IAAIC,EAAO,GACX,IAAK,IAAIC,KAAO,EAAKJ,MAAMvB,oBACpB,EAAKuB,MAAMvB,oBAAoB2B,GAAKC,SACnCF,EAAKG,KAAK,IAAM,EAAKN,MAAMvB,oBAAoB2B,GAAKC,SAAS,GAAGE,WAAWC,IAE3EL,EAAKG,KAAK,IAAM,EAAKN,MAAMvB,oBAAoB2B,GAAKG,WAAWC,IAEvEC,IAAMC,IAAI,EAAKV,MAAMW,WAAY,CAC7BC,OAAQ,CACJC,IAAKV,EAAKW,KAAK,KACfC,IAAK,EAAKf,MAAMxB,WAChB4B,IAAK,EAAKJ,MAAMgB,QAEpBC,YAAa,IAAI,EAAKC,sBAAqB,SAACC,GACxC,EAAKjB,gBAAkBiB,OAG1BC,MAAK,SAACC,GACH,IAAMC,EAAe,IAAIC,IAAa,CAClClB,UAAW,IAAImB,KAAWC,aAAaJ,EAASK,QAE9CC,EAAc,IAAIC,IAAY,CAChCC,OAAQP,EACRQ,MAAO,EAAKC,aAEhBJ,EAAYK,IAAI,OAAQ,SACxB,EAAKC,IAAIC,SAASP,GAClB,EAAKM,IAAIE,UAAUC,IAAId,EAAae,YAAa,CAACC,KAAM,EAAKL,IAAIM,UAAWC,SAAU,SACvF,SAACC,GACAC,QAAQC,IAAIF,GACZ,EAAKzC,MAAM4C,mBAAmB,sBAAuB,aArG9C,EAyGnBC,mBAAqB,WACjB,EAAKZ,IAAIa,YAAYC,SAAQ,SAAAC,GACrBA,GAA+B,UAAtBA,EAAMtC,IAAI,SACnB,EAAKuB,IAAIgB,YAAYD,OA1G7B,EAAK9B,qBAAuBT,IAAMyC,YAClC,EAAKhD,gBAAkB,KACvB,EAAK6B,WAAa,IAAIoB,IAAM,CACxBC,OAAQ,IAAIC,IAAO,CACfC,MAAO,MAEPC,MAAO,MARA,E,iFAaE,IAAD,OACVC,EAAc,IAAIC,IAAU,CAC9B5B,OAAQ,IAAI6B,IAAI,CACZC,aAAc,0QAGdC,IAAK,qGAIbC,KAAK5B,IAAM,IAAI6B,IAAI,CACfC,OAAQ,MACRC,OAAQ,CAACR,GACTS,KAAM,IAAIC,IAAK,CACXC,WAAY,YACZC,OAAQ,CAAC,GAAI,IACbC,KAAM,MAGdR,KAAK5B,IAAIqC,GAAG,eAAe,SAACC,GACxB,EAAKvE,MAAMwE,mBAAmBD,EAAIE,iB,yCAIvBC,GAAY,IAAD,OAC1B,GAAIb,KAAK7D,MAAMvB,qBAAuBoF,KAAK7D,MAAMvB,sBAAwBiG,EAAUjG,oBAAqB,CAQpG,IAAK,IAAI2B,KANTyD,KAAK5B,IAAIa,YAAYC,SAAQ,SAAAC,GACrBA,GAA+B,YAAtBA,EAAMtC,IAAI,SACnB,EAAKuB,IAAIgB,YAAYD,MAIba,KAAK7D,MAAMvB,oBAAqB,CAC5C,IAAM6C,EAAe,IAAIC,IAAa,CAClClB,UAAW,IAAImB,KAAWC,aAAaoC,KAAK7D,MAAMvB,oBAAoB2B,MAEpEuB,EAAc,IAAIC,IAAY,CAACC,OAAQP,IAC7CK,EAAYK,IAAI,OAAQ,WACxB6B,KAAK5B,IAAIC,SAASP,GAClB,IAAM8C,EAAanD,EAAaqD,cAAc,GAAGC,cAAcC,iBAC/DhB,KAAK5B,IAAIE,UAAU2C,QAAQ,CACvBV,OAAQK,EACRjC,SAAU,MAIduC,OAAOC,KAAKnB,KAAK7D,MAAMvB,qBAAqBwG,OAAS,EACrDpB,KAAK5D,eAEL4D,KAAKhB,wB,+BAmDb,OACI,yBAAKrC,GAAG,MAAM0E,UAAU,qB,GApHTC,aCVZpF,EDkJAqF,aAfS,SAAAtG,GACpB,MAAO,CACHN,WAAYM,EAAMY,WAAWlB,WAC7BC,oBAAqBK,EAAMY,WAAWjB,wBAInB,SAAA4G,GACvB,MAAO,CACHb,mBAAoB,SAAC9F,GAAD,OAAmB2G,EAASC,EAAyB5G,KACzEkE,mBAAoB,SAACjE,EAAqBC,GAAtB,OAA2CyG,EAASC,EAAyB3G,EAAqBC,QAK/GwG,CAA6CrF,G,obE1I/CwF,GAAa,CACtB,CACIC,KAAM,MACNC,KAAM,kBAAC,KAAD,OAEV,CACID,KAAM,QACNC,KAAM,kBAAC,KAAD,OAEV,CACID,KAAM,UACNC,KAAM,kBAAC,KAAD,OAEV,CACID,KAAM,OACNC,KAAM,kBAAC,KAAD,OAEV,CACID,KAAM,OACNC,KAAM,kBAAC,KAAD,OAEV,CACID,KAAM,YACNC,KAAM,kBAAC,KAAD,OAEV,CACID,KAAM,YACNC,KAAM,kBAAC,KAAD,OAEV,CACID,KAAM,SACNC,KAAM,kBAAC,KAAD,QCRd,SAASC,GAAS1F,GAAQ,IACf2F,EAAoC3F,EAApC2F,SAAUC,EAA0B5F,EAA1B4F,MAAOC,EAAmB7F,EAAnB6F,MAAUC,EADb,YACsB9F,EADtB,8BAGrB,OACI,kBAAC+F,EAAA,EAAD,eACIC,UAAU,MACVC,KAAK,WACLC,OAAQN,IAAUC,EAClBrF,GAAE,0BAAqBqF,GACvBM,kBAAA,qBAA+BN,IAC3BC,GAEHF,IAAUC,GAAS,kBAACO,EAAA,EAAD,CAAKC,EAAG,GAAIV,I,IAKtCW,G,YACF,WAAYtG,GAAQ,IAAD,uBACf,4CAAMA,KAiDVuG,aAAe,SAAAC,GACX,IAAIC,EAAc,GAQlB,OAPAD,EAAKzD,SAAQ,SAAA2D,GACT,IAAIC,EAAepB,GAAWqB,MAAK,SAAA7F,GAAG,OAAIA,EAAIyE,OAASkB,KACnDC,GACAF,EAAYnG,KAAKqG,MAEE,IAAvBF,EAAYxB,QACZwB,EAAYnG,KAAKiF,GAAW,IACxBkB,GA3DO,EA8DnBI,gBAAkB,SAACC,EAAOC,GACtB,EAAKC,SAAS,CAACxI,WAAYuI,IAC3B,EAAK/G,MAAMiH,gBAAgBF,IAhEZ,EAmEnBG,aAAe,SAAAC,GACX,EAAKH,SAAS,CAACI,kBAAmBD,KApEnB,EAuEnBE,YAAc,aAvEK,EA2EnBC,kBAAoB,SAACC,GACjB,IAAIC,EAAsB,EAAK1I,MAAM2I,aACrCD,EAAoBE,OAAOH,EAAiB,EAAG,IAC/C,EAAKP,SAAS,CAACS,aAAcD,KA9Ed,EAgFnBG,kBAAoB,SAACC,GACjB,IAAIJ,EAAsB,EAAK1I,MAAM2I,aACrCD,EAAoBE,OAAOE,EAAmB,GAC9C,IAAIC,EAA4B,GAChC,IAAK,IAAIzH,KAAO,EAAKtB,MAAML,oBACpB2B,IAAQwH,EAAkBE,aACzBD,EAA0BzH,GAAO,EAAKtB,MAAML,oBAAoB2B,IAGxE,EAAK4G,SAAS,CACVS,aAAcD,EACd/I,oBAAqBoJ,IAEzB,EAAK7H,MAAM+H,yBAAyBF,IA7FrB,EAgGnBG,YAAc,SAAClB,EAAOK,GAElB,IAAKL,EAAM/C,OAAO6B,MAAO,CACrB,IAAIqC,EAAqB,EAAKnJ,MAAM2I,aAOpC,OANAQ,EAAmBd,GAAc,QACjC,EAAKH,SAAS,CACVkB,qBAAsB,GACtBT,aAAcQ,EACdE,gBAAgB,IAIpB,IAAIF,EAAqB,EAAKnJ,MAAM2I,aACpCQ,EAAmBd,GAAcL,EAAM/C,OAAO6B,MAC9C,EAAKoB,SAAS,CACVS,aAAcQ,EACdE,gBAAgB,IAGpB,EAAKC,cACL,EAAKA,eACT3H,IAAMC,IAAI,EAAKV,MAAMqI,iBAAkB,CACnCzH,OAAQ,CACJ0H,EAAGxB,EAAM/C,OAAO6B,MAChBxF,IAAK,EAAKJ,MAAMgB,QAEpBC,YAAa,IAAI,EAAKsH,mBAAkB,SAACpH,GACrC,EAAKiH,aAAejH,OAGvBC,MAAK,SAACC,GACkC,IAAlCA,EAASK,KAAKrB,SAAS4E,QAEtB,EAAKjF,MAAM4C,mBAAmB,yBAA0B,WAE5D,IAAM4F,EAAgB,GACtBnH,EAASK,KAAKrB,SAAS0C,SAAQ,SAAA0F,GACvBA,EAAalI,WAAWQ,IAAI,EAAKjC,MAAMN,aACvCgK,EAAclI,KAAKmI,MAE3B,EAAKzB,SAAS,CACVkB,qBAAsBM,EACtBL,gBAAgB,OAErB,SAAC1F,GACAC,QAAQC,IAAIF,GACZ,EAAKuE,SAAS,CACVmB,gBAAgB,IAEpB,EAAKnI,MAAM4C,mBAAmB,qCAAsC,aAjJ7D,EAqJnB8F,+BAAiC,SAAA5B,GAC7B,GAAkB,UAAdA,EAAM1G,KAAmB,EAAKtB,MAAMoJ,qBAAqB,GAAI,CAC7D,IAAID,EAAqB,EAAKnJ,MAAM2I,aACpCQ,EAAmB,EAAKnJ,MAAMsI,mBAAqB,EAAKtI,MAAMoJ,qBAAqB,GAAG3H,WAAWiF,KACjG,IAAIqC,EAAyB,eAAO,EAAK/I,MAAML,qBAC/CoJ,EAA0B,EAAK/I,MAAMsI,mBAAqB,EAAKtI,MAAMoJ,qBAAqB,GAC1F,EAAKlB,SAAS,CACVS,aAAcQ,EACdC,qBAAsB,GACtBzJ,oBAAqBoJ,IAEzB,EAAK7H,MAAM+H,yBAAyBF,GAExC,GAAiB,cAAdf,EAAM1G,IAAqB,CAC1B,IAAIuI,EAA6B,GAC9B7B,EAAM/C,OAAO6B,QACZ+C,EAA6B,EAAK7J,MAAMoJ,sBAC5C,IAAIL,EAA4B,GAChC,IAAK,IAAIzH,KAAO,EAAKtB,MAAML,oBACpB2B,IAAQ,EAAKtB,MAAMsI,kBAAkBU,aACpCD,EAA0BzH,GAAO,EAAKtB,MAAML,oBAAoB2B,IAGxE,EAAK4G,SAAS,CACVvI,oBAAqBoJ,EACrBK,qBAAsBS,IAE1B,EAAK3I,MAAM+H,yBAAyBF,KAhLzB,EAoLnBe,qBAAuB,SAAAC,GACnB,IAAIZ,EAAqB,EAAKnJ,MAAM2I,aACpCQ,EAAmB,EAAKnJ,MAAMsI,mBAAqByB,EAAatI,WAAWiF,KAC3E,IAAIqC,EAAyB,eAAO,EAAK/I,MAAML,qBAC/CoJ,EAA0B,EAAK/I,MAAMsI,mBAAqByB,EAC1D,EAAK7B,SAAS,CACVS,aAAcQ,EACdC,qBAAsB,GACtBzJ,oBAAqBoJ,IAEzB,EAAK7H,MAAM+H,yBAAyBF,IA9LrB,EAiMnBiB,aAAe,WACX,EAAK9I,MAAM+I,YAAY,EAAKjK,MAAML,oBAAqB,EAAKK,MAAMN,aAhMlE,IAAMiI,EAAc,EAAKF,aAAavG,EAAMwG,MAF7B,OAGf,EAAK1H,MAAQ,CACT2H,YAAaA,EACbjI,WAAYiI,EAAY,GAAGjB,KAC3B0C,qBAAsB,GACtBd,kBAAmB,KACnBK,aAAc,CAAC,GAAI,IACnBhJ,oBAAqB,GACrB0J,gBAAgB,GAGpB,EAAKI,kBAAoB9H,IAAMyC,YAC/B,EAAKkF,aAAe,KACpB,EAAKpI,MAAMiH,gBAAgBR,EAAY,GAAGjB,MAf3B,E,gFAkBAd,GACf,GAAIb,KAAK7D,MAAMtB,eAAiBmF,KAAK7D,MAAMtB,gBAAkBgG,EAAUhG,cAAe,CAClF,IAAIuJ,EAAqBpE,KAAK/E,MAAM2I,aACpCQ,EAAmBpE,KAAK/E,MAAMsI,mBAAqBvD,KAAK7D,MAAMtB,cAC9D,IAAImJ,EAAyB,eAAOhE,KAAK/E,MAAML,qBAE3CuK,EAAc,CACd,KAAQ,oBACR,SAAY,CACR,CACI,KAAQ,UACR,WAAc,CACV,GAAMnF,KAAK7D,MAAMtB,cAAcuK,QAAQC,UACvC,KAAQ,eAEZ,SAAY,CACR,KAAQ,QACR,YAAerF,KAAK7D,MAAMtB,kBAM1CmJ,EAA0BhE,KAAK/E,MAAMsI,mBAAqB4B,EAC1DnF,KAAKmD,SAAS,CACVS,aAAcQ,EACdxJ,oBAAqBoJ,IAEzBhE,KAAK7D,MAAM+H,yBAAyBF,M,+BAuJlC,IAAD,OACehE,KAAK/E,MAAM2I,aAAa0B,QAAO,SAAUC,GACzD,MAAsB,KAAfA,KAE2BnE,OACtC,OACI,yBAAKC,UAAU,eACX,kBAACmE,EAAA,EAAD,CAAOC,QAAM,EAACC,UAAW,GACrB,kBAACC,EAAA,EAAD,CACI5D,MAAO/B,KAAK/E,MAAMN,WAClBiL,SAAU5F,KAAKgD,gBACf6C,QAAQ,aACRC,cAAc,OACdC,eAAe,UACfC,UAAU,UACVC,aAAW,qBAGPjG,KAAK/E,MAAM2H,YAAYxE,KAAI,SAAAzD,GACvB,OACI,kBAACuL,EAAA,EAAD,CAAK3J,IAAK,OAAS5B,EAAWgH,KAAMI,MAAOpH,EAAWgH,KAAMC,KAAMjH,EAAWiH,KACxEqE,aAAYtL,EAAWgH,WAK5C,kBAACE,GAAD,KAEQ7B,KAAK/E,MAAM2I,aAAaxF,KAAI,SAACmH,EAAYvD,GACrC,IAAImE,EAAgB,KAChBC,EAAkB,GAClBC,EAAmB,GACnBC,EAAiB,KA4CrB,OA3Ca,IAAVtE,GACCmE,EAAgB,kBAAC,KAAD,CAAwBI,SAAS,QAAQ9G,MAAM,cAC/D4G,EAAmB,4CACnBC,EACI,kBAACE,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,kBAACC,GAAA,EAAD,CAASC,MAAM,WACX,kBAACC,GAAA,EAAD,CAAYC,QAAS,kBAAM,EAAKrD,kBAAkBzB,EAAQ,IAC9CX,UAAU,SAAS5B,MAAM,UAAUwG,aAAW,UAC9C9D,UAAU,QAClB,kBAAC,IAAD,UAITH,IAAU,EAAK/G,MAAM2I,aAAaxC,OAAS,GAClD+E,EAAgB,kBAAC,IAAD,CAAM1G,MAAM,cAC5B4G,EAAmB,4CAEnBF,EAAgB,kBAAC,IAAD,CAAQI,SAAS,QAAQ9G,MAAM,cAC/C2G,EAAkB,EAClBC,EAAmB,sCACnBC,EACI,kBAAC,IAAMS,SAAP,KAAgB,kBAACP,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAC3B,kBAACC,GAAA,EAAD,CAASC,MAAM,cACX,kBAACC,GAAA,EAAD,CAAYC,QAAS,kBAAM,EAAKhD,kBAAkB9B,IACtCX,UAAU,SAAS5B,MAAM,YACzBwG,aAAW,YACX9D,UAAU,QAClB,kBAAC,KAAD,SAIR,kBAACqE,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,kBAACC,GAAA,EAAD,CAASC,MAAM,WACf,kBAACC,GAAA,EAAD,CAAYC,QAAS,kBAAM,EAAKrD,kBAAkBzB,EAAM,IACpDX,UAAU,SAAS5B,MAAM,UACjBwG,aAAW,SACX9D,UAAU,QAClB,kBAAC,IAAD,WAOhB,kBAACqE,GAAA,EAAD,CAAMjK,IAAK,eAAeyF,EAAOgF,WAAS,EAACC,QAAS,EAAGC,WAAW,WAAWjJ,MAAO,CAACyB,MAAO,SACxF,kBAAC8G,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACVP,GAEL,kBAACK,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAIN,GACX,kBAACe,EAAA,EAAD,CAAWlJ,MAAO,CAACyB,MAAO,QAAS0H,MAAOf,EAC/B5G,MAAM,YAAYmG,SAAU,SAACyB,GAAD,OAAO,EAAKlD,YAAYkD,EAAGrF,IACvDD,MAAOwD,EACP+B,UAAW,EAAKzC,+BAChB0C,QAAS,kBAAM,EAAKlE,aAAarB,IACjCwF,OAAQ,EAAKhE,eAGvB8C,OAMxBtG,KAAK/E,MAAMqJ,eAAiB,kBAACmD,EAAA,EAAD,MAAoB,MAGN,IAA3CzH,KAAK/E,MAAMoJ,qBAAqBjD,OAC5B,6BACI,6BACA,kBAACoE,EAAA,EAAD,CAAOC,QAAM,EAACC,UAAW,GACrB,kBAAC7D,GAAD,KACI,kBAAC6F,GAAA,EAAD,CAAMvF,UAAU,MAAM8D,aAAW,kBAC5BjG,KAAK/E,MAAMoJ,qBAAqBjG,KAAI,SAAC4G,EAAchD,GAChD,OAAc,IAAVA,EAEI,kBAAC2F,GAAA,EAAD,CAAUb,QAAS,kBAAM,EAAK/B,qBAAqBC,IAAe4C,QAAM,EAACrL,IAAK,gBAAkByI,EAAatI,WAAWiF,MACpH,kBAACkG,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAACC,GAAA,EAAD,CAAcC,QAAS/C,EAAatI,WAAWiF,KACjCqG,UAAWhD,EAAatI,WAAWuL,KAAO,MAAQjD,EAAatI,WAAWwL,gBAM5F,kBAACP,GAAA,EAAD,CAAUb,QAAS,kBAAM,EAAK/B,qBAAqBC,IAAe4C,QAAM,EAACO,UAAQ,EAAC5L,IAAK,gBAAkByI,EAAatI,WAAWiF,MAC7H,kBAACkG,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAACC,GAAA,EAAD,CAAcC,QAAS/C,EAAatI,WAAWiF,KACjCqG,UAAWhD,EAAatI,WAAWuL,KAAO,MAAQjD,EAAatI,WAAWwL,uBAQ/G,U,GA1UPE,IAAM9G,WAgWjBC,gBAfS,SAAAtG,GACpB,MAAO,CACHJ,cAAeI,EAAMY,WAAWhB,kBAIb,SAAA2G,GACvB,MAAO,CACH4B,gBAAiB,SAACzI,GAAD,OAAgB6G,EJlYZ,SAAC7G,GAC1B,MAAO,CACHa,KFVuB,kBEWvBb,WAAYA,GI+X8B8G,CAAsB9G,KAChEuJ,yBAA0B,SAACtJ,GAAD,OAAyB4G,EJ1YrB,SAAC5G,GACnC,MAAO,CACHY,KFJiC,4BEKjCZ,oBAAqBA,GIuYuC6G,CAA+B7G,KAC3F+F,mBAAoB,SAAC9F,GAAD,OAAmB2G,EAASC,EAAyB5G,KACzEkE,mBAAoB,SAACjE,EAAqBC,GAAtB,OAA2CyG,EAASC,EAAyB3G,EAAqBC,QAI/GwG,CAA6CkB,I,oBC7Y5D,SAAS4F,GAAMlM,GACX,OAAO,kBAAC,KAAD,eAAUuJ,UAAW,EAAGG,QAAQ,UAAa1J,I,IAGlDmM,G,YACF,WAAYnM,GAAQ,IAAD,8BACf,4CAAMA,KAMVoM,YAAc,WACV,EAAKpF,SAAS,CACVqF,MAAM,KAPV,EAAKvN,MAAQ,CACTuN,MAAM,GAHK,E,gFAaA3H,GACXb,KAAK7D,MAAMrB,qBAAuBkF,KAAK7D,MAAMrB,sBAAwB+F,EAAU/F,qBAC/EkF,KAAKmD,SAAS,CACVqF,MAAM,M,+BAMd,OACI,kBAACC,GAAA,EAAD,CACIC,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBJ,KAAMxI,KAAK/E,MAAMuN,KACjBK,iBAAkB,IAClBC,QAAS9I,KAAKuI,aAEd,kBAAC,GAAD,CAAOO,QAAS9I,KAAKuI,YAAaQ,SAAU/I,KAAK7D,MAAMpB,kBAClDiF,KAAK7D,MAAMrB,0B,GAlCEsN,IAAM9G,WCPzBgH,GDyDA/G,aARS,SAAAtG,GACpB,MAAO,CACHH,oBAAqBG,EAAMY,WAAWf,oBACtCC,iBAAkBE,EAAMY,WAAWd,oBAK5BwG,CAAyB+G,IE1CzBU,ICfAA,GDKf,SAA0B7M,GACtB,OACI,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,GAAgBK,GACjB,kBAAC,EAAiBA,GAClB,kBAAC,GAAD,QEAQ8M,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,GACF,kBAAC,GAAD,CACI3G,KAAM,CAAC,OAAO,MAAM,QACpB7F,WAAW,mCACX0H,iBAAiB,iCACjBrH,OAAO,6DAEfoM,IAASC,OAAOF,GAAkBG,SAASC,eAAe,SDsHpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtM,MAAK,SAAAuM,GACjCA,EAAaC,kB","file":"static/js/main.0cead936.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    currentMot: \"bus\",\r\n    currentStopsGeoJSON: {},\r\n    clickLocation: null,\r\n    notificationMessage: \"\",\r\n    notificationType: \"info\",\r\n};\r\n\r\nconst setCurrentStopsGeoJSON = (state, action) => {\r\n    const updatedState = {\r\n        currentStopsGeoJSON: action.currentStopsGeoJSON,\r\n    };\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n};\r\n\r\nconst setCurrentMot = (state, action) => {\r\n    const updatedState = {\r\n        currentMot: action.currentMot,\r\n    };\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n};\r\n\r\nconst setClickLocation = (state, action) => {\r\n    const updatedState = {\r\n        clickLocation: action.clickLocation,\r\n    };\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n};\r\n\r\nconst showNotification = (state, action) => {\r\n    const updatedState = {\r\n        notificationMessage: action.notificationMessage,\r\n        notificationType: action.notificationType,\r\n    };\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_CURRENT_STOPS_GEOJSON:\r\n            return setCurrentStopsGeoJSON(state, action);\r\n        case actionTypes.SET_CURRENT_MOT:\r\n            return setCurrentMot(state, action);\r\n        case actionTypes.SET_CLICK_LOCATION:\r\n            return setClickLocation(state, action);\r\n        case actionTypes.SHOW_NOTIFICATION:\r\n            return showNotification(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","export const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\r\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\r\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\r\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';","import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport MapReducer from './reducers/Map';\r\n\r\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || null : compose;\r\nconst rootReducer = combineReducers({\r\n    MapReducer: MapReducer,\r\n});\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\nexport default store;\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const setCurrentStopsGeoJSON = (currentStopsGeoJSON) => {\r\n    return {\r\n        type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\r\n        currentStopsGeoJSON: currentStopsGeoJSON,\r\n    };\r\n};\r\n\r\nexport const setCurrentMot = (currentMot) => {\r\n    return {\r\n        type: actionTypes.SET_CURRENT_MOT,\r\n        currentMot: currentMot,\r\n    };\r\n};\r\n\r\nexport const setClickLocation = (clickLocation) => {\r\n    return {\r\n        type: actionTypes.SET_CLICK_LOCATION,\r\n        clickLocation: clickLocation,\r\n    };\r\n};\r\n\r\nexport const showNotification = (notificationMessage, notificationType) => {\r\n    return {\r\n        type: actionTypes.SHOW_NOTIFICATION,\r\n        notificationMessage: notificationMessage,\r\n        notificationType: notificationType,\r\n    };\r\n};","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Map, View} from 'ol';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport {Vector as VectorSource} from 'ol/source';\r\nimport axios from 'axios';\r\nimport \"./MapComponent.css\";\r\nimport {Stroke, Style} from \"ol/style\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nclass MapComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.findRouteCancelToken = axios.CancelToken;\r\n        this.findRouteCancel = null;\r\n        this.routeStyle = new Style({\r\n            stroke: new Stroke({\r\n                color: 'red',\r\n                // lineDash: [4],\r\n                width: 3\r\n            })\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const esriTopoMap = new TileLayer({\r\n            source: new XYZ({\r\n                attributions: '<a href=\"https://geops.ch/\" target=\"_blank\">geOps</a>' +\r\n                    ' | <a href=\"https://ibrahimawadhamid.github.io/geops-routing-demo\" target=\"_blank\">Demo</a>' +\r\n                    ' | <a href=\"https://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer\" target=\"_blank\">ArcGIS</a>',\r\n                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +\r\n                    'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'\r\n            })\r\n        });\r\n        this.map = new Map({\r\n            target: 'map',\r\n            layers: [esriTopoMap],\r\n            view: new View({\r\n                projection: 'EPSG:4326',\r\n                center: [10, 50],\r\n                zoom: 6\r\n            }),\r\n        });\r\n        this.map.on('singleclick', (evt) => {\r\n            this.props.onSetClickLocation(evt.coordinate);\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.currentStopsGeoJSON && this.props.currentStopsGeoJSON !== prevProps.currentStopsGeoJSON) {\r\n            // First remove layers\r\n            this.map.getLayers().forEach(layer => {\r\n                if (layer && layer.get('type') === 'markers') {\r\n                    this.map.removeLayer(layer);\r\n                }\r\n            });\r\n            // Then add new ones\r\n            for (let key in this.props.currentStopsGeoJSON) {\r\n                const vectorSource = new VectorSource({\r\n                    features: (new GeoJSON()).readFeatures(this.props.currentStopsGeoJSON[key])\r\n                });\r\n                const vectorLayer = new VectorLayer({source: vectorSource});\r\n                vectorLayer.set('type', 'markers');\r\n                this.map.addLayer(vectorLayer);\r\n                const coordinate = vectorSource.getFeatures()[0].getGeometry().getCoordinates();\r\n                this.map.getView().animate({\r\n                    center: coordinate,\r\n                    duration: 500\r\n                })\r\n            }\r\n            // Draw route\r\n            if (Object.keys(this.props.currentStopsGeoJSON).length > 1) {\r\n                this.drawNewRoute();\r\n            } else {\r\n                this.removeCurrentRoute();\r\n            }\r\n        }\r\n    }\r\n\r\n    drawNewRoute = () => {\r\n        if (this.findRouteCancel)\r\n            this.findRouteCancel();\r\n        let hops = [];\r\n        for (let key in this.props.currentStopsGeoJSON) {\r\n            if(this.props.currentStopsGeoJSON[key].features)\r\n                hops.push(\"@\" + this.props.currentStopsGeoJSON[key].features[0].properties.id);\r\n            else\r\n                hops.push(\"!\" + this.props.currentStopsGeoJSON[key].properties.id);\r\n        }\r\n        axios.get(this.props.routingUrl, {\r\n            params: {\r\n                via: hops.join(\"|\"),\r\n                mot: this.props.currentMot,\r\n                key: this.props.APIKey\r\n            },\r\n            cancelToken: new this.findRouteCancelToken((cancel) => {\r\n                this.findRouteCancel = cancel;\r\n            })\r\n        })\r\n            .then((response) => {\r\n                const vectorSource = new VectorSource({\r\n                    features: (new GeoJSON()).readFeatures(response.data)\r\n                });\r\n                const vectorLayer = new VectorLayer({\r\n                    source: vectorSource,\r\n                    style: this.routeStyle\r\n                });\r\n                vectorLayer.set('type', 'route');\r\n                this.map.addLayer(vectorLayer);\r\n                this.map.getView().fit(vectorSource.getExtent(), {size: this.map.getSize(), duration: 500});\r\n            }, (error) => {\r\n                console.log(error);\r\n                this.props.onShowNotification(\"Couldn't find route\", \"error\");\r\n            });\r\n    };\r\n\r\n    removeCurrentRoute = () => {\r\n        this.map.getLayers().forEach(layer => {\r\n            if (layer && layer.get('type') === 'route') {\r\n                this.map.removeLayer(layer);\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\" className=\"MapComponent\"/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentMot: state.MapReducer.currentMot,\r\n        currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSetClickLocation: (clickLocation) => dispatch(actions.setClickLocation(clickLocation)),\r\n        onShowNotification: (notificationMessage, notificationType) => dispatch(actions.showNotification(notificationMessage, notificationType)),\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);","import MapComponent from \"./MapComponent\";\r\n\r\nexport default MapComponent;","import React from 'react';\r\nimport DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\r\nimport DirectionsBoatIcon from '@material-ui/icons/DirectionsBoat';\r\nimport RowingIcon from '@material-ui/icons/Rowing';\r\nimport TramIcon from '@material-ui/icons/Tram';\r\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\r\nimport DirectionsSubwayIcon from '@material-ui/icons/DirectionsSubway';\r\nimport CallMergeIcon from '@material-ui/icons/CallMerge';\r\nimport SubwayIcon from '@material-ui/icons/Subway';\r\n\r\nexport const VALID_MOTS = [\r\n    {\r\n        name: \"bus\",\r\n        icon: <DirectionsBusIcon/>\r\n    },\r\n    {\r\n        name: \"ferry\",\r\n        icon: <DirectionsBoatIcon/>\r\n    },\r\n    {\r\n        name: \"gondola\",\r\n        icon: <RowingIcon/>\r\n    },\r\n    {\r\n        name: \"tram\",\r\n        icon: <TramIcon/>\r\n    },\r\n    {\r\n        name: \"rail\",\r\n        icon: <DirectionsRailwayIcon/>\r\n    },\r\n    {\r\n        name: \"funicular\",\r\n        icon: <DirectionsSubwayIcon/>\r\n    },\r\n    {\r\n        name: \"cable_car\",\r\n        icon: <CallMergeIcon/>\r\n    },\r\n    {\r\n        name: \"subway\",\r\n        icon: <SubwayIcon/>\r\n    }];","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Adjust from '@material-ui/icons/Adjust';\r\nimport Room from '@material-ui/icons/Room';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport DirectionsIcon from '@material-ui/icons/Directions';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport * as actions from \"../../store/actions\";\r\nimport \"./RoutingMenu.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {VALID_MOTS} from \"./constants\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nclass RoutingMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const currentMots = this.validateMots(props.mots);\r\n        this.state = {\r\n            currentMots: currentMots,\r\n            currentMot: currentMots[0].name,\r\n            currentSearchResults: [],\r\n            focusedFieldIndex: null,\r\n            currentStops: [\"\", \"\"],\r\n            currentStopsGeoJSON: {},\r\n            showLoadingBar: false,\r\n        };\r\n\r\n        this.searchCancelToken = axios.CancelToken;\r\n        this.searchCancel = null;\r\n        this.props.onSetCurrentMot(currentMots[0].name);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.clickLocation && this.props.clickLocation !== prevProps.clickLocation) {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[this.state.focusedFieldIndex] = this.props.clickLocation;\r\n            let updateCurrentStopsGeoJSON = {...this.state.currentStopsGeoJSON};\r\n            // Create GeoJSON\r\n            let tempGeoJSON = {\r\n                \"type\": \"FeatureCollection\",\r\n                \"features\": [\r\n                    {\r\n                        \"type\": \"Feature\",\r\n                        \"properties\": {\r\n                            \"id\": this.props.clickLocation.slice().reverse(),\r\n                            \"type\": \"coordinates\"\r\n                        },\r\n                        \"geometry\": {\r\n                            \"type\": \"Point\",\r\n                            \"coordinates\": this.props.clickLocation\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n            //\r\n            updateCurrentStopsGeoJSON[this.state.focusedFieldIndex] = tempGeoJSON;\r\n            this.setState({\r\n                currentStops: updateCurrentStops,\r\n                currentStopsGeoJSON: updateCurrentStopsGeoJSON\r\n            });\r\n            this.props.onSetCurrentStopsGeoJSON(updateCurrentStopsGeoJSON);\r\n        }\r\n    }\r\n\r\n    validateMots = mots => {\r\n        let currentMots = [];\r\n        mots.forEach(providedMot => {\r\n            let requestedMot = VALID_MOTS.find(mot => mot.name === providedMot);\r\n            if (requestedMot)\r\n                currentMots.push(requestedMot);\r\n        });\r\n        if (currentMots.length === 0)\r\n            currentMots.push(VALID_MOTS[0]);\r\n        return (currentMots);\r\n    };\r\n\r\n    handleMotChange = (event, newMot) => {\r\n        this.setState({currentMot: newMot});\r\n        this.props.onSetCurrentMot(newMot);\r\n    };\r\n\r\n    onFieldFocus = fieldIndex => {\r\n        this.setState({focusedFieldIndex: fieldIndex});\r\n    };\r\n\r\n    onFieldBlur = () => {\r\n        // this.setState({focusedFieldIndex: null});\r\n    };\r\n\r\n    addNewSearchField = (indexToInsertAt) => {\r\n        let updatedCurrentStops = this.state.currentStops;\r\n        updatedCurrentStops.splice(indexToInsertAt, 0, \"\");\r\n        this.setState({currentStops: updatedCurrentStops});\r\n    }\r\n    removeSearchField = (indexToRemoveFrom) => {\r\n        let updatedCurrentStops = this.state.currentStops;\r\n        updatedCurrentStops.splice(indexToRemoveFrom, 1);\r\n        let updateCurrentStopsGeoJSON = {};\r\n        for (let key in this.state.currentStopsGeoJSON) {\r\n            if(key !== indexToRemoveFrom.toString()) {\r\n                updateCurrentStopsGeoJSON[key] = this.state.currentStopsGeoJSON[key];\r\n            }\r\n        }\r\n        this.setState({\r\n            currentStops: updatedCurrentStops,\r\n            currentStopsGeoJSON: updateCurrentStopsGeoJSON\r\n        });\r\n        this.props.onSetCurrentStopsGeoJSON(updateCurrentStopsGeoJSON);\r\n    }\r\n\r\n    searchStops = (event, fieldIndex) => {\r\n        // only search if text is available\r\n        if (!event.target.value) {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[fieldIndex] = \"\";\r\n            this.setState({\r\n                currentSearchResults: [],\r\n                currentStops: updateCurrentStops,\r\n                showLoadingBar: false\r\n            });\r\n            return;\r\n        } else {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[fieldIndex] = event.target.value;\r\n            this.setState({\r\n                currentStops: updateCurrentStops,\r\n                showLoadingBar: true\r\n            });\r\n        }\r\n        if (this.searchCancel)\r\n            this.searchCancel();\r\n        axios.get(this.props.stationSearchUrl, {\r\n            params: {\r\n                q: event.target.value,\r\n                key: this.props.APIKey\r\n            },\r\n            cancelToken: new this.searchCancelToken((cancel) => {\r\n                this.searchCancel = cancel;\r\n            })\r\n        })\r\n            .then((response) => {\r\n                if(response.data.features.length === 0) {\r\n                    // No results for the given query\r\n                    this.props.onShowNotification(\"Couldn't find stations\", \"warning\");\r\n                }\r\n                const searchResults = [];\r\n                response.data.features.forEach(singleResult => {\r\n                    if (singleResult.properties.mot[this.state.currentMot])\r\n                        searchResults.push(singleResult);\r\n                });\r\n                this.setState({\r\n                    currentSearchResults: searchResults,\r\n                    showLoadingBar: false\r\n                });\r\n            }, (error) => {\r\n                console.log(error);\r\n                this.setState({\r\n                    showLoadingBar: false\r\n                });\r\n                this.props.onShowNotification(\"Error while searching for stations\", \"error\");\r\n            });\r\n    };\r\n\r\n    processHighlightedResultSelect = event => {\r\n        if (event.key === \"Enter\" && this.state.currentSearchResults[0]) {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[this.state.focusedFieldIndex] = this.state.currentSearchResults[0].properties.name;\r\n            let updateCurrentStopsGeoJSON = {...this.state.currentStopsGeoJSON};\r\n            updateCurrentStopsGeoJSON[this.state.focusedFieldIndex] = this.state.currentSearchResults[0];\r\n            this.setState({\r\n                currentStops: updateCurrentStops,\r\n                currentSearchResults: [],\r\n                currentStopsGeoJSON: updateCurrentStopsGeoJSON\r\n            });\r\n            this.props.onSetCurrentStopsGeoJSON(updateCurrentStopsGeoJSON);\r\n        }\r\n        if(event.key === \"Backspace\") {\r\n            let updateCurrentSearchResults = [];\r\n            if(event.target.value)\r\n                updateCurrentSearchResults = this.state.currentSearchResults;\r\n            let updateCurrentStopsGeoJSON = {};\r\n            for (let key in this.state.currentStopsGeoJSON) {\r\n                if(key !== this.state.focusedFieldIndex.toString()) {\r\n                    updateCurrentStopsGeoJSON[key] = this.state.currentStopsGeoJSON[key];\r\n                }\r\n            }\r\n            this.setState({\r\n                currentStopsGeoJSON: updateCurrentStopsGeoJSON,\r\n                currentSearchResults: updateCurrentSearchResults\r\n            });\r\n            this.props.onSetCurrentStopsGeoJSON(updateCurrentStopsGeoJSON);\r\n        }\r\n    };\r\n\r\n    processClickedResult = searchResult => {\r\n        let updateCurrentStops = this.state.currentStops;\r\n        updateCurrentStops[this.state.focusedFieldIndex] = searchResult.properties.name;\r\n        let updateCurrentStopsGeoJSON = {...this.state.currentStopsGeoJSON};\r\n        updateCurrentStopsGeoJSON[this.state.focusedFieldIndex] = searchResult;\r\n        this.setState({\r\n            currentStops: updateCurrentStops,\r\n            currentSearchResults: [],\r\n            currentStopsGeoJSON: updateCurrentStopsGeoJSON\r\n        });\r\n        this.props.onSetCurrentStopsGeoJSON(updateCurrentStopsGeoJSON);\r\n    };\r\n\r\n    processRoute = () => {\r\n        this.props.onFindRoute(this.state.currentStopsGeoJSON, this.state.currentMot);\r\n    };\r\n\r\n    render() {\r\n        const actualStops = this.state.currentStops.filter(function (singleStop) {\r\n            return singleStop !== \"\";\r\n        });\r\n        const canSearchForRoute = actualStops.length > 1 ? true : false;\r\n        return (\r\n            <div className=\"RoutingMenu\">\r\n                <Paper square elevation={3}>\r\n                    <Tabs\r\n                        value={this.state.currentMot}\r\n                        onChange={this.handleMotChange}\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        aria-label=\"icon tabs example\"\r\n                    >\r\n                        {\r\n                            this.state.currentMots.map(currentMot => {\r\n                                return (\r\n                                    <Tab key={\"mot-\" + currentMot.name} value={currentMot.name} icon={currentMot.icon}\r\n                                         aria-label={currentMot.name}/>\r\n                                );\r\n                            })\r\n                        }\r\n                    </Tabs>\r\n                    <TabPanel>\r\n                        {\r\n                            this.state.currentStops.map((singleStop, index) => {\r\n                                let fieldLeftIcon = null;\r\n                                let searchFieldSize = 10;\r\n                                let searchFieldLabel = \"\";\r\n                                let fieldRightIcon = null;\r\n                                if(index === 0) {\r\n                                    fieldLeftIcon = <RadioButtonCheckedIcon fontSize=\"small\" color=\"secondary\"/>;\r\n                                    searchFieldLabel = \"Select start station, or click on the map\";\r\n                                    fieldRightIcon = (\r\n                                        <Grid item xs={1}>\r\n                                            <Tooltip title=\"Add Hop\">\r\n                                                <IconButton onClick={() => this.addNewSearchField(index + 1)}\r\n                                                            className=\"addHop\" color=\"primary\" aria-label=\"Add Hop\"\r\n                                                            component=\"span\">\r\n                                                    <AddCircleOutlineIcon/>\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Grid>);\r\n                                } else if (index === this.state.currentStops.length - 1) {\r\n                                    fieldLeftIcon = <Room color=\"secondary\"/>;\r\n                                    searchFieldLabel = \"Select end station, or click on the map\";\r\n                                } else {\r\n                                    fieldLeftIcon = <Adjust fontSize=\"small\" color=\"secondary\"/>;\r\n                                    searchFieldSize = 9;\r\n                                    searchFieldLabel = \"Select station, or click on the map\";\r\n                                    fieldRightIcon = (\r\n                                        <React.Fragment><Grid item xs={1}>\r\n                                            <Tooltip title=\"Remove Hop\">\r\n                                                <IconButton onClick={() => this.removeSearchField(index)}\r\n                                                            className=\"addHop\" color=\"secondary\"\r\n                                                            aria-label=\"removeHop\"\r\n                                                            component=\"span\">\r\n                                                    <RemoveCircleOutlineIcon/>\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Grid>\r\n                                            <Grid item xs={1}>\r\n                                                <Tooltip title=\"Add Hop\">\r\n                                                <IconButton onClick={() => this.addNewSearchField(index+1)}\r\n                                                    className=\"addHop\" color=\"primary\"\r\n                                                            aria-label=\"addHop\"\r\n                                                            component=\"span\">\r\n                                                    <AddCircleOutlineIcon/>\r\n                                                </IconButton>\r\n                                                </Tooltip>\r\n                                            </Grid>\r\n                                        </React.Fragment>);\r\n                                }\r\n                                return(\r\n                                    <Grid key={\"searchField-\"+index} container spacing={1} alignItems=\"flex-end\" style={{width: '100%'}}>\r\n                                        <Grid item xs={1}>\r\n                                            {fieldLeftIcon}\r\n                                        </Grid>\r\n                                        <Grid item xs={searchFieldSize}>\r\n                                            <TextField style={{width: '100%'}} label={searchFieldLabel}\r\n                                                       color=\"secondary\" onChange={(e) => this.searchStops(e, index)}\r\n                                                       value={singleStop}\r\n                                                       onKeyDown={this.processHighlightedResultSelect}\r\n                                                       onFocus={() => this.onFieldFocus(index)}\r\n                                                       onBlur={this.onFieldBlur}\r\n                                            />\r\n                                        </Grid>\r\n                                            {fieldRightIcon}\r\n                                    </Grid>\r\n                                )\r\n                            })\r\n                        }\r\n                    </TabPanel>\r\n                    {this.state.showLoadingBar ? <LinearProgress/> : null}\r\n                </Paper>\r\n                {\r\n                    this.state.currentSearchResults.length !== 0 ?\r\n                        <div>\r\n                            <hr/>\r\n                            <Paper square elevation={1}>\r\n                                <TabPanel>\r\n                                    <List component=\"nav\" aria-label=\"search results\">\r\n                                        {this.state.currentSearchResults.map((searchResult, index) => {\r\n                                            if (index !== 0) {\r\n                                                return (\r\n                                                    <ListItem onClick={() => this.processClickedResult(searchResult)} button key={\"searchResult-\" + searchResult.properties.name}>\r\n                                                        <ListItemIcon>\r\n                                                            <MapMarkerIcon />\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary={searchResult.properties.name}\r\n                                                                      secondary={searchResult.properties.code + \" - \" + searchResult.properties.country_code}/>\r\n                                                    </ListItem>\r\n                                                );\r\n                                            } else {\r\n                                                // First item\r\n                                                return (\r\n                                                    <ListItem onClick={() => this.processClickedResult(searchResult)} button selected key={\"searchResult-\" + searchResult.properties.name}>\r\n                                                        <ListItemIcon>\r\n                                                            <MapMarkerIcon />\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary={searchResult.properties.name}\r\n                                                                      secondary={searchResult.properties.code + \" - \" + searchResult.properties.country_code}/>\r\n                                                    </ListItem>\r\n                                                );\r\n                                            }\r\n                                        })}\r\n                                    </List>\r\n                                </TabPanel>\r\n                            </Paper>\r\n                        </div> : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        clickLocation: state.MapReducer.clickLocation,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSetCurrentMot: (currentMot) => dispatch(actions.setCurrentMot(currentMot)),\r\n        onSetCurrentStopsGeoJSON: (currentStopsGeoJSON) => dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\r\n        onSetClickLocation: (clickLocation) => dispatch(actions.setClickLocation(clickLocation)),\r\n        onShowNotification: (notificationMessage, notificationType) => dispatch(actions.showNotification(notificationMessage, notificationType)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RoutingMenu);","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {connect} from 'react-redux';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nclass NotificationHandler extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            open: false\r\n        })\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.notificationMessage && this.props.notificationMessage !== prevProps.notificationMessage) {\r\n            this.setState({\r\n                open: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={this.state.open}\r\n                autoHideDuration={6000}\r\n                onClose={this.handleClose}\r\n            >\r\n                <Alert onClose={this.handleClose} severity={this.props.notificationType}>\r\n                    {this.props.notificationMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        notificationMessage: state.MapReducer.notificationMessage,\r\n        notificationType: state.MapReducer.notificationType,\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(NotificationHandler);","import NotificationHandler from \"./NotificationHandler.jsx\";\r\n\r\nexport default NotificationHandler;","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport store from '../../store/store';\r\nimport MapComponent from \"../MapComponent\";\r\nimport RoutingMenu from \"../RoutingMenu/RoutingMenu\";\r\nimport NotificationHandler from \"../NotificationHandler\";\r\n\r\nfunction GeopsRoutingDemo(props) {\r\n    return (\r\n        <Provider store={store}>\r\n            <RoutingMenu {...props}/>\r\n            <MapComponent {...props}/>\r\n            <NotificationHandler/>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default GeopsRoutingDemo;\r\n","import GeopsRoutingDemo from \"./GeopsRoutingDemo\";\r\n\r\nexport default GeopsRoutingDemo;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GeopsRoutingDemo from './Components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst geopsRoutingDemo =\r\n    <GeopsRoutingDemo\r\n        mots={['rail','bus','tram']}\r\n        routingUrl=\"https://api.geops.io/routing/v1/\"\r\n        stationSearchUrl=\"https://api.geops.io/stops/v1/\"\r\n        APIKey=\"5cc87b12d7c5370001c1d655d0a18192eba64838a5fa1ad7d482ab82\"\r\n    />;\r\nReactDOM.render(geopsRoutingDemo, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}