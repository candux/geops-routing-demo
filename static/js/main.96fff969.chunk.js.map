{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","store/actions/Map.jsx","constants.js","utils.jsx","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","store/prop-types.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","config/styleConfig.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","showLoadingBar","setCurrentStops","state","action","updatedState","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","setShowLoadingBar","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","GRAPHHOPPER_MOTS","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","decimal","transform","map","c","toFixed","renderSecondary","code","countryCode","SearchResults","props","currentSearchResults","processClickedResultHandler","length","Paper","square","elevation","List","component","aria-label","searchResult","index","ListItem","onClick","button","key","nextId","ListItemIcon","ListItemText","primary","properties","secondary","country_code","selected","defaultProps","coordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","id","oneOfType","currentStop","features","useStyles","makeStyles","gridContainer","width","padding","boxSizing","color","height","fieldWrapper","maxWidth","buttonWrapper","SearchField","val","classes","dispatch","useDispatch","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","onZoomRouteClick","isActiveRoute","onPanViaClick","inputReference","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","addNextHopDisabled","Tooltip","IconButton","className","size","fontSize","Grid","item","xs","disabled","container","spacing","alignItems","TextField","style","inputRef","label","onChange","e","value","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","target","select","TabPanel","children","Typography","role","hidden","aria-labelledby","tabs","tab","minWidth","dropDown","backgroundColor","selectInput","checkbox","abortController","AbortController","RoutingMenu","mots","stationSearchUrl","APIKey","validateMots","motsArray","validationMots","currentMotsArray","filter","mot","includes","forEach","providedMot","requestedMot","find","push","icon","currentMotsVal","otherMotsVal","useSelector","elRefs","React","useRef","current","fill","el","i","createRef","useState","currentMots","setCurrentMotState","otherMots","lastChangedFieldIdx","setLastChangedFieldIdx","setCurrentSearchResults","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","undefined","currentOtherMot","setCurrentOtherMot","useEffect","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","_","clone","tempGeoJSON","reverse","handleMotChange","newMot","fieldIndex","currStops","indexToInsertAt","splice","Object","keys","k","parseInt","indexToRemoveFrom","abort","signal","reqUrl","fetch","then","response","json","error","catch","err","console","warn","firstSearchResult","updateCurrentSearchResults","toString","Tabs","indicatorColor","textColor","singleMot","Tab","FormControl","Select","renderValue","root","labelId","disableUnderline","displayEmpty","evt","MenuItem","onDragEnd","destination","source","removed","newSource","droppableId","provided","droppableProps","ref","innerRef","background","draggableId","prov","snpsht","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","placeholder","Checkbox","checked","inputProps","LinearProgress","lineStyler","lineStyle","Style","stroke","Stroke","lineDash","railLineStyle","railLineHoveredStyle","busLineStyle","busLineHoveredStyle","pedestrianLineStyle","pedestrianLineHoveredStyle","carLineStyle","carLineHoveredStyle","othersLineStyle","othersLineHoveredStyle","railPointStyle","image","Circle","radius","Fill","pedestrianPointStyle","carPointStyle","busPointStyle","othersPointStyle","pointStyleFunction","lineStyleFunction","isHovered","MapComponent","drawNewRoute","hops","routingUrl","onShowNotification","onSetShowLoadingBar","uid","join","routeVectorSource","clear","format","GeoJSON","dataProjection","featureProjection","addFeatures","readFeatures","setIsActiveRoute","getFeatures","routeVectorLayer","olLayer","setStyle","onSetClickLocation","hoveredFeature","hoveredRoute","initialRouteDrag","hoveredStationOpen","hoveredStationName","zoom","center","projection","layerService","LayerService","ConfigReader","readConfig","visible","isBaseLayer","data","url","markerVectorSource","VectorSource","addLayer","Layer","VectorLayer","zIndex","markerVectorLayer","getLayer","layers","getLayers","translate","Translate","hitTolerance","on","featureIndex","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","newCurentStopsGeoJSON","getArray","getProperties","indexOf","findIndex","coords","coordinate","modify","Modify","pixelTolerance","condition","mapBrowserEvent","newHopIdx","flatCoords","f","getGeometry","lineString","getFirstCoordinate","getLastCoordinate","closestSegment","getClosestFeatureToCoordinate","closestEdges","segment","idx","every","interactions","defaultInteractions","extend","Map","controls","featExtent","getExtent","Number","isFinite","getView","fit","getSize","duration","featureCoord","animate","setState","getFeaturesAtPixel","pixel","getType","featCountryCode","get","flatCoordinates","prevProps","this","currentMotChanged","currentStopsGeoJSONChanged","Snackbar","anchorOrigin","vertical","horizontal","open","message","BasicMap","tabIndex","viewOptions","Component","getExtentCenter","extent","indexInGeom","lineGeom","point","connect","actions","NotificationHandler","handleOpen","handleClose","autoHideDuration","onClose","Alert","severity","variant","App","process","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96fff969.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  currentMot: 'bus',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n  showLoadingBar: false,\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setShowLoadingBar = (state, action) => {\n  const updatedState = {\n    showLoadingBar: action.showLoadingBar,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    case actionTypes.SET_SHOW_LOADING_BAR:\n      return setShowLoadingBar(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\nexport const SET_SHOW_LOADING_BAR = 'SET_SHOW_LOADING_BAR';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import * as actionTypes from './actionTypes';\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n\nexport const setShowLoadingBar = showLoadingBar => {\n  return {\n    type: actionTypes.SET_SHOW_LOADING_BAR,\n    showLoadingBar,\n  };\n};\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nexport const DEFAULT_MOTS = ['rail', 'bus', 'foot'];\n\nexport const OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n];\n\nexport const VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport const GRAPHHOPPER_MOTS = ['foot', 'car'];\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = (coord, decimal = 4) => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326').map(c =>\n    c.toFixed(decimal),\n  );\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\n\nconst renderSecondary = (code, countryCode) => {\n  if (code && countryCode) {\n    return `${code} - ${countryCode}`;\n  }\n  if (code || countryCode) {\n    return code || countryCode;\n  }\n  return null;\n};\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3}>\n      <List component=\"nav\" aria-label=\"search results\">\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={renderSecondary(\n                    searchResult.properties.code,\n                    searchResult.properties.country_code,\n                  )}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={renderSecondary(\n                  searchResult.properties.code,\n                  searchResult.properties.country_code,\n                )}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import PropTypes from 'prop-types';\n\nconst coordinates = PropTypes.arrayOf(PropTypes.number.isRequired).isRequired;\n\nconst geometry = PropTypes.shape({\n  coordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, coordinates]),\n    '1': PropTypes.oneOfType([feature, coordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, coordinates]),\n);\n\nexport { propTypeCurrentStops, propTypeCurrentStopsGeoJSON };\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\nconst useStyles = makeStyles(() => ({\n  gridContainer: {\n    width: '100%',\n    padding: '0px 0px 0px 20px',\n    boxSizing: 'unset',\n  },\n  button: {\n    color: 'black',\n    '& svg': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n  fieldWrapper: {\n    maxWidth: '75%',\n  },\n  buttonWrapper: {\n    maxWidth: '26px',\n  },\n}));\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n    onZoomRouteClick,\n    isActiveRoute,\n    onPanViaClick,\n    inputReference,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n\n  const addNextHopDisabled =\n    currentStops[index] === '' ||\n    (currentStops.length > 2 && currentStops[index + 1] === '');\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n            disabled={addNextHopDisabled}\n            className={classes.button}\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Room color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'End';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Zoom to the route\">\n          <IconButton\n            onClick={() => onZoomRouteClick()}\n            disabled={!isActiveRoute}\n            className={classes.button}\n            aria-label=\"Zoom to the route\"\n            size=\"small\"\n          >\n            <ZoomInIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Adjust fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              disabled={addNextHopDisabled}\n              onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n              className={classes.button}\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              className={classes.button}\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      className={classes.gridContainer}\n      alignItems=\"flex-end\"\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize} className={classes.fieldWrapper}>\n        <TextField\n          style={{\n            width: '100%',\n          }}\n          inputRef={inputReference}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n  onZoomRouteClick: PropTypes.func.isRequired,\n  onPanViaClick: PropTypes.func.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  inputReference: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n  ]).isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n  setShowLoadingBar,\n} from '../../store/actions/Map';\nimport './RoutingMenu.css';\nimport {\n  VALID_MOTS,\n  DEFAULT_MOTS,\n  OTHER_MOTS,\n  GRAPHHOPPER_MOTS,\n} from '../../constants';\nimport { to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '33%',\n    width: '33%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  select: {\n    height: '100%',\n  },\n  selectInput: {\n    backgroundColor: 'white',\n    '&:focus': {\n      backgroundColor: 'white',\n    },\n  },\n  checkbox: {\n    padding: '20px 23px',\n  },\n}));\n\nlet abortController = new AbortController();\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({\n  mots,\n  stationSearchUrl,\n  APIKey,\n  isActiveRoute,\n  onZoomRouteClick,\n  onPanViaClick,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const showLoadingBar = useSelector(state => state.MapReducer.showLoadingBar);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n\n  const elRefs = React.useRef([]);\n  if (elRefs.current.length !== currentStops.length) {\n    elRefs.current = Array(currentStops.length)\n      .fill()\n      .map((el, i) => elRefs.current[i] || React.createRef());\n  }\n\n  const [currentMots] = useState(currentMotsVal);\n  const [currentMot, setCurrentMotState] = useState(currentMotsVal[0].name);\n  const [otherMots] = useState(otherMotsVal);\n  const [lastChangedFieldIdx, setLastChangedFieldIdx] = useState(null);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  useEffect(() => {\n    dispatch(setCurrentMot(currentMots[0].name));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot) => {\n    setCurrentOtherMot(null);\n    setCurrentMotState(newMot);\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = (currStops, indexToInsertAt) => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n\n    if (updatedCurrentStopsGeoJSON[indexToInsertAt]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => k >= indexToInsertAt)\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = _.clone(currentStops);\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n\n    if (updatedCurrentStopsGeoJSON[indexToRemoveFrom]) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON);\n      keys.forEach(key => {\n        const k = parseInt(key, 10);\n        if (k === indexToRemoveFrom) {\n          delete updatedCurrentStopsGeoJSON[indexToRemoveFrom];\n        } else if (k > indexToRemoveFrom) {\n          updatedCurrentStopsGeoJSON[k - 1] = updatedCurrentStopsGeoJSON[k];\n        }\n      });\n      delete updatedCurrentStopsGeoJSON[keys.length - 1];\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    setLastChangedFieldIdx(fieldIndex);\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n      dispatch(setShowLoadingBar(false));\n      return;\n    }\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setShowLoadingBar(true));\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${stationSearchUrl}?q=${event.target.value}&key=${APIKey}${\n      !GRAPHHOPPER_MOTS.includes(currentMot)\n        ? `&mots=${searchMotOnly ? currentMot : ''}`\n        : ''\n    }`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        if (response.error) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n          return;\n        }\n        if (response.features.length === 0) {\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n        }\n        setCurrentSearchResults(response.features);\n        dispatch(setShowLoadingBar(false));\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  const retriggerSearch = () => {\n    if (lastChangedFieldIdx === null) {\n      return;\n    }\n    searchStopsHandler(\n      {\n        target: {\n          value: elRefs.current[lastChangedFieldIdx].current.value,\n        },\n      },\n      lastChangedFieldIdx,\n    );\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(null);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: 'none',\n    background: isDragging ? '#ededed' : 'white',\n    ...draggableStyle,\n  });\n\n  const onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedCurrentStops = _.clone(currentStops);\n    const [removed] = updatedCurrentStops.splice(result.source.index, 1);\n    updatedCurrentStops.splice(result.destination.index, 0, removed);\n\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n    const newSource = { ...updatedCurrentStopsGeoJSON[result.source.index] };\n    if (result.destination.index < result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON)\n        .filter(k => {\n          return (\n            parseInt(k, 10) >= result.destination.index &&\n            parseInt(k, 10) < result.source.index\n          );\n        })\n        .reverse();\n      keys.forEach(k => {\n        updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n          updatedCurrentStopsGeoJSON[k];\n      });\n      updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n    } else if (result.destination.index > result.source.index) {\n      const keys = Object.keys(updatedCurrentStopsGeoJSON).filter(\n        k =>\n          parseInt(k, 10) >= result.source.index &&\n          parseInt(k, 10) <= result.destination.index,\n      );\n      keys.forEach(k => {\n        if (parseInt(k, 10) === result.destination.index) {\n          updatedCurrentStopsGeoJSON[result.destination.index] = newSource;\n        } else {\n          updatedCurrentStopsGeoJSON[k] =\n            updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`];\n        }\n      });\n    }\n\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  if (!onZoomRouteClick || !onPanViaClick) {\n    return null;\n  }\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl className={classes.dropDown}>\n            <Select\n              renderValue={val => (val !== '' ? val : 'Other MOTs')}\n              className={classes.select}\n              classes={{ root: classes.selectInput }}\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot || ''}\n              disableUnderline={!currentOtherMot}\n              displayEmpty\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n              {provided => (\n                <div\n                  // eslint-disable-next-line react/jsx-props-no-spreading\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={{\n                    background: 'white',\n                  }}\n                >\n                  {currentStops.map((item, index) => (\n                    <Draggable\n                      // eslint-disable-next-line react/no-array-index-key\n                      key={`searchField-${index}`}\n                      draggableId={`searchField-${index}`}\n                      index={index}\n                    >\n                      {(prov, snpsht) => (\n                        <div\n                          ref={prov.innerRef}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.draggableProps}\n                          // eslint-disable-next-line react/jsx-props-no-spreading\n                          {...prov.dragHandleProps}\n                          style={getItemStyle(\n                            snpsht.isDragging,\n                            prov.draggableProps.style,\n                          )}\n                        >\n                          <SearchField\n                            // eslint-disable-next-line react/no-array-index-key\n                            key={`searchField-${index}`}\n                            index={index}\n                            inputReference={elRefs.current[index]}\n                            addNewSearchFieldHandler={addNewSearchFieldHandler}\n                            currentStops={currentStops}\n                            removeSearchFieldHandler={removeSearchFieldHandler}\n                            searchStopsHandler={searchStopsHandler}\n                            singleStop={item}\n                            processHighlightedResultSelectHandler={\n                              processHighlightedResultSelectHandler\n                            }\n                            onFieldFocusHandler={onFieldFocusHandler}\n                            onZoomRouteClick={onZoomRouteClick}\n                            onPanViaClick={onPanViaClick}\n                            isActiveRoute={isActiveRoute}\n                          />\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => {\n                setSearchMotOnly(!searchMotOnly);\n                retriggerSearch(lastChangedFieldIdx);\n              }}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  onZoomRouteClick: PropTypes.func,\n  onPanViaClick: PropTypes.func,\n};\n\nRoutingMenu.defaultProps = {\n  onZoomRouteClick: undefined,\n  onPanViaClick: undefined,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst lineStyler = lineStyle => {\n  return lineStyle.map(\n    style =>\n      new Style({\n        stroke: new Stroke({\n          color: style[0],\n          width: style[1],\n          lineDash: style[2],\n        }),\n      }),\n  );\n};\n\nconst railLineStyle = lineStyler([\n  ['darkred', 6],\n  ['red', 3],\n]);\n\nconst railLineHoveredStyle = lineStyler([\n  ['darkred', 7],\n  ['red', 4],\n]);\n\nconst busLineStyle = lineStyler([\n  ['rgb(153,153,0)', 6],\n  ['yellow', 3],\n]);\n\nconst busLineHoveredStyle = lineStyler([\n  ['rgb(153,153,0)', 7],\n  ['yellow', 4],\n]);\n\nconst pedestrianLineStyle = lineStyler([\n  ['rgb(96, 186, 219)', 6],\n  ['rgb(173, 216, 230)', 3],\n]);\n\nconst pedestrianLineHoveredStyle = lineStyler([\n  ['rgb(96, 186, 219)', 7],\n  ['rgb(173, 216, 230)', 4],\n]);\n\nconst carLineStyle = lineStyler([\n  ['grey', 6],\n  ['darkgrey', 3],\n]);\n\nconst carLineHoveredStyle = lineStyler([\n  ['grey', 7],\n  ['darkgrey', 4],\n]);\n\nconst othersLineStyle = lineStyler([\n  ['darkblue', 6],\n  ['blue', 3],\n]);\n\nconst othersLineHoveredStyle = lineStyler([\n  ['darkblue', 7],\n  ['blue', 4],\n]);\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'darkred', width: 2 }),\n  }),\n});\n\nconst pedestrianPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'rgb(173, 216, 230)' }),\n    stroke: new Stroke({ color: 'rgb(96, 186, 219)', width: 2 }),\n  }),\n});\n\nconst carPointStyle = new Style({\n  image: new Circle({\n    radius: 3,\n    fill: new Fill({ color: 'darkgrey' }),\n    stroke: new Stroke({ color: 'grey', width: 2 }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'rgb(153,153,0)', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'darkblue', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianPointStyle;\n  }\n  if (mot === 'car') {\n    return carPointStyle;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = (mot, isHovered) => {\n  if (mot === 'rail') {\n    return isHovered ? railLineHoveredStyle : railLineStyle;\n  }\n  if (mot === 'bus') {\n    return isHovered ? busLineHoveredStyle : busLineStyle;\n  }\n  if (mot === 'foot') {\n    return isHovered ? pedestrianLineHoveredStyle : pedestrianLineStyle;\n  }\n  if (mot === 'car') {\n    return isHovered ? carLineHoveredStyle : carLineStyle;\n  }\n  return isHovered ? othersLineHoveredStyle : othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ConfigReader from 'react-spatial/ConfigReader';\nimport LayerService from 'react-spatial/LayerService';\nimport Layer from 'react-spatial/layers/Layer';\nimport BasicMap from 'react-spatial/components/BasicMap';\nimport { Map } from 'ol';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport _ from 'lodash/core';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport {\n  defaults as defaultInteractions,\n  Translate,\n  Modify,\n} from 'ol/interaction';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport RoutingMenu from '../RoutingMenu';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { GRAPHHOPPER_MOTS } from '../../constants';\nimport { to4326 } from '../../utils';\nimport './MapComponent.css';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\nlet abortController = new AbortController();\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  static getExtentCenter = extent => {\n    const X = extent[0] + (extent[2] - extent[0]) / 2;\n    const Y = extent[1] + (extent[3] - extent[1]) / 2;\n    return [X, Y];\n  };\n\n  static indexInGeom = (lineGeom, point) => {\n    const firstBreakIdx = lineGeom.indexOf(point[0]);\n    const secondBreakIdx = lineGeom.indexOf(point[1]);\n\n    return firstBreakIdx === secondBreakIdx - 1;\n  };\n\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    const { APIKey, onSetClickLocation } = this.props;\n    this.hoveredFeature = null;\n    this.hoveredRoute = null;\n    this.initialRouteDrag = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n      isActiveRoute: false,\n      zoom: 6,\n      center: [949042.143189, 5899715.591163],\n    };\n\n    this.projection = 'EPSG:3857';\n\n    const layerService = new LayerService(\n      ConfigReader.readConfig([\n        {\n          name: 'Basemap',\n          visible: true,\n          isBaseLayer: true,\n          data: {\n            type: 'mapbox',\n            url: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n          },\n        },\n      ]),\n    );\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    layerService.addLayer(\n      new Layer({\n        key: 'markerLayer',\n        name: 'markerLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.markerVectorSource,\n        }),\n      }),\n    );\n\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({\n      features: [],\n    });\n    layerService.addLayer(\n      new Layer({\n        key: 'routeLayer',\n        name: 'routeLayer',\n        olLayer: new VectorLayer({\n          zIndex: 1,\n          source: this.routeVectorSource,\n        }),\n      }),\n    );\n\n    this.markerVectorLayer = layerService.getLayer('markerLayer');\n    this.routeVectorLayer = layerService.getLayer('routeLayer');\n    this.layers = [...layerService.getLayers()];\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer.olLayer],\n      hitTolerance: 3,\n    });\n\n    translate.on('translateend', evt => {\n      const {\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        const isCoordPresent = el => {\n          if (!Array.isArray(el)) {\n            return false;\n          }\n          const coords = id.slice().reverse();\n          return el[0] === coords[0] && el[1] === coords[1];\n        };\n        featureIndex = currentStops.findIndex(isCoordPresent);\n      }\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    const modify = new Modify({\n      source: this.routeVectorSource,\n      pixelTolerance: 2,\n      condition: () => {\n        const { currentMot } = this.props;\n        return !GRAPHHOPPER_MOTS.includes(currentMot);\n      },\n      style: () => {\n        const { currentMot } = this.props;\n        return pointStyleFunction(currentMot);\n      },\n    });\n\n    modify.on('modifystart', evt => {\n      // save start point to find where to add the new HOP!\n      this.initialRouteDrag = {\n        features: evt.features.getArray(),\n        coordinate: evt.mapBrowserEvent.coordinate,\n      };\n    });\n\n    modify.on('modifyend', evt => {\n      const { features } = this.initialRouteDrag;\n      const {\n        currentMot,\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const updatedCurrentStops = _.clone(currentStops);\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      let newHopIdx = -1;\n\n      // No drag for foot/car for now on.\n      if (!GRAPHHOPPER_MOTS.includes(currentMot)) {\n        const flatCoords = features\n          .map(f => f.getGeometry())\n          .map(lineString => {\n            return [\n              ...lineString.getFirstCoordinate(),\n              ...lineString.getLastCoordinate(),\n            ];\n          });\n\n        const closestSegment = this.routeVectorSource\n          .getClosestFeatureToCoordinate(this.initialRouteDrag.coordinate)\n          .getGeometry();\n\n        const closestEdges = [\n          ...closestSegment.getFirstCoordinate(),\n          ...closestSegment.getLastCoordinate(),\n        ];\n\n        flatCoords.forEach((segment, idx) => {\n          if (\n            segment.length === closestEdges.length &&\n            segment.every((value, index) => {\n              return value === closestEdges[index];\n            })\n          ) {\n            newHopIdx = idx + 1;\n          }\n        });\n      }\n\n      if (newHopIdx >= 0) {\n        updatedCurrentStops.splice(\n          newHopIdx,\n          0,\n          evt.mapBrowserEvent.coordinate,\n        );\n\n        if (updatedCurrentStopsGeoJSON[newHopIdx]) {\n          const keys = Object.keys(updatedCurrentStopsGeoJSON).reverse();\n          keys.forEach(k => {\n            if (parseInt(k, 10) >= newHopIdx) {\n              updatedCurrentStopsGeoJSON[`${parseInt(k, 10) + 1}`] =\n                updatedCurrentStopsGeoJSON[k];\n            }\n            if (parseInt(k, 10) === newHopIdx) {\n              updatedCurrentStopsGeoJSON[newHopIdx] = {\n                type: 'FeatureCollection',\n                features: [\n                  {\n                    type: 'Feature',\n                    properties: {\n                      id: evt.mapBrowserEvent.coordinate.slice().reverse(),\n                      type: 'coordinates',\n                    },\n                    geometry: {\n                      type: 'Point',\n                      coordinates: evt.mapBrowserEvent.coordinate,\n                    },\n                  },\n                ],\n              };\n            }\n          });\n        }\n\n        onSetCurrentStops(updatedCurrentStops);\n        onSetCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON);\n      }\n      this.initialRouteDrag = null;\n    });\n\n    const interactions = defaultInteractions().extend([translate, modify]);\n\n    this.map = new Map({\n      controls: [],\n      interactions,\n    });\n\n    this.onZoomRouteClick = () => {\n      let featExtent;\n      if (this.routeVectorSource.getFeatures().length) {\n        featExtent = this.routeVectorSource.getExtent();\n      }\n\n      if (featExtent.filter(f => Number.isFinite(f)).length === 4) {\n        this.map.getView().fit(this.routeVectorSource.getExtent(), {\n          size: this.map.getSize(),\n          duration: 500,\n          padding: [200, 200, 200, 200],\n        });\n      }\n    };\n\n    this.onPanViaClick = (item, idx) => {\n      const { currentStopsGeoJSON } = this.props;\n      if (currentStopsGeoJSON && currentStopsGeoJSON[idx]) {\n        const featureCoord = currentStopsGeoJSON[idx].features\n          ? currentStopsGeoJSON[idx].features[0].geometry.coordinates\n          : currentStopsGeoJSON[idx].geometry.coordinates;\n\n        this.map.getView().animate({\n          center: featureCoord,\n          duration: 500,\n          padding: [100, 100, 100, 100],\n        });\n      }\n    };\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStops } = this.props;\n      // if one field empty or if a field is focused\n      if (currentStops.includes('') || isFieldFocused) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      const { currentMot } = this.props;\n\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n\n      if (this.hoveredRoute) {\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n        this.hoveredRoute = null;\n      }\n      const hovFeats = this.map.getFeaturesAtPixel(evt.pixel);\n\n      hovFeats.forEach(feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          const featCountryCode = feature.get('country_code');\n          if (feature.get('name')) {\n            name = `${feature.get('name')}${\n              featCountryCode ? ` - ${featCountryCode}` : ''\n            }`;\n          } else {\n            name = `${to4326(feature.getGeometry().flatCoordinates)}`;\n          }\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        if (feature.getGeometry().getType() === 'LineString') {\n          this.hoveredRoute = feature;\n          this.routeVectorLayer.olLayer.setStyle(\n            lineStyleFunction(currentMot, true),\n          );\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n\n    if (currentMotChanged || currentStopsGeoJSONChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      this.setIsActiveRoute(false);\n\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  setIsActiveRoute(isActiveRoute) {\n    this.setState({ isActiveRoute });\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = () => {\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      onShowNotification,\n      onSetShowLoadingBar,\n    } = this.props;\n\n    onSetShowLoadingBar(true);\n\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `${to4326(currentStopsGeoJSON[key].features[0].geometry.coordinates)\n            .slice()\n            .reverse()}`,\n        );\n      } else if (currentMot === 'rail' || currentMot === 'bus') {\n        hops.push(`!${currentStopsGeoJSON[key].properties.uid}`);\n      } else {\n        hops.push(`${currentStopsGeoJSON[key].properties.name}`);\n      }\n    });\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${routingUrl}?via=${hops.join(\n      '|',\n    )}&mot=${currentMot}&resolve-hops=false&srs=3857&key=${APIKey}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        onSetShowLoadingBar(false);\n        if (response.error) {\n          onShowNotification(\"Couldn't find route\", 'error');\n          return;\n        }\n        // A route was found, prepare to draw it.\n        this.routeVectorSource.clear();\n        const format = GRAPHHOPPER_MOTS.includes(currentMot)\n          ? new GeoJSON({\n              dataProjection: 'EPSG:4326',\n              featureProjection: 'EPSG:3857',\n            })\n          : new GeoJSON();\n        this.routeVectorSource.addFeatures(format.readFeatures(response));\n        this.setIsActiveRoute(!!this.routeVectorSource.getFeatures().length);\n\n        this.routeVectorLayer.olLayer.setStyle(\n          lineStyleFunction(currentMot, false),\n        );\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const { mots, APIKey, stationSearchUrl } = this.props;\n    const {\n      zoom,\n      center,\n      isActiveRoute,\n      hoveredStationOpen,\n      hoveredStationName,\n    } = this.state;\n    return (\n      <>\n        <RoutingMenu\n          mots={mots}\n          stationSearchUrl={stationSearchUrl}\n          isActiveRoute={isActiveRoute}\n          onZoomRouteClick={this.onZoomRouteClick}\n          onPanViaClick={this.onPanViaClick}\n          APIKey={APIKey}\n        />\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <BasicMap\n          center={center}\n          layers={this.layers}\n          zoom={zoom}\n          tabIndex={null}\n          map={this.map}\n          viewOptions={{\n            projection: this.projection,\n          }}\n        />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n    onSetShowLoadingBar: showLoadingBar =>\n      dispatch(actions.setShowLoadingBar(showLoadingBar)),\n  };\n};\n\nMapComponent.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetShowLoadingBar: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport { showNotification } from '../../store/actions';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    const { onShowNotification } = this.props;\n    this.setState({\n      open: false,\n    });\n    onShowNotification(null, 'error');\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(showNotification(notificationMessage, notificationType)),\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  onShowNotification: PropTypes.func.isRequired,\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport NotificationHandler from '../NotificationHandler';\nimport { VALID_MOTS } from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/dev/',\n  stationSearchUrl: 'https://api.geops.io/stops/dev/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  return (\n    <Provider store={store}>\n      <MapComponent\n        mots={mots}\n        routingUrl={routingUrl}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import polyfills for ie 11\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}