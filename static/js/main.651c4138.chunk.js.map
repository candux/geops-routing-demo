{"version":3,"sources":["Components/Map/index.js","Components/Map/Map.jsx","Components/RoutingMenu/constants.js","Components/RoutingMenu/RoutingMenu.jsx","Components/GeopsRoutingDemo/GeopsRoutingDemo.jsx","Components/index.js","serviceWorker.js","index.js"],"names":["Map","applicationVersion","process","stamenTonerLite","L","tileLayer","attribution","subdomains","minZoom","maxZoom","ext","this","map","center","zoom","zoomControl","layers","control","position","addTo","id","className","Component","VALID_MOTS","name","icon","TabPanel","props","children","value","index","other","Typography","component","role","hidden","aria-labelledby","Box","p","RoutingMenu","validateMots","mots","currentMots","forEach","providedMot","requestedMot","find","mot","push","length","handleMotChange","event","newMot","setState","currentMot","console","log","onFieldFocus","fieldIndex","focusedFieldIndex","onFieldBlur","searchStops","target","updateCurrentStops","state","currentStops","currentSearchResults","searchCancel","axios","get","stationSearchUrl","params","q","key","cancelToken","searchCancelToken","cancel","then","response","searchResults","data","features","singleResult","properties","error","processHighlightedResultSelect","processRoute","canSearchForRoute","CancelToken","Paper","square","elevation","Tabs","onChange","variant","scrollButtons","indicatorColor","textColor","aria-label","Tab","Grid","container","spacing","alignItems","style","width","item","xs","fontSize","color","TextField","label","e","onKeyDown","onFocus","onBlur","IconButton","disabled","searchResult","gutterBottom","React","GeopsRoutingDemo","Boolean","window","location","hostname","match","geopsRoutingDemo","routingUrl","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.651c4138.chunk.js","sourcesContent":["import Map from \"./Map\";\r\n\r\nexport default Map;","import React, {Component} from 'react';\r\nimport L from 'leaflet';\r\nimport \"./Map.css\";\r\n\r\nclass Map extends Component {\r\n    componentDidMount() {\r\n        const applicationVersion = `${process.env.REACT_APP_NAME} ${process.env.REACT_APP_VERSION}`;\r\n        const stamenTonerLite = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.{ext}', {\r\n            attribution: applicationVersion + ' | Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n            subdomains: 'abcd',\r\n            minZoom: 0,\r\n            maxZoom: 20,\r\n            ext: 'png'\r\n        });\r\n\r\n        this.map = L.map('map', {\r\n            center: [25, 25],\r\n            zoom: 4,\r\n            zoomControl: false,\r\n            layers: [stamenTonerLite]\r\n        });\r\n        L.control.zoom({\r\n            position: 'topright'\r\n        }).addTo(this.map);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <div id=\"map\" className=\"map\"/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\r\nimport DirectionsBoatIcon from '@material-ui/icons/DirectionsBoat';\r\nimport RowingIcon from '@material-ui/icons/Rowing';\r\nimport TramIcon from '@material-ui/icons/Tram';\r\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\r\nimport DirectionsSubwayIcon from '@material-ui/icons/DirectionsSubway';\r\nimport CallMergeIcon from '@material-ui/icons/CallMerge';\r\nimport SubwayIcon from '@material-ui/icons/Subway';\r\n\r\nexport const VALID_MOTS = [\r\n    {\r\n        name: \"bus\",\r\n        icon: <DirectionsBusIcon/>\r\n    },\r\n    {\r\n        name: \"ferry\",\r\n        icon: <DirectionsBoatIcon/>\r\n    },\r\n    {\r\n        name: \"gondola\",\r\n        icon: <RowingIcon/>\r\n    },\r\n    {\r\n        name: \"tram\",\r\n        icon: <TramIcon/>\r\n    },\r\n    {\r\n        name: \"rail\",\r\n        icon: <DirectionsRailwayIcon/>\r\n    },\r\n    {\r\n        name: \"funicular\",\r\n        icon: <DirectionsSubwayIcon/>\r\n    },\r\n    {\r\n        name: \"cable_car\",\r\n        icon: <CallMergeIcon/>\r\n    },\r\n    {\r\n        name: \"subway\",\r\n        icon: <SubwayIcon/>\r\n    }];","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\n\r\nimport Adjust from '@material-ui/icons/Adjust';\r\nimport Room from '@material-ui/icons/Room';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport DirectionsIcon from '@material-ui/icons/Directions';\r\n\r\nimport \"./RoutingMenu.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {VALID_MOTS} from \"./constants\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nclass RoutingMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const currentMots = this.validateMots(props.mots);\r\n        this.state = {\r\n            currentMots: currentMots,\r\n            currentMot: currentMots[0].name,\r\n            currentSearchResults: [],\r\n            focusedFieldIndex: null,\r\n            currentStops: [\"\", \"\"],\r\n            canSearchForRoute: false\r\n        };\r\n\r\n        this.searchCancelToken = axios.CancelToken;\r\n        this.searchCancel = null;\r\n    }\r\n\r\n    validateMots = mots => {\r\n        let currentMots = [];\r\n        mots.forEach(providedMot => {\r\n            let requestedMot = VALID_MOTS.find(mot => mot.name === providedMot);\r\n            if (requestedMot)\r\n                currentMots.push(requestedMot);\r\n        });\r\n        if (currentMots.length === 0)\r\n            currentMots.push(VALID_MOTS[0]);\r\n        return (currentMots);\r\n    };\r\n\r\n    handleMotChange = (event, newMot) => {\r\n        this.setState({currentMot: newMot});\r\n        console.log(newMot);\r\n    };\r\n\r\n    onFieldFocus = fieldIndex => {\r\n        this.setState({focusedFieldIndex: fieldIndex});\r\n    };\r\n\r\n    onFieldBlur = () => {\r\n        this.setState({focusedFieldIndex: null});\r\n    };\r\n\r\n    searchStops = (event, fieldIndex) => {\r\n        // only search if text is available\r\n        if (!event.target.value) {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[fieldIndex] = \"\";\r\n            this.setState({\r\n                currentSearchResults: [],\r\n                currentStops: updateCurrentStops\r\n            });\r\n            return;\r\n        } else {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[fieldIndex] = event.target.value;\r\n            this.setState({\r\n                currentStops: updateCurrentStops\r\n            });\r\n        }\r\n        if (this.searchCancel)\r\n            this.searchCancel();\r\n        axios.get(this.props.stationSearchUrl, {\r\n            params: {\r\n                q: event.target.value,\r\n                key: '5cc87b12d7c5370001c1d655d0a18192eba64838a5fa1ad7d482ab82'\r\n            },\r\n            cancelToken: new this.searchCancelToken((cancel) => {\r\n                this.searchCancel = cancel;\r\n            })\r\n        })\r\n            .then((response) => {\r\n                const searchResults = [];\r\n                response.data.features.forEach(singleResult => {\r\n                    if (singleResult.properties.mot[this.state.currentMot])\r\n                        searchResults.push(singleResult.properties.name);\r\n                });\r\n                this.setState({\r\n                    currentSearchResults: searchResults\r\n                });\r\n            }, (error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    processHighlightedResultSelect = event => {\r\n        if (event.key === \"Enter\" && this.state.currentSearchResults[0]) {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[this.state.focusedFieldIndex] = this.state.currentSearchResults[0];\r\n            this.setState({\r\n                currentStops: updateCurrentStops,\r\n                currentSearchResults: []\r\n            });\r\n        }\r\n    };\r\n\r\n    processRoute = () => {\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"RoutingMenu\">\r\n                <Paper square elevation={3}>\r\n                    <Tabs\r\n                        value={this.state.currentMot}\r\n                        onChange={this.handleMotChange}\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        aria-label=\"icon tabs example\"\r\n                    >\r\n                        {\r\n                            this.state.currentMots.map(currentMot => {\r\n                                return (\r\n                                    <Tab key={\"mot-\" + currentMot.name} value={currentMot.name} icon={currentMot.icon}\r\n                                         aria-label={currentMot.name}/>);\r\n                            })\r\n                        }\r\n                    </Tabs>\r\n                    <TabPanel>\r\n                        <Grid container spacing={1} alignItems=\"flex-end\" style={{width: '100%'}}>\r\n                            <Grid item xs={1}>\r\n                                <Adjust fontSize=\"small\" color=\"secondary\"/>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <TextField style={{width: '100%'}} label=\"Source\"\r\n                                           color=\"secondary\" onChange={(e) => this.searchStops(e, 0)}\r\n                                           value={this.state.currentStops[0]}\r\n                                           onKeyDown={this.processHighlightedResultSelect}\r\n                                           onFocus={() => this.onFieldFocus(0)}\r\n                                           onBlur={this.onFieldBlur}/>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <IconButton className=\"addHop\" color=\"primary\" aria-label=\"upload picture\"\r\n                                            component=\"span\">\r\n                                    <AddCircleOutlineIcon/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/*<Grid container spacing={1} alignItems=\"flex-end\" style={{width: '100%'}}>*/}\r\n                        {/*<Grid item xs={1}>*/}\r\n                        {/*<RadioButtonCheckedIcon fontSize=\"small\" color=\"secondary\"/>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={9}>*/}\r\n                        {/*<TextField style={{width: '100%'}} label=\"Hop\"*/}\r\n                        {/*color=\"secondary\"/>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={1}>*/}\r\n                        {/*<IconButton className=\"addHop\" color=\"secondary\" aria-label=\"upload picture\"*/}\r\n                        {/*component=\"span\">*/}\r\n                        {/*<RemoveCircleOutlineIcon/>*/}\r\n                        {/*</IconButton>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={1}>*/}\r\n                        {/*<IconButton className=\"addHop\" color=\"primary\" aria-label=\"upload picture\"*/}\r\n                        {/*component=\"span\">*/}\r\n                        {/*<AddCircleOutlineIcon/>*/}\r\n                        {/*</IconButton>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*</Grid>*/}\r\n                        <Grid container spacing={1} alignItems=\"flex-end\" style={{width: '100%'}}>\r\n                            <Grid item xs={1}>\r\n                                <Room color=\"secondary\"/>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <TextField style={{width: '100%'}} label=\"Destination\"\r\n                                           color=\"secondary\" onChange={(e) => this.searchStops(e, 1)}\r\n                                           value={this.state.currentStops[1]}\r\n                                           onKeyDown={this.processHighlightedResultSelect}\r\n                                           onFocus={() => this.onFieldFocus(1)}\r\n                                           onBlur={this.onFieldBlur}/>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <IconButton disabled={!this.state.canSearchForRoute} className=\"addHop\" color=\"primary\"\r\n                                            aria-label=\"upload picture\"\r\n                                            component=\"span\">\r\n                                    <DirectionsIcon/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </TabPanel>\r\n                </Paper>\r\n                {\r\n                    this.state.currentSearchResults.length !== 0 ?\r\n                        <div>\r\n                            <hr/>\r\n                            <Paper square elevation={1}>\r\n                                <TabPanel>\r\n                                    {this.state.currentSearchResults.map((searchResult, index) => {\r\n                                        if (index !== 0) {\r\n                                            return (\r\n                                                <Typography key={\"searchResult-\" + searchResult} variant=\"subtitle1\"\r\n                                                            gutterBottom>\r\n                                                    {searchResult}\r\n                                                </Typography>\r\n                                            );\r\n                                        } else {\r\n                                            // First Element\r\n                                            return (\r\n                                                <Typography key={\"searchResult-\" + searchResult} variant=\"h6\"\r\n                                                            gutterBottom>\r\n                                                    {searchResult}\r\n                                                </Typography>\r\n                                            );\r\n                                        }\r\n                                    })}\r\n                                </TabPanel>\r\n                            </Paper>\r\n                        </div> : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default RoutingMenu;\r\n\r\n","import React from 'react';\r\nimport Map from \"../Map\";\r\nimport RoutingMenu from \"../RoutingMenu/RoutingMenu\";\r\n\r\nfunction GeopsRoutingDemo(props) {\r\n    return (\r\n        <div>\r\n            <RoutingMenu {...props}/>\r\n            <Map/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GeopsRoutingDemo;\r\n","import GeopsRoutingDemo from \"./GeopsRoutingDemo\";\r\n\r\nexport default GeopsRoutingDemo;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GeopsRoutingDemo from './Components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst geopsRoutingDemo =\r\n    <GeopsRoutingDemo\r\n        mots={['rail','bus','tram']}\r\n        routingUrl=\"https://api.geops.io/routing/v1/\"\r\n        stationSearchUrl=\"https://api.geops.io/stops/v1/\"\r\n        key=\"5cc87b12d7c5370001c1d655d0a18192eba64838a5fa1ad7d482ab82\"\r\n    />;\r\nReactDOM.render(geopsRoutingDemo, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}