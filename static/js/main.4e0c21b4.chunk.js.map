{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","store/actions/Map.jsx","constants.js","utils.jsx","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","store/prop-types.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","config/styleConfig.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","setCurrentStops","state","action","updatedState","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","WGS84_MOTS","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","decimal","transform","map","c","toFixed","renderSecondary","code","countryCode","SearchResults","props","currentSearchResults","processClickedResultHandler","length","Paper","square","elevation","List","component","aria-label","searchResult","index","ListItem","onClick","button","key","nextId","ListItemIcon","ListItemText","primary","properties","secondary","country_code","selected","defaultProps","coordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","id","oneOfType","currentStop","features","useStyles","makeStyles","gridContainer","width","padding","boxSizing","color","fieldWrapper","maxWidth","buttonWrapper","SearchField","val","classes","dispatch","useDispatch","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","onZoomRouteClick","isActiveRoute","onPanViaClick","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","Tooltip","IconButton","className","size","fontSize","Grid","item","xs","disabled","container","spacing","alignItems","TextField","style","label","onChange","e","value","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","target","select","TabPanel","children","Typography","role","hidden","aria-labelledby","tabs","tab","minWidth","dropDown","backgroundColor","height","selectInput","checkbox","abortController","AbortController","RoutingMenu","mots","stationSearchUrl","APIKey","validateMots","motsArray","validationMots","currentMotsArray","filter","mot","includes","forEach","providedMot","requestedMot","find","push","icon","currentMotsVal","otherMotsVal","useSelector","useState","currentMots","setCurrentMotState","otherMots","setCurrentSearchResults","React","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","showLoadingBar","setShowLoadingBar","undefined","currentOtherMot","setCurrentOtherMot","useEffect","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","_","clone","tempGeoJSON","reverse","handleMotChange","newMot","fieldIndex","currStops","indexToInsertAt","splice","indexToRemoveFrom","Object","keys","toString","abort","signal","reqUrl","fetch","then","response","json","searchResults","singleResult","catch","err","console","warn","firstSearchResult","updateCurrentSearchResults","Tabs","indicatorColor","textColor","singleMot","Tab","FormControl","Select","renderValue","root","labelId","displayEmpty","evt","MenuItem","Checkbox","checked","inputProps","LinearProgress","railLineStyle","Style","stroke","Stroke","lineDash","busLineStyle","pedestrianLineStyle","carLineStyle","othersLineStyle","railPointStyle","image","Circle","radius","fill","Fill","pedestrianPointStyle","carPointStyle","busPointStyle","othersPointStyle","MapComponent","drawNewRoute","hops","routingUrl","onShowNotification","uid","join","error","routeVectorSource","clear","format","GeoJSON","dataProjection","featureProjection","addFeatures","readFeatures","setIsActiveRoute","getFeatures","f","setStyle","hoveredFeature","hoveredStationOpen","hoveredStationName","this","onSetClickLocation","center","markerVectorSource","VectorSource","markerVectorLayer","VectorLayer","zIndex","source","routeVectorLayer","translate","Translate","layers","on","featureIndex","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","newCurentStopsGeoJSON","getArray","getProperties","indexOf","array","i","isItemInArray","coordinate","Map","interactions","defaultInteractions","extend","view","View","projection","zoom","mbMap","mapboxgl","attributionControl","boxZoom","toLonLat","getTargetElement","doubleClickZoom","dragPan","dragRotate","interactive","keyboard","pitchWithRotate","scrollZoom","touchZoomRotate","mbLayer","Layer","render","frameState","canvas","getCanvas","viewState","visible","getVisible","display","opacity","getOpacity","rotation","rotateTo","Math","PI","animate","jumpTo","_frame","cancel","_render","l","addLayer","featExtent","getExtent","Number","isFinite","getView","fit","getSize","duration","idx","featureCoord","setState","forEachFeatureAtPixel","pixel","getGeometry","getType","featCountryCode","get","flatCoordinates","prevProps","currentMotChanged","currentStopsGeoJSONChanged","getCoordinates","Snackbar","anchorOrigin","vertical","horizontal","open","message","Component","getExtentCenter","extent","connect","actions","NotificationHandler","handleOpen","handleClose","autoHideDuration","onClose","Alert","severity","variant","App","process","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e0c21b4.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  currentMot: 'bus',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import * as actionTypes from './actionTypes';\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nexport const DEFAULT_MOTS = ['rail', 'bus', 'foot'];\n\nexport const OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n];\n\nexport const VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport const WGS84_MOTS = ['foot', 'car'];\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = (coord, decimal = 4) => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326').map(c =>\n    c.toFixed(decimal),\n  );\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\n\nconst renderSecondary = (code, countryCode) => {\n  if (code && countryCode) {\n    return `${code} - ${countryCode}`;\n  }\n  if (code || countryCode) {\n    return code || countryCode;\n  }\n  return null;\n};\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3}>\n      <List component=\"nav\" aria-label=\"search results\">\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={renderSecondary(\n                    searchResult.properties.code,\n                    searchResult.properties.country_code,\n                  )}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={renderSecondary(\n                  searchResult.properties.code,\n                  searchResult.properties.country_code,\n                )}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import PropTypes from 'prop-types';\n\nconst coordinates = PropTypes.arrayOf(PropTypes.number.isRequired).isRequired;\n\nconst geometry = PropTypes.shape({\n  coordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, coordinates]),\n    '1': PropTypes.oneOfType([feature, coordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, coordinates]),\n);\n\nexport { propTypeCurrentStops, propTypeCurrentStopsGeoJSON };\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\nconst useStyles = makeStyles(() => ({\n  gridContainer: {\n    width: '100%',\n    padding: '0px 0px 0px 20px',\n    boxSizing: 'unset',\n  },\n  button: {\n    color: 'black',\n  },\n  fieldWrapper: {\n    maxWidth: '75%',\n  },\n  buttonWrapper: {\n    maxWidth: '26px',\n  },\n}));\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n    onZoomRouteClick,\n    isActiveRoute,\n    onPanViaClick,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n            disabled={currentStops[index] === ''}\n            className={classes.button}\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = (\n      <Tooltip title=\"Pan to the feature\">\n        <IconButton\n          onClick={() => onPanViaClick(singleStop, index)}\n          className={classes.button}\n          aria-label=\"Pan to the feature\"\n          size=\"small\"\n        >\n          <Room color=\"primary\" />\n        </IconButton>\n      </Tooltip>\n    );\n    searchFieldLabel = 'End';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Zoom to the route\">\n          <IconButton\n            onClick={() => onZoomRouteClick()}\n            disabled={!isActiveRoute}\n            className={classes.button}\n            aria-label=\"Zoom to the route\"\n            size=\"small\"\n          >\n            <ZoomInIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else {\n    fieldLeftIcon = <Adjust fontSize=\"small\" color=\"primary\" />;\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              disabled={currentStops[index] === ''}\n              onClick={() => addNewSearchFieldHandler(currentStops, index + 1)}\n              className={classes.button}\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              className={classes.button}\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      className={classes.gridContainer}\n      alignItems=\"flex-end\"\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize} className={classes.fieldWrapper}>\n        <TextField\n          style={{\n            width: '100%',\n          }}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n  onZoomRouteClick: PropTypes.func.isRequired,\n  onPanViaClick: PropTypes.func.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n} from '../../store/actions/Map';\nimport './RoutingMenu.css';\nimport { VALID_MOTS, DEFAULT_MOTS, OTHER_MOTS } from '../../constants';\nimport { to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '33%',\n    width: '33%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  select: {\n    height: '100%',\n  },\n  selectInput: {\n    backgroundColor: 'white',\n    '&:focus': {\n      backgroundColor: 'white',\n    },\n  },\n  checkbox: {\n    padding: '20px 23px',\n  },\n}));\n\nlet abortController = new AbortController();\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({\n  mots,\n  stationSearchUrl,\n  APIKey,\n  isActiveRoute,\n  onZoomRouteClick,\n  onPanViaClick,\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n\n  const [currentMots] = useState(currentMotsVal);\n  const [currentMot, setCurrentMotState] = useState(currentMotsVal[0].name);\n  const [otherMots] = useState(otherMotsVal);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [showLoadingBar, setShowLoadingBar] = useState(false);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  useEffect(() => {\n    dispatch(setCurrentMot(currentMots[0].name));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot) => {\n    setCurrentOtherMot(null);\n    setCurrentMotState(newMot);\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = (currStops, indexToInsertAt) => {\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n    dispatch(setCurrentStops(updatedCurrentStops));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n    const updatedCurrentStopsGeoJSON = {};\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (key !== indexToRemoveFrom.toString()) {\n        updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n      }\n    });\n    dispatch(setCurrentStops(updatedCurrentStops));\n\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setShowLoadingBar(false);\n      return;\n    }\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setShowLoadingBar(true);\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${stationSearchUrl}?q=${\n      event.target.value\n    }&key=${APIKey}&mots=${searchMotOnly ? currentMot : ''}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        const searchResults = [];\n        response.features.forEach(singleResult => {\n          // Search results from the API\n          if (singleResult.properties.mot[currentMot])\n            searchResults.push(singleResult);\n        });\n        if (response.features.length === 0 || searchResults.length === 0) {\n          // No results for the given query\n          // onShowNotification(\"Couldn't find stations\", 'warning');\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n        }\n        setCurrentSearchResults(searchResults);\n        setShowLoadingBar(false);\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(null);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  if (!onZoomRouteClick || !onPanViaClick) {\n    return null;\n  }\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl className={classes.dropDown}>\n            <Select\n              renderValue={val => (val !== '' ? val : 'Other MOTs')}\n              className={classes.select}\n              classes={{ root: classes.selectInput }}\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot || ''}\n              displayEmpty\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          {currentStops.map((singleStop, index) => {\n            return (\n              <SearchField\n                // eslint-disable-next-line react/no-array-index-key\n                key={`searchField-${index}`}\n                index={index}\n                addNewSearchFieldHandler={addNewSearchFieldHandler}\n                currentStops={currentStops}\n                removeSearchFieldHandler={removeSearchFieldHandler}\n                searchStopsHandler={searchStopsHandler}\n                singleStop={singleStop}\n                processHighlightedResultSelectHandler={\n                  processHighlightedResultSelectHandler\n                }\n                onFieldFocusHandler={onFieldFocusHandler}\n                onZoomRouteClick={onZoomRouteClick}\n                onPanViaClick={onPanViaClick}\n                isActiveRoute={isActiveRoute}\n              />\n            );\n          })}\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => setSearchMotOnly(!searchMotOnly)}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  isActiveRoute: PropTypes.bool.isRequired,\n  onZoomRouteClick: PropTypes.func,\n  onPanViaClick: PropTypes.func,\n};\n\nRoutingMenu.defaultProps = {\n  onZoomRouteClick: undefined,\n  onPanViaClick: undefined,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst railLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      lineDash: [10, 10],\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'red',\n      lineDash: [10, 10],\n      width: 3,\n    }),\n  }),\n];\n\nconst busLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'yellow',\n      width: 3,\n    }),\n  }),\n];\n\nconst pedestrianLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'rgb(173, 216, 230)',\n      width: 3,\n    }),\n  }),\n];\n\nconst carLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      lineDash: [0.5, 10],\n      width: 5,\n    }),\n  }),\n];\n\nconst othersLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'blue',\n      width: 3,\n    }),\n  }),\n];\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'black', width: 2 }),\n  }),\n});\n\nconst pedestrianPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'rgb(173, 216, 230)' }),\n  }),\n});\n\nconst carPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'black' }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'black', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'black', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianPointStyle;\n  }\n  if (mot === 'car') {\n    return carPointStyle;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railLineStyle;\n  }\n  if (mot === 'bus') {\n    return busLineStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianLineStyle;\n  }\n  if (mot === 'car') {\n    return carLineStyle;\n  }\n  return othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Map, View } from 'ol';\nimport { toLonLat } from 'ol/proj';\nimport { Layer, Vector as VectorLayer } from 'ol/layer';\nimport mapboxgl from 'mapbox-gl';\nimport _ from 'lodash/core';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport { defaults as defaultInteractions, Translate } from 'ol/interaction';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport RoutingMenu from '../RoutingMenu';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { WGS84_MOTS } from '../../constants';\nimport { to4326 } from '../../utils';\nimport './MapComponent.css';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\nlet abortController = new AbortController();\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  static getExtentCenter = extent => {\n    const X = extent[0] + (extent[2] - extent[0]) / 2;\n    const Y = extent[1] + (extent[3] - extent[1]) / 2;\n    return [X, Y];\n  };\n\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    this.hoveredFeature = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n      isActiveRoute: false,\n    };\n  }\n\n  /**\n   * Create Openlayers map (source, view, layer, etc...).\n   * Add event listener onClick to handle location selection from map.\n   * @category Map\n   */\n  componentDidMount() {\n    const { APIKey, onSetClickLocation } = this.props;\n    const center = [949042.143189, 5899715.591163];\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    this.markerVectorLayer = new VectorLayer({\n      zIndex: 1,\n      source: this.markerVectorSource,\n    });\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({});\n    this.routeVectorLayer = new VectorLayer({\n      zIndex: 0,\n      source: this.routeVectorSource,\n    });\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer],\n    });\n\n    const isItemInArray = (array, item) => {\n      for (let i = 0; i < array.length; i += 1) {\n        if (array[i][0] === item[0] && array[i][1] === item[1]) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    translate.on('translateend', evt => {\n      const {\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        featureIndex = isItemInArray(currentStops, id.slice().reverse());\n      }\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    this.map = new Map({\n      target: 'map',\n      interactions: defaultInteractions().extend([translate]),\n      view: new View({\n        projection: 'EPSG:3857',\n        center,\n        zoom: 6,\n      }),\n    });\n\n    const mbMap = new mapboxgl.Map({\n      style: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n      attributionControl: false,\n      boxZoom: false,\n      center: toLonLat(center),\n      container: this.map.getTargetElement(),\n      doubleClickZoom: false,\n      dragPan: false,\n      dragRotate: false,\n      interactive: false,\n      keyboard: false,\n      pitchWithRotate: false,\n      scrollZoom: false,\n      touchZoomRotate: false,\n    });\n\n    /* eslint-disable no-underscore-dangle */\n    const mbLayer = new Layer({\n      render: frameState => {\n        const canvas = mbMap.getCanvas();\n        const { viewState } = frameState;\n\n        const visible = mbLayer.getVisible();\n        canvas.style.display = visible ? 'block' : 'none';\n\n        const opacity = mbLayer.getOpacity();\n        canvas.style.opacity = opacity;\n\n        // adjust view parameters in mapbox\n        const { rotation } = viewState;\n        if (rotation) {\n          mbMap.rotateTo((-rotation * 180) / Math.PI, {\n            animate: false,\n          });\n        }\n        mbMap.jumpTo({\n          center: toLonLat(viewState.center),\n          zoom: viewState.zoom - 1,\n          animate: false,\n        });\n\n        if (mbMap._frame) {\n          mbMap._frame.cancel();\n          mbMap._frame = null;\n        }\n        mbMap._render();\n\n        return canvas;\n      },\n    });\n\n    [mbLayer, this.markerVectorLayer, this.routeVectorLayer].forEach(l =>\n      this.map.addLayer(l),\n    );\n\n    this.onZoomRouteClick = () => {\n      let featExtent;\n      if (this.routeVectorSource.getFeatures().length) {\n        featExtent = this.routeVectorSource.getExtent();\n      }\n\n      if (featExtent.filter(f => Number.isFinite(f)).length === 4) {\n        this.map.getView().fit(this.routeVectorSource.getExtent(), {\n          size: this.map.getSize(),\n          duration: 500,\n          padding: [200, 200, 200, 200],\n        });\n      }\n    };\n\n    this.onPanViaClick = (item, idx) => {\n      const { currentStopsGeoJSON } = this.props;\n      if (currentStopsGeoJSON && currentStopsGeoJSON[idx]) {\n        const featureCoord = currentStopsGeoJSON[idx].features\n          ? currentStopsGeoJSON[idx].features[0].geometry.coordinates\n          : currentStopsGeoJSON[idx].geometry.coordinates;\n\n        this.map.getView().animate({\n          center: featureCoord,\n          duration: 500,\n          padding: [100, 100, 100, 100],\n        });\n      }\n    };\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStopsGeoJSON } = this.props;\n      // if one field empty or if a field is focused\n      if (\n        !currentStopsGeoJSON['0'] ||\n        !currentStopsGeoJSON['1'] ||\n        isFieldFocused\n      ) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n      this.map.forEachFeatureAtPixel(evt.pixel, feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          const featCountryCode = feature.get('country_code');\n          if (feature.get('name')) {\n            name = `${feature.get('name')}${\n              featCountryCode ? ` - ${featCountryCode}` : ''\n            }`;\n          } else {\n            name = `${to4326(feature.getGeometry().flatCoordinates)}`;\n          }\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n\n    if (currentMotChanged || currentStopsGeoJSONChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n\n        const coordinate = this.markerVectorSource\n          .getFeatures()[0]\n          .getGeometry()\n          .getCoordinates();\n        this.map.getView().animate({\n          center: coordinate,\n          duration: 500,\n        });\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      this.setIsActiveRoute(false);\n\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  setIsActiveRoute(isActiveRoute) {\n    this.setState({ isActiveRoute });\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = () => {\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      onShowNotification,\n    } = this.props;\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `${to4326(currentStopsGeoJSON[key].features[0].geometry.coordinates)\n            .slice()\n            .reverse()}`,\n        );\n      } else {\n        // The item selected is a station from the stations API.\n        hops.push(`!${currentStopsGeoJSON[key].properties.uid}`);\n      }\n    });\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${routingUrl}?via=${hops.join(\n      '|',\n    )}&mot=${currentMot}&resolve-hops=false&srs=3857&key=${APIKey}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        if (response.error) {\n          onShowNotification(\"Couldn't find route\", 'error');\n          return;\n        }\n        // A route was found, prepare to draw it.\n        this.routeVectorSource.clear();\n        const format = WGS84_MOTS.includes(currentMot)\n          ? new GeoJSON({\n              dataProjection: 'EPSG:4326',\n              featureProjection: 'EPSG:3857',\n            })\n          : new GeoJSON();\n        this.routeVectorSource.addFeatures(format.readFeatures(response));\n        this.setIsActiveRoute(!!this.routeVectorSource.getFeatures().length);\n\n        this.routeVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(lineStyleFunction(currentMot)));\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const { mots, APIKey, stationSearchUrl } = this.props;\n    const {\n      isActiveRoute,\n      hoveredStationOpen,\n      hoveredStationName,\n    } = this.state;\n    return (\n      <>\n        <RoutingMenu\n          mots={mots}\n          stationSearchUrl={stationSearchUrl}\n          isActiveRoute={isActiveRoute}\n          onZoomRouteClick={this.onZoomRouteClick}\n          onPanViaClick={this.onPanViaClick}\n          APIKey={APIKey}\n        />\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <div id=\"map\" className=\"MapComponent\" />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n  };\n};\n\nMapComponent.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport NotificationHandler from '../NotificationHandler';\nimport { VALID_MOTS } from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/dev/',\n  stationSearchUrl: 'https://api.geops.io/stops/dev/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  return (\n    <Provider store={store}>\n      <MapComponent\n        mots={mots}\n        routingUrl={routingUrl}\n        APIKey={apiKey}\n        stationSearchUrl={stationSearchUrl}\n      />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import polyfills for ie 11\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}