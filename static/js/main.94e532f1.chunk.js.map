{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/RoutingMenu/constants.js","Components/RoutingMenu/RoutingMenu.jsx","store/actions/Map.jsx","Components/GeopsRoutingDemo/GeopsRoutingDemo.jsx","Components/index.js","serviceWorker.js","index.js"],"names":["initialState","hops","mot","findRoute","state","action","updatedState","reducer","type","composeEnhancers","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","MapComponent","props","findRouteCancelToken","axios","CancelToken","findRouteCancel","routeStyle","Style","stroke","Stroke","color","lineDash","width","openStreetMap","TileLayer","source","OSM","this","map","Map","target","layers","view","View","projection","center","zoom","prevProps","get","routingUrl","params","via","join","key","APIKey","cancelToken","cancel","then","response","vectorSource","VectorSource","features","GeoJSON","readFeatures","data","vectorLayer","VectorLayer","style","addLayer","getView","fit","getExtent","getSize","error","console","log","id","className","Component","connect","VALID_MOTS","name","icon","TabPanel","children","value","index","other","Typography","component","role","hidden","aria-labelledby","Box","p","RoutingMenu","validateMots","mots","currentMots","forEach","providedMot","requestedMot","find","push","length","handleMotChange","event","newMot","setState","currentMot","onFieldFocus","fieldIndex","focusedFieldIndex","onFieldBlur","searchStops","updateCurrentStops","currentStops","currentSearchResults","showLoadingBar","searchCancel","stationSearchUrl","q","searchCancelToken","searchResults","singleResult","properties","processHighlightedResultSelect","processRoute","onFindRoute","canSearchForRoute","Paper","square","elevation","Tabs","onChange","variant","scrollButtons","indicatorColor","textColor","aria-label","Tab","Grid","container","spacing","alignItems","item","xs","fontSize","TextField","label","e","onKeyDown","onFocus","onBlur","IconButton","onClick","LinearProgress","searchResult","gutterBottom","React","dispatch","actions","GeopsRoutingDemo","Boolean","window","location","hostname","match","geopsRoutingDemo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94e532f1.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    hops: [],\r\n    mot: \"bus\"\r\n};\r\n\r\nconst findRoute = (state, action) => {\r\n    const updatedState = {\r\n        hops: action.hops,\r\n        mot: action.mot,\r\n    };\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FIND_ROUTE:\r\n            return findRoute(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","export const FIND_ROUTE = 'FIND_ROUTE';","import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport MapReducer from './reducers/Map';\r\n\r\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || null : compose;\r\nconst rootReducer = combineReducers({\r\n    MapReducer: MapReducer,\r\n});\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\nexport default store;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Map, View} from 'ol';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\r\nimport OSM from 'ol/source/OSM';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport {Vector as VectorSource} from 'ol/source';\r\nimport axios from 'axios';\r\nimport \"./MapComponent.css\";\r\nimport {Stroke, Style} from \"ol/style\";\r\n\r\nclass MapComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.findRouteCancelToken = axios.CancelToken;\r\n        this.findRouteCancel = null;\r\n        this.routeStyle = new Style({\r\n            stroke: new Stroke({\r\n                color: 'blue',\r\n                lineDash: [4],\r\n                width: 3\r\n            })\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const openStreetMap = new TileLayer({\r\n            source: new OSM()\r\n        });\r\n        this.map = new Map({\r\n            target: 'map',\r\n            layers: [openStreetMap],\r\n            view: new View({\r\n                projection: 'EPSG:4326',\r\n                center: [25, 25],\r\n                zoom: 4\r\n            }),\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.hops && this.props.hops !== prevProps.hops) {\r\n            if (this.findRouteCancel)\r\n                this.findRouteCancel();\r\n            axios.get(this.props.routingUrl, {\r\n                params: {\r\n                    via: this.props.hops.join(\"|\"),\r\n                    mot: this.props.mot,\r\n                    key: this.props.APIKey\r\n                },\r\n                cancelToken: new this.findRouteCancelToken((cancel) => {\r\n                    this.findRouteCancel = cancel;\r\n                })\r\n            })\r\n                .then((response) => {\r\n                    const vectorSource = new VectorSource({\r\n                        features: (new GeoJSON()).readFeatures(response.data)\r\n                    });\r\n                    const vectorLayer = new VectorLayer({\r\n                        source: vectorSource,\r\n                        style: this.routeStyle\r\n                    });\r\n                    this.map.addLayer(vectorLayer);\r\n                    this.map.getView().fit(vectorSource.getExtent(), this.map.getSize());\r\n                }, (error) => {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\" className=\"MapComponent\"/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        hops: state.MapReducer.hops,\r\n        mot: state.MapReducer.mot,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MapComponent);","import MapComponent from \"./MapComponent\";\r\n\r\nexport default MapComponent;","import React from 'react';\r\nimport DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\r\nimport DirectionsBoatIcon from '@material-ui/icons/DirectionsBoat';\r\nimport RowingIcon from '@material-ui/icons/Rowing';\r\nimport TramIcon from '@material-ui/icons/Tram';\r\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\r\nimport DirectionsSubwayIcon from '@material-ui/icons/DirectionsSubway';\r\nimport CallMergeIcon from '@material-ui/icons/CallMerge';\r\nimport SubwayIcon from '@material-ui/icons/Subway';\r\n\r\nexport const VALID_MOTS = [\r\n    {\r\n        name: \"bus\",\r\n        icon: <DirectionsBusIcon/>\r\n    },\r\n    {\r\n        name: \"ferry\",\r\n        icon: <DirectionsBoatIcon/>\r\n    },\r\n    {\r\n        name: \"gondola\",\r\n        icon: <RowingIcon/>\r\n    },\r\n    {\r\n        name: \"tram\",\r\n        icon: <TramIcon/>\r\n    },\r\n    {\r\n        name: \"rail\",\r\n        icon: <DirectionsRailwayIcon/>\r\n    },\r\n    {\r\n        name: \"funicular\",\r\n        icon: <DirectionsSubwayIcon/>\r\n    },\r\n    {\r\n        name: \"cable_car\",\r\n        icon: <CallMergeIcon/>\r\n    },\r\n    {\r\n        name: \"subway\",\r\n        icon: <SubwayIcon/>\r\n    }];","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Adjust from '@material-ui/icons/Adjust';\r\nimport Room from '@material-ui/icons/Room';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport DirectionsIcon from '@material-ui/icons/Directions';\r\n\r\nimport * as actions from \"../../store/actions\";\r\nimport \"./RoutingMenu.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {VALID_MOTS} from \"./constants\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nclass RoutingMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const currentMots = this.validateMots(props.mots);\r\n        this.state = {\r\n            currentMots: currentMots,\r\n            currentMot: currentMots[0].name,\r\n            currentSearchResults: [],\r\n            focusedFieldIndex: null,\r\n            currentStops: [\"\", \"\"],\r\n            canSearchForRoute: false,\r\n            showLoadingBar: false,\r\n        };\r\n\r\n        this.searchCancelToken = axios.CancelToken;\r\n        this.searchCancel = null;\r\n    }\r\n\r\n    validateMots = mots => {\r\n        let currentMots = [];\r\n        mots.forEach(providedMot => {\r\n            let requestedMot = VALID_MOTS.find(mot => mot.name === providedMot);\r\n            if (requestedMot)\r\n                currentMots.push(requestedMot);\r\n        });\r\n        if (currentMots.length === 0)\r\n            currentMots.push(VALID_MOTS[0]);\r\n        return (currentMots);\r\n    };\r\n\r\n    handleMotChange = (event, newMot) => {\r\n        this.setState({currentMot: newMot});\r\n        console.log(newMot);\r\n    };\r\n\r\n    onFieldFocus = fieldIndex => {\r\n        this.setState({focusedFieldIndex: fieldIndex});\r\n    };\r\n\r\n    onFieldBlur = () => {\r\n        this.setState({focusedFieldIndex: null});\r\n    };\r\n\r\n    searchStops = (event, fieldIndex) => {\r\n        // only search if text is available\r\n        if (!event.target.value) {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[fieldIndex] = \"\";\r\n            this.setState({\r\n                currentSearchResults: [],\r\n                currentStops: updateCurrentStops,\r\n                showLoadingBar: false\r\n            });\r\n            return;\r\n        } else {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[fieldIndex] = event.target.value;\r\n            this.setState({\r\n                currentStops: updateCurrentStops,\r\n                showLoadingBar: true\r\n            });\r\n        }\r\n        if (this.searchCancel)\r\n            this.searchCancel();\r\n        axios.get(this.props.stationSearchUrl, {\r\n            params: {\r\n                q: event.target.value,\r\n                key: this.props.APIKey\r\n            },\r\n            cancelToken: new this.searchCancelToken((cancel) => {\r\n                this.searchCancel = cancel;\r\n            })\r\n        })\r\n            .then((response) => {\r\n                const searchResults = [];\r\n                response.data.features.forEach(singleResult => {\r\n                    if (singleResult.properties.mot[this.state.currentMot])\r\n                        searchResults.push(singleResult.properties.name);\r\n                });\r\n                this.setState({\r\n                    currentSearchResults: searchResults,\r\n                    showLoadingBar: false\r\n                });\r\n            }, (error) => {\r\n                console.log(error);\r\n                this.setState({\r\n                    showLoadingBar: false\r\n                })\r\n            });\r\n    };\r\n\r\n    processHighlightedResultSelect = event => {\r\n        if (event.key === \"Enter\" && this.state.currentSearchResults[0]) {\r\n            let updateCurrentStops = this.state.currentStops;\r\n            updateCurrentStops[this.state.focusedFieldIndex] = this.state.currentSearchResults[0];\r\n            this.setState({\r\n                currentStops: updateCurrentStops,\r\n                currentSearchResults: []\r\n            });\r\n        }\r\n    };\r\n\r\n    processRoute = () => {\r\n        this.props.onFindRoute(this.state.currentStops, this.state.currentMot);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"RoutingMenu\">\r\n                <Paper square elevation={3}>\r\n                    <Tabs\r\n                        value={this.state.currentMot}\r\n                        onChange={this.handleMotChange}\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        aria-label=\"icon tabs example\"\r\n                    >\r\n                        {\r\n                            this.state.currentMots.map(currentMot => {\r\n                                return (\r\n                                    <Tab key={\"mot-\" + currentMot.name} value={currentMot.name} icon={currentMot.icon}\r\n                                         aria-label={currentMot.name}/>);\r\n                            })\r\n                        }\r\n                    </Tabs>\r\n                    <TabPanel>\r\n                        <Grid container spacing={1} alignItems=\"flex-end\" style={{width: '100%'}}>\r\n                            <Grid item xs={1}>\r\n                                <Adjust fontSize=\"small\" color=\"secondary\"/>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <TextField style={{width: '100%'}} label=\"Source\"\r\n                                           color=\"secondary\" onChange={(e) => this.searchStops(e, 0)}\r\n                                           value={this.state.currentStops[0]}\r\n                                           onKeyDown={this.processHighlightedResultSelect}\r\n                                           onFocus={() => this.onFieldFocus(0)}\r\n                                           onBlur={this.onFieldBlur}/>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <IconButton className=\"addHop\" color=\"primary\" aria-label=\"upload picture\"\r\n                                            component=\"span\">\r\n                                    <AddCircleOutlineIcon/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/*<Grid container spacing={1} alignItems=\"flex-end\" style={{width: '100%'}}>*/}\r\n                        {/*<Grid item xs={1}>*/}\r\n                        {/*<RadioButtonCheckedIcon fontSize=\"small\" color=\"secondary\"/>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={9}>*/}\r\n                        {/*<TextField style={{width: '100%'}} label=\"Hop\"*/}\r\n                        {/*color=\"secondary\"/>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={1}>*/}\r\n                        {/*<IconButton className=\"addHop\" color=\"secondary\" aria-label=\"upload picture\"*/}\r\n                        {/*component=\"span\">*/}\r\n                        {/*<RemoveCircleOutlineIcon/>*/}\r\n                        {/*</IconButton>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={1}>*/}\r\n                        {/*<IconButton className=\"addHop\" color=\"primary\" aria-label=\"upload picture\"*/}\r\n                        {/*component=\"span\">*/}\r\n                        {/*<AddCircleOutlineIcon/>*/}\r\n                        {/*</IconButton>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*</Grid>*/}\r\n                        <Grid container spacing={1} alignItems=\"flex-end\" style={{width: '100%'}}>\r\n                            <Grid item xs={1}>\r\n                                <Room color=\"secondary\"/>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <TextField style={{width: '100%'}} label=\"Destination\"\r\n                                           color=\"secondary\" onChange={(e) => this.searchStops(e, 1)}\r\n                                           value={this.state.currentStops[1]}\r\n                                           onKeyDown={this.processHighlightedResultSelect}\r\n                                           onFocus={() => this.onFieldFocus(1)}\r\n                                           onBlur={this.onFieldBlur}/>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <IconButton className=\"addHop\" color=\"primary\"\r\n                                            aria-label=\"upload picture\" onClick={this.processRoute}\r\n                                            component=\"span\">\r\n                                    <DirectionsIcon/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </TabPanel>\r\n                    {this.state.showLoadingBar ? <LinearProgress /> : null}\r\n                </Paper>\r\n                {\r\n                    this.state.currentSearchResults.length !== 0 ?\r\n                        <div>\r\n                            <hr/>\r\n                            <Paper square elevation={1}>\r\n                                <TabPanel>\r\n                                    {this.state.currentSearchResults.map((searchResult, index) => {\r\n                                        if (index !== 0) {\r\n                                            return (\r\n                                                <Typography key={\"searchResult-\" + searchResult} variant=\"subtitle1\"\r\n                                                            gutterBottom>\r\n                                                    {searchResult}\r\n                                                </Typography>\r\n                                            );\r\n                                        } else {\r\n                                            // First Element\r\n                                            return (\r\n                                                <Typography key={\"searchResult-\" + searchResult} variant=\"h6\"\r\n                                                            gutterBottom>\r\n                                                    {searchResult}\r\n                                                </Typography>\r\n                                            );\r\n                                        }\r\n                                    })}\r\n                                </TabPanel>\r\n                            </Paper>\r\n                        </div> : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFindRoute: (hops, mot) => dispatch(actions.findRoute(hops, mot)),\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RoutingMenu);","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const findRoute = (hops, mot) => {\r\n    return {\r\n        type: actionTypes.FIND_ROUTE,\r\n        hops: hops,\r\n        mot: mot,\r\n    };\r\n};","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport store from '../../store/store';\r\nimport MapComponent from \"../MapComponent\";\r\nimport RoutingMenu from \"../RoutingMenu/RoutingMenu\";\r\n\r\nfunction GeopsRoutingDemo(props) {\r\n    return (\r\n        <Provider store={store}>\r\n            <RoutingMenu {...props}/>\r\n            <MapComponent {...props}/>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default GeopsRoutingDemo;\r\n","import GeopsRoutingDemo from \"./GeopsRoutingDemo\";\r\n\r\nexport default GeopsRoutingDemo;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GeopsRoutingDemo from './Components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst geopsRoutingDemo =\r\n    <GeopsRoutingDemo\r\n        mots={['rail','bus','tram']}\r\n        routingUrl=\"https://api.geops.io/routing/v1/\"\r\n        stationSearchUrl=\"https://api.geops.io/stops/v1/\"\r\n        APIKey=\"5cc87b12d7c5370001c1d655d0a18192eba64838a5fa1ad7d482ab82\"\r\n    />;\r\nReactDOM.render(geopsRoutingDemo, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}