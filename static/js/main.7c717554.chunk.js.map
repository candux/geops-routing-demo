{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","config/styleConfig.js","store/prop-types.js","utils.jsx","store/actions/Map.jsx","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","constants.js","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","setCurrentStops","state","action","updatedState","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","railLineStyle","Style","stroke","Stroke","color","lineDash","width","busLineStyle","pedestrianLineStyle","carLineStyle","othersLineStyle","railPointStyle","image","Circle","radius","fill","Fill","busPointStyle","othersPointStyle","coordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","properties","id","oneOfType","currentStop","features","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","transform","MapComponent","props","drawNewRoute","findRouteCancel","hops","routingUrl","APIKey","onShowNotification","Object","keys","forEach","key","push","axios","get","params","via","join","mot","srs","cancelToken","FindRouteCancelToken","cancel","then","response","routeVectorSource","clear","addFeatures","GeoJSON","readFeatures","data","getFeatures","f","setStyle","map","getView","fit","getExtent","size","getSize","duration","padding","error","CancelToken","hoveredFeature","hoveredStationOpen","hoveredStationName","this","onSetClickLocation","center","markerVectorSource","VectorSource","markerVectorLayer","VectorLayer","zIndex","source","routeVectorLayer","translate","Translate","layers","on","evt","featureIndex","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","_","clone","newCurentStopsGeoJSON","getArray","getProperties","indexOf","array","item","i","length","isItemInArray","reverse","coordinate","Map","target","interactions","defaultInteractions","extend","view","View","projection","zoom","mbMap","mapboxgl","style","attributionControl","boxZoom","toLonLat","container","getTargetElement","doubleClickZoom","dragPan","dragRotate","interactive","keyboard","pitchWithRotate","scrollZoom","touchZoomRotate","mbLayer","Layer","render","frameState","canvas","getCanvas","viewState","visible","getVisible","display","opacity","getOpacity","rotation","rotateTo","Math","PI","animate","jumpTo","_frame","_render","l","addLayer","setState","forEachFeatureAtPixel","pixel","getGeometry","getType","prevProps","currentMotChanged","currentStopsGeoJSONChanged","getCoordinates","Snackbar","anchorOrigin","vertical","horizontal","open","message","className","Component","connect","dispatch","actions","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","SearchResults","currentSearchResults","processClickedResultHandler","Paper","square","elevation","List","component","aria-label","searchResult","index","ListItem","onClick","button","nextId","ListItemIcon","ListItemText","primary","secondary","code","country_code","selected","defaultProps","SearchField","val","useDispatch","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","fontSize","Grid","xs","Tooltip","IconButton","spacing","alignItems","TextField","label","onChange","e","value","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","select","TabPanel","children","Typography","role","hidden","aria-labelledby","useStyles","makeStyles","tabs","tab","minWidth","dropDown","backgroundColor","dropDownSelected","checkbox","RoutingMenu","mots","stationSearchUrl","classes","constants","validateMots","motsArray","validationMots","currentMotsArray","filter","includes","providedMot","requestedMot","find","icon","currentMotsVal","otherMotsVal","useSelector","useState","currentMots","setCurrentMotState","otherMots","setCurrentSearchResults","React","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","showLoadingBar","setShowLoadingBar","undefined","currentOtherMot","setCurrentOtherMot","SearchCancelToken","searchCancel","useEffect","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","tempGeoJSON","handleMotChange","newMot","fieldIndex","indexToInsertAt","splice","indexToRemoveFrom","toString","q","searchResults","singleResult","isCancel","firstSearchResult","updateCurrentSearchResults","Tabs","indicatorColor","textColor","singleMot","Tab","FormControl","InputLabel","Select","labelId","MenuItem","Checkbox","checked","inputProps","LinearProgress","NotificationHandler","handleOpen","handleClose","autoHideDuration","onClose","Alert","severity","variant","App","apiKey","setApiKey","fetch","json","catch","console","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c717554.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  currentMot: 'bus',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst railLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      lineDash: [10, 10],\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'red',\n      lineDash: [10, 10],\n      width: 3,\n    }),\n  }),\n];\n\nconst busLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'yellow',\n      width: 3,\n    }),\n  }),\n];\n\nconst pedestrianLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'rgb(173, 216, 230)',\n      width: 3,\n    }),\n  }),\n];\n\nconst carLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      lineDash: [0.5, 10],\n      width: 5,\n    }),\n  }),\n];\n\nconst othersLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'blue',\n      width: 3,\n    }),\n  }),\n];\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'black', width: 2 }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'black', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'black', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return undefined;\n  }\n  if (mot === 'car' || mot === 'truck') {\n    return undefined;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railLineStyle;\n  }\n  if (mot === 'bus') {\n    return busLineStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianLineStyle;\n  }\n  if (mot === 'car' || mot === 'truck') {\n    return carLineStyle;\n  }\n  return othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import PropTypes from 'prop-types';\n\nconst coordinates = PropTypes.arrayOf(PropTypes.number.isRequired).isRequired;\n\nconst geometry = PropTypes.shape({\n  coordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, coordinates]),\n    '1': PropTypes.oneOfType([feature, coordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, coordinates]),\n);\n\nexport { propTypeCurrentStops, propTypeCurrentStopsGeoJSON };\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = coord => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326');\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import * as actionTypes from './actionTypes';\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Map, View } from 'ol';\nimport { toLonLat } from 'ol/proj';\nimport { Layer, Vector as VectorLayer } from 'ol/layer';\nimport mapboxgl from 'mapbox-gl';\nimport _ from 'lodash/core';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport { defaults as defaultInteractions, Translate } from 'ol/interaction';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport './MapComponent.css';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    this.FindRouteCancelToken = axios.CancelToken;\n    this.findRouteCancel = null;\n    this.hoveredFeature = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n    };\n  }\n\n  /**\n   * Create Openlayers map (source, view, layer, etc...).\n   * Add event listener onClick to handle location selection from map.\n   * @category Map\n   */\n  componentDidMount() {\n    const { APIKey, onSetClickLocation } = this.props;\n    const center = [949042.143189, 5899715.591163];\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    this.markerVectorLayer = new VectorLayer({\n      zIndex: 1,\n      source: this.markerVectorSource,\n    });\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({});\n    this.routeVectorLayer = new VectorLayer({\n      zIndex: 0,\n      source: this.routeVectorSource,\n    });\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer],\n    });\n\n    const isItemInArray = (array, item) => {\n      for (let i = 0; i < array.length; i += 1) {\n        if (array[i][0] === item[0] && array[i][1] === item[1]) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    translate.on('translateend', evt => {\n      const {\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        featureIndex = isItemInArray(currentStops, id.slice().reverse());\n      }\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    this.map = new Map({\n      target: 'map',\n      interactions: defaultInteractions().extend([translate]),\n      view: new View({\n        projection: 'EPSG:3857',\n        center,\n        zoom: 6,\n      }),\n    });\n\n    const mbMap = new mapboxgl.Map({\n      style: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n      attributionControl: false,\n      boxZoom: false,\n      center: toLonLat(center),\n      container: this.map.getTargetElement(),\n      doubleClickZoom: false,\n      dragPan: false,\n      dragRotate: false,\n      interactive: false,\n      keyboard: false,\n      pitchWithRotate: false,\n      scrollZoom: false,\n      touchZoomRotate: false,\n    });\n\n    /* eslint-disable no-underscore-dangle */\n    const mbLayer = new Layer({\n      render: frameState => {\n        const canvas = mbMap.getCanvas();\n        const { viewState } = frameState;\n\n        const visible = mbLayer.getVisible();\n        canvas.style.display = visible ? 'block' : 'none';\n\n        const opacity = mbLayer.getOpacity();\n        canvas.style.opacity = opacity;\n\n        // adjust view parameters in mapbox\n        const { rotation } = viewState;\n        if (rotation) {\n          mbMap.rotateTo((-rotation * 180) / Math.PI, {\n            animate: false,\n          });\n        }\n        mbMap.jumpTo({\n          center: toLonLat(viewState.center),\n          zoom: viewState.zoom - 1,\n          animate: false,\n        });\n\n        if (mbMap._frame) {\n          mbMap._frame.cancel();\n          mbMap._frame = null;\n        }\n        mbMap._render();\n\n        return canvas;\n      },\n    });\n\n    [mbLayer, this.markerVectorLayer, this.routeVectorLayer].forEach(l =>\n      this.map.addLayer(l),\n    );\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStopsGeoJSON } = this.props;\n      // if one field empty or if a field is focused\n      if (\n        !currentStopsGeoJSON['0'] ||\n        !currentStopsGeoJSON['1'] ||\n        isFieldFocused\n      ) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n      this.map.forEachFeatureAtPixel(evt.pixel, feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          if (feature.get('name'))\n            name = `${feature.get('name')} - ${feature.get('country_code')}`;\n          else name = `${feature.get('id')[0]}, ${feature.get('id')[1]}`;\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n\n    if (currentMotChanged || currentStopsGeoJSONChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n\n        const coordinate = this.markerVectorSource\n          .getFeatures()[0]\n          .getGeometry()\n          .getCoordinates();\n        this.map.getView().animate({\n          center: coordinate,\n          duration: 500,\n        });\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = () => {\n    if (this.findRouteCancel) this.findRouteCancel();\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      onShowNotification,\n    } = this.props;\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `@${to4326(currentStopsGeoJSON[key].features[0].properties.id)}`,\n        );\n      } else {\n        // The item selected is a station from the stations API.\n        hops.push(`!${currentStopsGeoJSON[key].properties.id}`);\n      }\n    });\n    axios\n      .get(routingUrl, {\n        params: {\n          via: hops.join('|'),\n          mot: currentMot,\n          key: APIKey,\n          srs: '3857',\n        },\n        cancelToken: new this.FindRouteCancelToken(cancel => {\n          this.findRouteCancel = cancel;\n        }),\n      })\n      .then(\n        response => {\n          // A route was found, prepare to draw it.\n          this.routeVectorSource.clear();\n          this.routeVectorSource.addFeatures(\n            new GeoJSON().readFeatures(response.data),\n          );\n          this.routeVectorSource\n            .getFeatures()\n            .forEach(f => f.setStyle(lineStyleFunction(currentMot)));\n\n          this.map.getView().fit(this.routeVectorSource.getExtent(), {\n            size: this.map.getSize(),\n            duration: 500,\n            padding: [50, 50, 50, 50],\n          });\n        },\n        error => {\n          // No route was found.\n          if (error) onShowNotification(\"Couldn't find route\", 'error');\n        },\n      );\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const { hoveredStationOpen, hoveredStationName } = this.state;\n    return (\n      <>\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <div id=\"map\" className=\"MapComponent\" />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n  };\n};\n\nMapComponent.propTypes = {\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  APIKey: PropTypes.string.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nconst DEFAULT_MOTS = ['rail', 'bus', 'coach', 'foot'];\n\nconst OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n  'truck',\n];\n\nconst VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport default {\n  DEFAULT_MOTS,\n  OTHER_MOTS,\n  VALID_MOTS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3}>\n      <List component=\"nav\" aria-label=\"search results\">\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={`${searchResult.properties.code} - ${searchResult.properties.country_code}`}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={`${searchResult.properties.code} - ${searchResult.properties.country_code}`}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />;\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(index + 1)}\n            color=\"primary\"\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = <Room color=\"primary\" />;\n    searchFieldLabel = 'End';\n  } else {\n    fieldLeftIcon = <Adjust fontSize=\"small\" color=\"primary\" />;\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              color=\"secondary\"\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              onClick={() => addNewSearchFieldHandler(index + 1)}\n              color=\"primary\"\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      alignItems=\"flex-end\"\n      style={{\n        width: '100%',\n        padding: '0 20px',\n      }}\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize}>\n        <TextField\n          style={{ width: '100%' }}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n} from '../../store/actions/Map';\nimport './RoutingMenu.css';\nimport constants from '../../constants';\nimport { to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '25%',\n    width: '25%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  dropDownSelected: {\n    width: '25%',\n    backgroundColor: 'lightgrey',\n  },\n  checkbox: {\n    padding: '20px',\n  },\n}));\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({ mots, stationSearchUrl, APIKey }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { DEFAULT_MOTS, OTHER_MOTS } = constants;\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const { VALID_MOTS } = constants;\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n\n  const [currentMots] = useState(currentMotsVal);\n  const [currentMot, setCurrentMotState] = useState(currentMotsVal[0].name);\n  const [otherMots] = useState(otherMotsVal);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [showLoadingBar, setShowLoadingBar] = useState(false);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  const SearchCancelToken = axios.CancelToken;\n  let searchCancel = null;\n  useEffect(() => {\n    dispatch(setCurrentMot(currentMots[0].name));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot) => {\n    setCurrentMotState(newMot);\n    setCurrentSearchResults([]);\n\n    dispatch(setCurrentStopsGeoJSON({}));\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = indexToInsertAt => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n    dispatch(setCurrentStops(updatedCurrentStops));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n    const updatedCurrentStopsGeoJSON = {};\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (key !== indexToRemoveFrom.toString()) {\n        updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n      }\n    });\n    dispatch(setCurrentStops(updatedCurrentStops));\n\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setShowLoadingBar(false);\n      return;\n    }\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setShowLoadingBar(true);\n\n    if (searchCancel) {\n      // If a previous search request has been issues and not completed yet, cancel it.\n      searchCancel();\n    }\n    axios\n      .get(stationSearchUrl, {\n        params: {\n          q: event.target.value,\n          key: APIKey,\n          mots: searchMotOnly ? currentMot : '',\n        },\n        cancelToken: new SearchCancelToken(cancel => {\n          searchCancel = cancel;\n        }),\n      })\n      .then(\n        response => {\n          const searchResults = [];\n          response.data.features.forEach(singleResult => {\n            // Search results from the API\n            if (singleResult.properties.mot[currentMot])\n              searchResults.push(singleResult);\n          });\n          if (\n            response.data.features.length === 0 ||\n            searchResults.length === 0\n          ) {\n            // No results for the given query\n            // onShowNotification(\"Couldn't find stations\", 'warning');\n            dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n          }\n          setCurrentSearchResults(searchResults);\n          setShowLoadingBar(false);\n        },\n        error => {\n          setShowLoadingBar(false);\n          if (!axios.isCancel(error))\n            dispatch(\n              showNotification('Error while searching for stations', 'error'),\n            );\n        },\n      );\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(undefined);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl\n            className={\n              currentMot === currentOtherMot\n                ? classes.dropDownSelected\n                : classes.dropDown\n            }\n          >\n            <InputLabel id=\"rd-other-mot-label\">Other MOTs</InputLabel>\n            <Select\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot}\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          {currentStops.map((singleStop, index) => {\n            return (\n              <SearchField\n                // eslint-disable-next-line react/no-array-index-key\n                key={`searchField-${index}`}\n                index={index}\n                addNewSearchFieldHandler={addNewSearchFieldHandler}\n                currentStops={currentStops}\n                removeSearchFieldHandler={removeSearchFieldHandler}\n                searchStopsHandler={searchStopsHandler}\n                singleStop={singleStop}\n                processHighlightedResultSelectHandler={\n                  processHighlightedResultSelectHandler\n                }\n                onFieldFocusHandler={onFieldFocusHandler}\n              />\n            );\n          })}\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => setSearchMotOnly(!searchMotOnly)}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React, { useState, useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport RoutingMenu from '../RoutingMenu';\nimport NotificationHandler from '../NotificationHandler';\nimport constants from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: constants.VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/v1/',\n  stationSearchUrl: 'https://api.geops.io/stops/v1/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const [apiKey, setApiKey] = useState(null);\n\n  useEffect(() => {\n    fetch('https://developer.geops.io/publickey')\n      .then(response => response.json())\n      .then(data => {\n        setApiKey(data.key);\n      })\n      .catch(() => {\n        console.error('Request to get the apiKey failed');\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!apiKey) {\n    return null;\n  }\n  return (\n    <Provider store={store}>\n      <RoutingMenu\n        mots={mots}\n        stationSearchUrl={stationSearchUrl}\n        APIKey={apiKey}\n      />\n      <MapComponent mots={mots} routingUrl={routingUrl} APIKey={apiKey} />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}