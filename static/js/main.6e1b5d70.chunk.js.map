{"version":3,"sources":["store/reducers/Map.jsx","store/actions/actionTypes.js","store/store.js","config/styleConfig.js","store/prop-types.js","constants.js","utils.jsx","store/actions/Map.jsx","Components/MapComponent/MapComponent.jsx","Components/MapComponent/index.js","Components/SearchResults/SearchResults.jsx","Components/SearchResults/index.js","Components/SearchField/SearchField.jsx","Components/SearchField/index.js","Components/RoutingMenu/RoutingMenu.jsx","Components/RoutingMenu/index.js","Components/NotificationHandler/NotificationHandler.jsx","Components/NotificationHandler/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","currentMot","currentStops","currentStopsGeoJSON","clickLocation","notificationMessage","notificationType","isFieldFocused","setCurrentStops","state","action","updatedState","setCurrentStopsGeoJSON","setCurrentMot","setClickLocation","showNotification","setIsFieldFocused","reducer","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","MapReducer","store","createStore","applyMiddleware","thunk","railLineStyle","Style","stroke","Stroke","color","lineDash","width","busLineStyle","pedestrianLineStyle","carLineStyle","othersLineStyle","railPointStyle","image","Circle","radius","fill","Fill","pedestrianPointStyle","carPointStyle","busPointStyle","othersPointStyle","coordinates","PropTypes","arrayOf","number","isRequired","geometry","shape","string","feature","properties","id","oneOfType","currentStop","features","DEFAULT_MOTS","OTHER_MOTS","VALID_MOTS","WGS84_MOTS","findMotIcon","name","result","capitalName","charAt","toUpperCase","slice","title","to4326","coord","decimal","transform","map","c","toFixed","MapComponent","props","drawNewRoute","findRouteCancel","hops","routingUrl","APIKey","onShowNotification","Object","keys","forEach","key","push","reverse","axios","get","params","via","join","mot","srs","cancelToken","FindRouteCancelToken","cancel","then","response","routeVectorSource","clear","format","includes","GeoJSON","dataProjection","featureProjection","addFeatures","readFeatures","data","getFeatures","f","setStyle","getView","fit","getExtent","size","getSize","duration","padding","error","CancelToken","hoveredFeature","hoveredStationOpen","hoveredStationName","this","onSetClickLocation","center","markerVectorSource","VectorSource","markerVectorLayer","VectorLayer","zIndex","source","routeVectorLayer","translate","Translate","layers","on","evt","featureIndex","onSetCurrentStops","onSetCurrentStopsGeoJSON","newCurrentStops","_","clone","newCurentStopsGeoJSON","getArray","getProperties","indexOf","array","item","i","length","isItemInArray","coordinate","Map","target","interactions","defaultInteractions","extend","view","View","projection","zoom","mbMap","mapboxgl","style","attributionControl","boxZoom","toLonLat","container","getTargetElement","doubleClickZoom","dragPan","dragRotate","interactive","keyboard","pitchWithRotate","scrollZoom","touchZoomRotate","mbLayer","Layer","render","frameState","canvas","getCanvas","viewState","visible","getVisible","display","opacity","getOpacity","rotation","rotateTo","Math","PI","animate","jumpTo","_frame","_render","l","addLayer","setState","forEachFeatureAtPixel","pixel","getGeometry","getType","prevProps","currentMotChanged","currentStopsGeoJSONChanged","getCoordinates","Snackbar","anchorOrigin","vertical","horizontal","open","message","className","Component","connect","dispatch","actions","SearchResults","currentSearchResults","processClickedResultHandler","Paper","square","elevation","List","component","aria-label","searchResult","index","ListItem","onClick","button","nextId","ListItemIcon","ListItemText","primary","secondary","code","country_code","selected","defaultProps","useStyles","makeStyles","gridContainer","boxSizing","fieldWrapper","maxWidth","buttonWrapper","SearchField","val","classes","useDispatch","addNewSearchFieldHandler","removeSearchFieldHandler","searchStopsHandler","singleStop","processHighlightedResultSelectHandler","onFieldFocusHandler","fieldLeftIcon","searchFieldSize","searchFieldLabel","fieldRightIcon","fontSize","Grid","xs","Tooltip","IconButton","spacing","alignItems","TextField","label","onChange","e","value","Array","isArray","onKeyDown","onFocus","onBlur","setTimeout","event","select","TabPanel","children","Typography","role","hidden","aria-labelledby","tabs","tab","minWidth","dropDown","backgroundColor","dropDownSelected","checkbox","abortController","AbortController","RoutingMenu","mots","stationSearchUrl","validateMots","motsArray","validationMots","currentMotsArray","filter","providedMot","requestedMot","find","icon","currentMotsVal","otherMotsVal","useSelector","useState","currentMots","setCurrentMotState","otherMots","setCurrentSearchResults","React","searchMotOnly","setSearchMotOnly","focusedFieldIndex","setFocusedFieldIndex","showLoadingBar","setShowLoadingBar","undefined","currentOtherMot","setCurrentOtherMot","useEffect","updateCurrentStops","updatedCurrentStops","updatedCurrentStopsGeoJSON","updatedFocusedFieldIndex","updateFieldOnMapClick","tempGeoJSON","handleMotChange","newMot","fieldIndex","indexToInsertAt","splice","indexToRemoveFrom","toString","abort","signal","reqUrl","fetch","json","searchResults","singleResult","catch","err","console","warn","firstSearchResult","updateCurrentSearchResults","Tabs","indicatorColor","textColor","singleMot","Tab","FormControl","InputLabel","Select","labelId","MenuItem","Checkbox","checked","inputProps","LinearProgress","NotificationHandler","handleOpen","handleClose","autoHideDuration","onClose","Alert","severity","variant","App","apiKey","setApiKey","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e1b5d70.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  currentMot: 'bus',\n  currentStops: ['', ''],\n  currentStopsGeoJSON: {},\n  clickLocation: null,\n  notificationMessage: '',\n  notificationType: 'info',\n  isFieldFocused: false,\n};\n\nconst setCurrentStops = (state, action) => {\n  const updatedState = {\n    currentStops: action.currentStops,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentStopsGeoJSON = (state, action) => {\n  const updatedState = {\n    currentStopsGeoJSON: action.currentStopsGeoJSON,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setCurrentMot = (state, action) => {\n  const updatedState = {\n    currentMot: action.currentMot,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setClickLocation = (state, action) => {\n  const updatedState = {\n    clickLocation: action.clickLocation,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst showNotification = (state, action) => {\n  const updatedState = {\n    notificationMessage: action.notificationMessage,\n    notificationType: action.notificationType,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst setIsFieldFocused = (state, action) => {\n  const updatedState = {\n    isFieldFocused: action.isFieldFocused,\n  };\n  return {\n    ...state,\n    ...updatedState,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_STOPS:\n      return setCurrentStops(state, action);\n    case actionTypes.SET_CURRENT_STOPS_GEOJSON:\n      return setCurrentStopsGeoJSON(state, action);\n    case actionTypes.SET_CURRENT_MOT:\n      return setCurrentMot(state, action);\n    case actionTypes.SET_CLICK_LOCATION:\n      return setClickLocation(state, action);\n    case actionTypes.SHOW_NOTIFICATION:\n      return showNotification(state, action);\n    case actionTypes.SET_IS_FIELD_FOCUSED:\n      return setIsFieldFocused(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_CURRENT_STOPS = 'SET_CURRENT_STOPS';\nexport const SET_CURRENT_STOPS_GEOJSON = 'SET_CURRENT_STOPS_GEOJSON';\nexport const SET_CURRENT_MOT = 'SET_CURRENT_MOT';\nexport const SET_CLICK_LOCATION = 'SET_CLICK_LOCATION';\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\nexport const SET_IS_FIELD_FOCUSED = 'SET_IS_FIELD_FOCUSED';\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport MapReducer from './reducers/Map';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ MapReducer });\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { Style, Circle, Stroke, Fill } from 'ol/style';\n\nconst railLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      lineDash: [10, 10],\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'red',\n      lineDash: [10, 10],\n      width: 3,\n    }),\n  }),\n];\n\nconst busLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'yellow',\n      width: 3,\n    }),\n  }),\n];\n\nconst pedestrianLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'rgb(173, 216, 230)',\n      width: 3,\n    }),\n  }),\n];\n\nconst carLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      lineDash: [0.5, 10],\n      width: 5,\n    }),\n  }),\n];\n\nconst othersLineStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: 'black',\n      width: 5,\n    }),\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: 'blue',\n      width: 3,\n    }),\n  }),\n];\n\nconst railPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'black', width: 2 }),\n  }),\n});\n\nconst pedestrianPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'rgb(173, 216, 230)' }),\n  }),\n});\n\nconst carPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'black' }),\n  }),\n});\n\nconst busPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'yellow' }),\n    stroke: new Stroke({ color: 'black', width: 2 }),\n  }),\n});\n\nconst othersPointStyle = new Style({\n  image: new Circle({\n    radius: 7,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'black', width: 2 }),\n  }),\n});\n\nconst pointStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railPointStyle;\n  }\n  if (mot === 'bus') {\n    return busPointStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianPointStyle;\n  }\n  if (mot === 'car' || mot === 'truck') {\n    return carPointStyle;\n  }\n  return othersPointStyle;\n};\n\nconst lineStyleFunction = mot => {\n  if (mot === 'rail') {\n    return railLineStyle;\n  }\n  if (mot === 'bus') {\n    return busLineStyle;\n  }\n  if (mot === 'foot') {\n    return pedestrianLineStyle;\n  }\n  if (mot === 'car' || mot === 'truck') {\n    return carLineStyle;\n  }\n  return othersLineStyle;\n};\n\nexport { lineStyleFunction, pointStyleFunction };\n","import PropTypes from 'prop-types';\n\nconst coordinates = PropTypes.arrayOf(PropTypes.number.isRequired).isRequired;\n\nconst geometry = PropTypes.shape({\n  coordinates,\n  type: PropTypes.string.isRequired,\n});\n\nconst feature = PropTypes.shape({\n  geometry,\n  properties: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    type: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst currentStop = PropTypes.shape({\n  features: PropTypes.shape({\n    '0': PropTypes.oneOfType([feature, coordinates]),\n    '1': PropTypes.oneOfType([feature, coordinates]),\n  }),\n  type: PropTypes.string.isRequired,\n});\n\nconst propTypeCurrentStopsGeoJSON = PropTypes.shape({\n  '0': currentStop,\n  '1': currentStop,\n});\n\nconst propTypeCurrentStops = PropTypes.arrayOf(\n  PropTypes.oneOfType([PropTypes.string.isRequired, coordinates]),\n);\n\nexport { propTypeCurrentStops, propTypeCurrentStopsGeoJSON };\n","/**\n * The valid supported mots by the application\n * @type {string[]}\n * @category Constants\n */\nexport const DEFAULT_MOTS = ['rail', 'bus', 'coach', 'foot'];\n\nexport const OTHER_MOTS = [\n  'tram',\n  'subway',\n  'gondola',\n  'funicular',\n  'ferry',\n  'car',\n  'truck',\n];\n\nexport const VALID_MOTS = [...DEFAULT_MOTS, ...OTHER_MOTS];\n\nexport const WGS84_MOTS = ['foot', 'car', 'truck'];\n","import DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport DirectionsRailwayIcon from '@material-ui/icons/DirectionsRailway';\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk';\nimport React from 'react';\nimport { transform } from 'ol/proj';\n\n/**\n * Map each mot to an icon\n * @param {string} name The name of the mot, ex('bus' or 'train')\n * @returns {Icon} MotIcon\n * @category Utils\n */\nexport const findMotIcon = name => {\n  let result = null;\n  const capitalName = name.charAt(0).toUpperCase() + name.slice(1);\n  switch (name) {\n    case 'rail':\n      result = <DirectionsRailwayIcon />;\n      break;\n    case 'foot':\n      result = <DirectionsWalkIcon />;\n      break;\n    default:\n      result = <DirectionsBusIcon />;\n      break;\n  }\n  return <span title={capitalName}>{result}</span>;\n};\n\nexport const to4326 = (coord, decimal = 4) => {\n  return transform(coord, 'EPSG:3857', 'EPSG:4326').map(c =>\n    c.toFixed(decimal),\n  );\n};\n\nexport const to3857 = coord => {\n  return transform(coord, 'EPSG:4326', 'EPSG:3857');\n};\n","import * as actionTypes from './actionTypes';\n\nexport const setCurrentStops = currentStops => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS,\n    currentStops,\n  };\n};\n\nexport const setCurrentStopsGeoJSON = currentStopsGeoJSON => {\n  return {\n    type: actionTypes.SET_CURRENT_STOPS_GEOJSON,\n    currentStopsGeoJSON,\n  };\n};\n\nexport const setCurrentMot = currentMot => {\n  return {\n    type: actionTypes.SET_CURRENT_MOT,\n    currentMot,\n  };\n};\n\nexport const setClickLocation = clickLocation => {\n  return {\n    type: actionTypes.SET_CLICK_LOCATION,\n    clickLocation,\n  };\n};\n\nexport const showNotification = (notificationMessage, notificationType) => {\n  return {\n    type: actionTypes.SHOW_NOTIFICATION,\n    notificationMessage,\n    notificationType,\n  };\n};\n\nexport const setIsFieldFocused = isFieldFocused => {\n  return {\n    type: actionTypes.SET_IS_FIELD_FOCUSED,\n    isFieldFocused,\n  };\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Map, View } from 'ol';\nimport { toLonLat } from 'ol/proj';\nimport { Layer, Vector as VectorLayer } from 'ol/layer';\nimport mapboxgl from 'mapbox-gl';\nimport _ from 'lodash/core';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Vector as VectorSource } from 'ol/source';\nimport { defaults as defaultInteractions, Translate } from 'ol/interaction';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {\n  lineStyleFunction,\n  pointStyleFunction,\n} from '../../config/styleConfig';\nimport {\n  propTypeCurrentStops,\n  propTypeCurrentStopsGeoJSON,\n} from '../../store/prop-types';\nimport { WGS84_MOTS } from '../../constants';\nimport { to4326 } from '../../utils';\nimport './MapComponent.css';\nimport * as actions from '../../store/actions';\n\n/**\n * The map props\n * @typedef MapComponentProps\n * @type {props}\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string} routingUrl The API routing url to be used for navigation.\n * @property {string} currentMot The current selected mot by user, example 'bus'.\n * @property {Object} currentStopsGeoJSON The current stops defined by user in geojson format inside a dictionary, key is the stop index(order) and the value is the geoJSON itself.\n * @property {function} onShowNotification A store action that can be dispatched, takes the notification message and type as arguments.\n * @property {function} onSetClickLocation A store action that can be dispatched, takes the clicked location on map array of [long,lat] and stores it in the store.\n * @category Props\n */\n\n/**\n * The only true map that shows inside the application.\n * @category Map\n */\nclass MapComponent extends Component {\n  /**\n   * Default constructor, gets called automatically upon initialization.\n   * @param {...MapComponentProps} props Props received so that the component can function properly.\n   * @category Map\n   */\n  constructor(props) {\n    super(props);\n    this.FindRouteCancelToken = axios.CancelToken;\n    this.findRouteCancel = null;\n    this.hoveredFeature = null;\n    this.state = {\n      hoveredStationOpen: false,\n      hoveredStationName: '',\n    };\n  }\n\n  /**\n   * Create Openlayers map (source, view, layer, etc...).\n   * Add event listener onClick to handle location selection from map.\n   * @category Map\n   */\n  componentDidMount() {\n    const { APIKey, onSetClickLocation } = this.props;\n    const center = [949042.143189, 5899715.591163];\n\n    // Define stop vectorLayer.\n    this.markerVectorSource = new VectorSource({});\n    this.markerVectorLayer = new VectorLayer({\n      zIndex: 1,\n      source: this.markerVectorSource,\n    });\n    // Define route vectorLayer.\n    this.routeVectorSource = new VectorSource({});\n    this.routeVectorLayer = new VectorLayer({\n      zIndex: 0,\n      source: this.routeVectorSource,\n    });\n\n    const translate = new Translate({\n      layers: [this.markerVectorLayer],\n    });\n\n    const isItemInArray = (array, item) => {\n      for (let i = 0; i < array.length; i += 1) {\n        if (array[i][0] === item[0] && array[i][1] === item[1]) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    translate.on('translateend', evt => {\n      const {\n        currentStops,\n        currentStopsGeoJSON,\n        onSetCurrentStops,\n        onSetCurrentStopsGeoJSON,\n      } = this.props;\n      const newCurrentStops = _.clone(currentStops);\n      const newCurentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n\n      const { name, id } = evt.features.getArray()[0].getProperties();\n      let featureIndex;\n      if (name) {\n        featureIndex = currentStops.indexOf(name);\n      } else {\n        featureIndex = isItemInArray(currentStops, id.slice().reverse());\n      }\n      newCurrentStops[featureIndex] = evt.coordinate;\n      newCurentStopsGeoJSON[featureIndex] = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              id: evt.coordinate.slice().reverse(),\n              type: 'coordinates',\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: evt.coordinate,\n            },\n          },\n        ],\n      };\n      onSetCurrentStops(newCurrentStops);\n      onSetCurrentStopsGeoJSON(newCurentStopsGeoJSON);\n    });\n\n    this.map = new Map({\n      target: 'map',\n      interactions: defaultInteractions().extend([translate]),\n      view: new View({\n        projection: 'EPSG:3857',\n        center,\n        zoom: 6,\n      }),\n    });\n\n    const mbMap = new mapboxgl.Map({\n      style: `https://maps.geops.io/styles/travic/style.json?key=${APIKey}`,\n      attributionControl: false,\n      boxZoom: false,\n      center: toLonLat(center),\n      container: this.map.getTargetElement(),\n      doubleClickZoom: false,\n      dragPan: false,\n      dragRotate: false,\n      interactive: false,\n      keyboard: false,\n      pitchWithRotate: false,\n      scrollZoom: false,\n      touchZoomRotate: false,\n    });\n\n    /* eslint-disable no-underscore-dangle */\n    const mbLayer = new Layer({\n      render: frameState => {\n        const canvas = mbMap.getCanvas();\n        const { viewState } = frameState;\n\n        const visible = mbLayer.getVisible();\n        canvas.style.display = visible ? 'block' : 'none';\n\n        const opacity = mbLayer.getOpacity();\n        canvas.style.opacity = opacity;\n\n        // adjust view parameters in mapbox\n        const { rotation } = viewState;\n        if (rotation) {\n          mbMap.rotateTo((-rotation * 180) / Math.PI, {\n            animate: false,\n          });\n        }\n        mbMap.jumpTo({\n          center: toLonLat(viewState.center),\n          zoom: viewState.zoom - 1,\n          animate: false,\n        });\n\n        if (mbMap._frame) {\n          mbMap._frame.cancel();\n          mbMap._frame = null;\n        }\n        mbMap._render();\n\n        return canvas;\n      },\n    });\n\n    [mbLayer, this.markerVectorLayer, this.routeVectorLayer].forEach(l =>\n      this.map.addLayer(l),\n    );\n\n    this.map.on('singleclick', evt => {\n      const { isFieldFocused, currentStopsGeoJSON } = this.props;\n      // if one field empty or if a field is focused\n      if (\n        !currentStopsGeoJSON['0'] ||\n        !currentStopsGeoJSON['1'] ||\n        isFieldFocused\n      ) {\n        onSetClickLocation(evt.coordinate);\n      }\n    });\n    this.map.on('pointermove', evt => {\n      if (this.hoveredFeature) {\n        this.hoveredFeature = null;\n        this.setState({ hoveredStationOpen: false, hoveredStationName: '' });\n      }\n      this.map.forEachFeatureAtPixel(evt.pixel, feature => {\n        if (feature.getGeometry().getType() === 'Point') {\n          this.hoveredFeature = feature;\n          let name = '';\n          if (feature.get('name'))\n            name = `${feature.get('name')} - ${feature.get('country_code')}`;\n          else name = `${feature.get('id')[0]}, ${feature.get('id')[1]}`;\n          this.setState({\n            hoveredStationOpen: true,\n            hoveredStationName: name,\n          });\n        }\n        return true;\n      });\n    });\n  }\n\n  /**\n   * Perform the necessary actions when receiving updated props.\n   * If new stops are received, then remove any existing stops/routes and draw those stops/routes.\n   * @category Map\n   */\n  componentDidUpdate(prevProps) {\n    const { currentStopsGeoJSON, currentMot } = this.props;\n    const currentMotChanged = currentMot && currentMot !== prevProps.currentMot;\n    const currentStopsGeoJSONChanged =\n      currentStopsGeoJSON &&\n      currentStopsGeoJSON !== prevProps.currentStopsGeoJSON;\n\n    if (currentMotChanged || currentStopsGeoJSONChanged) {\n      this.markerVectorSource.clear();\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        this.markerVectorSource.addFeatures(\n          new GeoJSON().readFeatures(currentStopsGeoJSON[key]),\n        );\n        this.markerVectorSource\n          .getFeatures()\n          .forEach(f => f.setStyle(pointStyleFunction(currentMot)));\n\n        const coordinate = this.markerVectorSource\n          .getFeatures()[0]\n          .getGeometry()\n          .getCoordinates();\n        this.map.getView().animate({\n          center: coordinate,\n          duration: 500,\n        });\n      });\n      // Remove the old route if exists\n      this.routeVectorSource.clear();\n      // Draw a new route if more than 1 stop is defined\n      if (Object.keys(currentStopsGeoJSON).length > 1) {\n        this.drawNewRoute();\n      }\n    }\n  }\n\n  /**\n   * After receiving the updated stops, send a call to the routingAPI to find a suitable route between\n   * two points/stations, if a route is found, it's returned and drawn to the map.\n   * @category Map\n   */\n  drawNewRoute = () => {\n    if (this.findRouteCancel) this.findRouteCancel();\n    const hops = [];\n    const {\n      currentStopsGeoJSON,\n      routingUrl,\n      currentMot,\n      APIKey,\n      onShowNotification,\n    } = this.props;\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (currentStopsGeoJSON[key].features) {\n        // If the current item is a point selected on the map, not a station.\n        hops.push(\n          `@${to4326(currentStopsGeoJSON[key].features[0].geometry.coordinates)\n            .slice()\n            .reverse()}`,\n        );\n      } else {\n        // The item selected is a station from the stations API.\n        hops.push(`!${currentStopsGeoJSON[key].properties.name}`);\n      }\n    });\n    axios\n      .get(routingUrl, {\n        params: {\n          via: hops.join('|'),\n          mot: currentMot,\n          key: APIKey,\n          srs: '3857',\n        },\n        cancelToken: new this.FindRouteCancelToken(cancel => {\n          this.findRouteCancel = cancel;\n        }),\n      })\n      .then(\n        response => {\n          // A route was found, prepare to draw it.\n          this.routeVectorSource.clear();\n          const format = WGS84_MOTS.includes(currentMot)\n            ? new GeoJSON({\n                dataProjection: 'EPSG:4326',\n                featureProjection: 'EPSG:3857',\n              })\n            : new GeoJSON();\n          this.routeVectorSource.addFeatures(\n            format.readFeatures(response.data),\n          );\n          this.routeVectorSource\n            .getFeatures()\n            .forEach(f => f.setStyle(lineStyleFunction(currentMot)));\n\n          this.map.getView().fit(this.routeVectorSource.getExtent(), {\n            size: this.map.getSize(),\n            duration: 500,\n            padding: [50, 50, 50, 50],\n          });\n        },\n        error => {\n          // No route was found.\n          if (error) onShowNotification(\"Couldn't find route\", 'error');\n        },\n      );\n  };\n\n  /**\n   * Render the map component to the dom\n   * @category Map\n   */\n  render() {\n    const { hoveredStationOpen, hoveredStationName } = this.state;\n    return (\n      <>\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          open={hoveredStationOpen}\n          message={hoveredStationName}\n        />\n        <div id=\"map\" className=\"MapComponent\" />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentMot: state.MapReducer.currentMot,\n    currentStops: state.MapReducer.currentStops,\n    currentStopsGeoJSON: state.MapReducer.currentStopsGeoJSON,\n    isFieldFocused: state.MapReducer.isFieldFocused,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetCurrentStops: currentStops =>\n      dispatch(actions.setCurrentStops(currentStops)),\n    onSetCurrentStopsGeoJSON: currentStopsGeoJSON =>\n      dispatch(actions.setCurrentStopsGeoJSON(currentStopsGeoJSON)),\n    onSetClickLocation: clickLocation =>\n      dispatch(actions.setClickLocation(clickLocation)),\n    onShowNotification: (notificationMessage, notificationType) =>\n      dispatch(actions.showNotification(notificationMessage, notificationType)),\n  };\n};\n\nMapComponent.propTypes = {\n  onSetClickLocation: PropTypes.func.isRequired,\n  onShowNotification: PropTypes.func.isRequired,\n  onSetCurrentStops: PropTypes.func.isRequired,\n  onSetCurrentStopsGeoJSON: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops.isRequired,\n  currentStopsGeoJSON: propTypeCurrentStopsGeoJSON.isRequired,\n  isFieldFocused: PropTypes.bool.isRequired,\n  APIKey: PropTypes.string.isRequired,\n  routingUrl: PropTypes.string.isRequired,\n  currentMot: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n","import MapComponent from './MapComponent';\n\nexport default MapComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport MapMarkerIcon from '@material-ui/icons/LocationOn';\n\n/**\n * The component that displays the station search results\n * @category RoutingMenu\n */\nfunction SearchResults(props) {\n  const { currentSearchResults, processClickedResultHandler } = props;\n  if (currentSearchResults.length === 0) {\n    return null;\n  }\n  return (\n    <Paper square elevation={3}>\n      <List component=\"nav\" aria-label=\"search results\">\n        {currentSearchResults.map((searchResult, index) => {\n          if (index !== 0) {\n            return (\n              <ListItem\n                onClick={() => {\n                  processClickedResultHandler(searchResult);\n                }}\n                button\n                key={nextId()}\n              >\n                <ListItemIcon>\n                  <MapMarkerIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={searchResult.properties.name}\n                  secondary={`${searchResult.properties.code} - ${searchResult.properties.country_code}`}\n                />\n              </ListItem>\n            );\n          }\n          // First item\n          return (\n            <ListItem\n              onClick={() => processClickedResultHandler(searchResult)}\n              button\n              selected\n              key={`searchResult-${searchResult.properties.name}`}\n            >\n              <ListItemIcon>\n                <MapMarkerIcon />\n              </ListItemIcon>\n              <ListItemText\n                primary={searchResult.properties.name}\n                secondary={`${searchResult.properties.code} - ${searchResult.properties.country_code}`}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n}\n\nSearchResults.propTypes = {\n  currentSearchResults: PropTypes.arrayOf(PropTypes.object),\n  processClickedResultHandler: PropTypes.func.isRequired,\n};\n\nSearchResults.defaultProps = {\n  currentSearchResults: [],\n};\n\nexport default SearchResults;\n","import SearchResults from './SearchResults';\n\nexport default SearchResults;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Adjust from '@material-ui/icons/Adjust';\nimport Room from '@material-ui/icons/Room';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport { propTypeCurrentStops } from '../../store/prop-types';\nimport { to4326 } from '../../utils';\nimport { setIsFieldFocused } from '../../store/actions/Map';\n\nconst useStyles = makeStyles(() => ({\n  gridContainer: {\n    width: '100%',\n    padding: '0px 0px 0px 20px',\n    boxSizing: 'unset',\n  },\n  button: {\n    color: 'black',\n  },\n  fieldWrapper: {\n    maxWidth: '75%',\n  },\n  buttonWrapper: {\n    maxWidth: '26px',\n  },\n}));\n\n/**\n * The component that displays the search field(s)\n * @category RoutingMenu\n */\nfunction SearchField(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    index,\n    addNewSearchFieldHandler,\n    currentStops,\n    removeSearchFieldHandler,\n    searchStopsHandler,\n    singleStop,\n    processHighlightedResultSelectHandler,\n    onFieldFocusHandler,\n  } = props;\n  let fieldLeftIcon = null;\n  let searchFieldSize = 10;\n  let searchFieldLabel = '';\n  let fieldRightIcon = null;\n\n  const formatSingleStop = val => (Array.isArray(val) ? to4326(val) : val);\n\n  if (index === 0) {\n    // Start station field\n    fieldLeftIcon = <RadioButtonCheckedIcon fontSize=\"small\" color=\"primary\" />;\n    searchFieldLabel = 'Start';\n    fieldRightIcon = (\n      <Grid item xs={1} className={classes.buttonWrapper}>\n        <Tooltip title=\"Add Hop\">\n          <IconButton\n            onClick={() => addNewSearchFieldHandler(index + 1)}\n            className={classes.button}\n            aria-label=\"Add Hop\"\n            size=\"small\"\n          >\n            <AddCircleOutlineIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    );\n  } else if (index === currentStops.length - 1) {\n    fieldLeftIcon = <Room color=\"primary\" />;\n    searchFieldLabel = 'End';\n  } else {\n    fieldLeftIcon = <Adjust fontSize=\"small\" color=\"primary\" />;\n    searchFieldSize = 9;\n    searchFieldLabel = 'Hop';\n    fieldRightIcon = (\n      <>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Add Hop\">\n            <IconButton\n              onClick={() => addNewSearchFieldHandler(index + 1)}\n              className={classes.button}\n              aria-label=\"addHop\"\n              size=\"small\"\n            >\n              <AddCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={1} className={classes.buttonWrapper}>\n          <Tooltip title=\"Remove Hop\">\n            <IconButton\n              onClick={() => removeSearchFieldHandler(index)}\n              className={classes.button}\n              aria-label=\"removeHop\"\n              size=\"small\"\n            >\n              <RemoveCircleOutlineIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </>\n    );\n  }\n  return (\n    <Grid\n      container\n      spacing={1}\n      className={classes.gridContainer}\n      alignItems=\"flex-end\"\n    >\n      <Grid item xs={1}>\n        {fieldLeftIcon}\n      </Grid>\n      <Grid item xs={searchFieldSize} className={classes.fieldWrapper}>\n        <TextField\n          style={{\n            width: '100%',\n          }}\n          label={searchFieldLabel}\n          color=\"primary\"\n          onChange={e => searchStopsHandler(e, index)}\n          value={formatSingleStop(singleStop)}\n          onKeyDown={processHighlightedResultSelectHandler}\n          onFocus={() => {\n            dispatch(setIsFieldFocused(true));\n            onFieldFocusHandler(index);\n          }}\n          onBlur={() =>\n            setTimeout(() => {\n              dispatch(setIsFieldFocused(false));\n            }, 500)\n          }\n          onClick={event => {\n            if (event.target.select) {\n              event.target.select();\n            }\n          }}\n        />\n      </Grid>\n      {fieldRightIcon}\n    </Grid>\n  );\n}\n\nSearchField.propTypes = {\n  index: PropTypes.number.isRequired,\n  addNewSearchFieldHandler: PropTypes.func.isRequired,\n  currentStops: propTypeCurrentStops,\n  removeSearchFieldHandler: PropTypes.func.isRequired,\n  searchStopsHandler: PropTypes.func.isRequired,\n  singleStop: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n  ]),\n  processHighlightedResultSelectHandler: PropTypes.func.isRequired,\n  onFieldFocusHandler: PropTypes.func.isRequired,\n};\n\nSearchField.defaultProps = {\n  currentStops: [],\n  singleStop: '',\n};\n\nexport default SearchField;\n","import SearchField from './SearchField';\n\nexport default SearchField;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport _ from 'lodash/core';\nimport {\n  setCurrentStops,\n  setCurrentStopsGeoJSON,\n  setCurrentMot,\n  showNotification,\n  setIsFieldFocused,\n} from '../../store/actions/Map';\nimport './RoutingMenu.css';\nimport { VALID_MOTS, DEFAULT_MOTS, OTHER_MOTS } from '../../constants';\nimport { to3857, findMotIcon } from '../../utils';\nimport SearchResults from '../SearchResults';\nimport SearchField from '../SearchField';\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={nextId()}\n      aria-labelledby={`simple-tab-${index}`}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}\n\n/**\n * The routing menu props\n * @typedef RoutingMenuProps\n * @type {props}\n * @property {string} stationSearchUrl The station search API used for searching.\n * @property {string} APIKey key obtained from geOps that enables you to used the previous API services.\n * @property {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @property {LongLat} clickLocation The location clicked by the user in the form of [long,lat].\n * @category Props\n */\n\nconst useStyles = makeStyles(() => ({\n  tabs: {\n    width: '75%',\n  },\n  tab: {\n    minWidth: '25%',\n    width: '25%',\n  },\n  dropDown: {\n    width: '25%',\n    backgroundColor: 'white',\n  },\n  dropDownSelected: {\n    width: '25%',\n    backgroundColor: 'lightgrey',\n  },\n  checkbox: {\n    padding: '20px',\n  },\n}));\n\nlet abortController = new AbortController();\n\n/**\n * The routing menu that controls station search\n * @category RoutingMenu\n */\nfunction RoutingMenu({ mots, stationSearchUrl, APIKey }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /**\n   * Validate the mots provided from the props, then retrieve the icons for the valid ones.\n   * @param mots The provided mots\n   * @returns {Array} The valid mots with their icons\n   * @category RoutingMenu\n   */\n  const validateMots = (motsArray, validationMots) => {\n    const currentMotsArray = [];\n\n    motsArray\n      .filter(mot => {\n        return validationMots.includes(mot);\n      })\n      .forEach(providedMot => {\n        const requestedMot = validationMots.find(mot => mot === providedMot);\n        if (requestedMot) {\n          currentMotsArray.push({\n            name: requestedMot,\n            icon: findMotIcon(requestedMot),\n          });\n        }\n      });\n    if (currentMotsArray.length === 0) {\n      currentMotsArray.push({\n        name: VALID_MOTS[0],\n        icon: findMotIcon(VALID_MOTS[0]),\n      });\n    }\n    return currentMotsArray;\n  };\n\n  const currentMotsVal = validateMots(mots, DEFAULT_MOTS);\n  const otherMotsVal = validateMots(mots, OTHER_MOTS);\n\n  const clickLocation = useSelector(state => state.MapReducer.clickLocation);\n  const currentStops = useSelector(state => state.MapReducer.currentStops);\n  const currentStopsGeoJSON = useSelector(\n    state => state.MapReducer.currentStopsGeoJSON,\n  );\n\n  const [currentMots] = useState(currentMotsVal);\n  const [currentMot, setCurrentMotState] = useState(currentMotsVal[0].name);\n  const [otherMots] = useState(otherMotsVal);\n  const [currentSearchResults, setCurrentSearchResults] = useState([]);\n  const [searchMotOnly, setSearchMotOnly] = React.useState(true);\n  const [focusedFieldIndex, setFocusedFieldIndex] = useState(0);\n  const [showLoadingBar, setShowLoadingBar] = useState(false);\n  const [currentOtherMot, setCurrentOtherMot] = useState(undefined);\n\n  useEffect(() => {\n    dispatch(setCurrentMot(currentMots[0].name));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Update the current stops array (string array) and the GeoJSON array in the local state.\n   * @param updatedCurrentStops The updated stops.\n   * @param updatedCurrentStopsGeoJSON The updated GeoJSON.\n   * @category RoutingMenu\n   */\n  const updateCurrentStops = (\n    updatedCurrentStops,\n    updatedCurrentStopsGeoJSON,\n    updatedFocusedFieldIndex,\n  ) => {\n    dispatch(setCurrentStops(updatedCurrentStops));\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    setFocusedFieldIndex(updatedFocusedFieldIndex);\n  };\n\n  const updateFieldOnMapClick = (\n    updatedCurrentStops,\n    updatedFocusedFieldIndex,\n  ) => {\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    // Create GeoJSON\n    const tempGeoJSON = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            id: clickLocation.slice().reverse(),\n            type: 'coordinates',\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: clickLocation,\n          },\n        },\n      ],\n    };\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n    updateCurrentStops(\n      updatedCurrentStops,\n      updatedCurrentStopsGeoJSON,\n      updatedFocusedFieldIndex,\n    );\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * If a location was received through the props (user click on map) act accordingly.\n   * @category RoutingMenu\n   */\n  useEffect(() => {\n    if (clickLocation) {\n      // A click occurred on the map\n      if (currentStops[focusedFieldIndex] === '') {\n        // Performs when there's an empty field.\n        const updatedCurrentStops = currentStops;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(\n          currentStops,\n          focusedFieldIndex + 1 < currentStops.length\n            ? focusedFieldIndex + 1\n            : focusedFieldIndex,\n        );\n      } else {\n        const updatedCurrentStops = currentStops;\n        const updatedFocusedFieldIndex = focusedFieldIndex;\n        updatedCurrentStops[focusedFieldIndex] = clickLocation;\n        updateFieldOnMapClick(updatedCurrentStops, focusedFieldIndex);\n\n        const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n        // Create GeoJSON\n        const tempGeoJSON = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {\n                id: clickLocation.slice().reverse(),\n                type: 'coordinates',\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: clickLocation,\n              },\n            },\n          ],\n        };\n        updatedCurrentStopsGeoJSON[focusedFieldIndex] = tempGeoJSON;\n        updateCurrentStops(\n          updatedCurrentStops,\n          updatedCurrentStopsGeoJSON,\n          updatedFocusedFieldIndex,\n        );\n        dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickLocation]);\n\n  /**\n   * Process changing the current selected mot, save in local state and dispatch store action.\n   * @param event The change event\n   * @param newMot The new selected mot\n   * @category RoutingMenu\n   */\n  const handleMotChange = (event, newMot) => {\n    setCurrentMotState(newMot);\n    dispatch(setCurrentMot(newMot));\n  };\n\n  /**\n   * Gets callled when a search field is in focus. Keep track of the last focused/selected field.\n   * @param fieldIndex The search field index(order)\n   * @category RoutingMenu\n   */\n  const onFieldFocusHandler = fieldIndex => {\n    setFocusedFieldIndex(fieldIndex);\n    dispatch(setIsFieldFocused(true));\n  };\n\n  /**\n   * Create a new search field (hop) between already existing search fields\n   * @param indexToInsertAt The index to insert the new search field at.\n   * @category RoutingMenu\n   */\n  const addNewSearchFieldHandler = indexToInsertAt => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops.splice(indexToInsertAt, 0, '');\n    dispatch(setCurrentStops(updatedCurrentStops));\n  };\n\n  /**\n   * Remove a search field (hop) from a defined index. Then dispatch an update to the stops,\n   * so that the route can be updated if exists.\n   * @param indexToRemoveFrom The index to remove the search field from.\n   * @category RoutingMenu\n   */\n  const removeSearchFieldHandler = indexToRemoveFrom => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops.splice(indexToRemoveFrom, 1);\n    const updatedCurrentStopsGeoJSON = {};\n    Object.keys(currentStopsGeoJSON).forEach(key => {\n      if (key !== indexToRemoveFrom.toString()) {\n        updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n      }\n    });\n    dispatch(setCurrentStops(updatedCurrentStops));\n\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  /**\n   * Perform searching for stations through the station API\n   * @param event\n   * @param fieldIndex The search field(hop) index(order)\n   * @category RoutingMenu\n   */\n  const searchStopsHandler = (event, fieldIndex) => {\n    // only search if text is available\n    if (!event.target.value) {\n      const updatedCurrentStops = currentStops;\n      updatedCurrentStops[fieldIndex] = '';\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setShowLoadingBar(false);\n      return;\n    }\n    const updatedCurrentStops = _.clone(currentStops);\n    updatedCurrentStops[fieldIndex] = event.target.value;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setShowLoadingBar(true);\n\n    abortController.abort();\n    abortController = new AbortController();\n    const { signal } = abortController;\n\n    const reqUrl = `${stationSearchUrl}?q=${\n      event.target.value\n    }&key=${APIKey}&mots=${searchMotOnly ? currentMot : ''}`;\n\n    fetch(reqUrl, { signal })\n      .then(response => response.json())\n      .then(response => {\n        const searchResults = [];\n        response.features.forEach(singleResult => {\n          // Search results from the API\n          if (singleResult.properties.mot[currentMot])\n            searchResults.push(singleResult);\n        });\n        if (response.features.length === 0 || searchResults.length === 0) {\n          // No results for the given query\n          // onShowNotification(\"Couldn't find stations\", 'warning');\n          dispatch(showNotification(\"Couldn't find stations\", 'warning'));\n        }\n        setCurrentSearchResults(searchResults);\n        setShowLoadingBar(false);\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          // eslint-disable-next-line no-console\n          console.warn(`Abort ${reqUrl}`);\n          return;\n        }\n        // It's important to rethrow all other errors so you don't silence them!\n        // For example, any error thrown by setState(), will pass through here.\n        throw err;\n      });\n  };\n\n  /**\n   * The user makes changes to the current search. Either select the first result,\n   * or delete the text to make a new search.\n   * @param event\n   * @category RoutingMenu\n   */\n  const processHighlightedResultSelectHandler = event => {\n    const [firstSearchResult] = currentSearchResults;\n    if (event.key === 'Enter' && firstSearchResult) {\n      // The user has chosen the first result by pressing 'Enter' key on keyboard\n      const updatedCurrentStops = currentStops;\n      updateCurrentStops[focusedFieldIndex] = firstSearchResult.properties.name;\n      const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n      updatedCurrentStopsGeoJSON[focusedFieldIndex] = firstSearchResult;\n      dispatch(setCurrentStops(updatedCurrentStops));\n      setCurrentSearchResults([]);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n    if (event.key === 'Backspace') {\n      // The user has erased some of the search query. Reset everything and start all over.\n      let updateCurrentSearchResults = [];\n      if (event.target.value) updateCurrentSearchResults = currentSearchResults;\n      const updatedCurrentStopsGeoJSON = {};\n      Object.keys(currentStopsGeoJSON).forEach(key => {\n        if (key !== focusedFieldIndex.toString()) {\n          updatedCurrentStopsGeoJSON[key] = currentStopsGeoJSON[key];\n        }\n      });\n      setCurrentSearchResults(updateCurrentSearchResults);\n      dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n    }\n  };\n\n  /**\n   * The user uses the mouse/touch to select one of the search results.\n   * @param searchResult The clicked search result.\n   * @category RoutingMenu\n   */\n  const processClickedResultHandler = searchResult => {\n    const updatedCurrentStops = currentStops;\n    updatedCurrentStops[focusedFieldIndex] = searchResult.properties.name;\n    const updatedCurrentStopsGeoJSON = _.clone(currentStopsGeoJSON);\n    updatedCurrentStopsGeoJSON[focusedFieldIndex] = searchResult;\n    dispatch(setCurrentStops(updatedCurrentStops));\n    setCurrentSearchResults([]);\n\n    Object.keys(updatedCurrentStopsGeoJSON).forEach(key => {\n      if (key === focusedFieldIndex.toString()) {\n        updatedCurrentStopsGeoJSON[key].geometry.coordinates = to3857(\n          updatedCurrentStopsGeoJSON[key].geometry.coordinates,\n        );\n      }\n    });\n    dispatch(setCurrentStopsGeoJSON(updatedCurrentStopsGeoJSON));\n  };\n\n  const changeCurrentOtherMot = evt => {\n    if (!evt) {\n      setCurrentOtherMot(undefined);\n    } else {\n      const { value } = evt.target;\n      handleMotChange({}, value);\n      setCurrentOtherMot(value);\n    }\n  };\n\n  /**\n   * Render the component to the dom.\n   * @category RoutingMenu\n   */\n\n  return (\n    <div className=\"rd-routing-menu\">\n      <Paper square elevation={3}>\n        <div className=\"rd-routing-menu-header\">\n          <Tabs\n            value={DEFAULT_MOTS.includes(currentMot) ? currentMot : false}\n            className={classes.tabs}\n            onChange={(e, mot) => {\n              handleMotChange(e, mot);\n            }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            aria-label=\"mots icons\"\n          >\n            {currentMots.map(singleMot => {\n              return (\n                <Tab\n                  className={classes.tab}\n                  key={`mot-${singleMot.name}`}\n                  value={singleMot.name}\n                  icon={singleMot.icon}\n                  aria-label={singleMot.name}\n                />\n              );\n            })}\n          </Tabs>\n          <FormControl\n            className={\n              currentMot === currentOtherMot\n                ? classes.dropDownSelected\n                : classes.dropDown\n            }\n          >\n            <InputLabel id=\"rd-other-mot-label\">Other MOTs</InputLabel>\n            <Select\n              labelId=\"rd-other-mot-label\"\n              value={currentOtherMot}\n              onChange={changeCurrentOtherMot}\n            >\n              {otherMots.map(mot => {\n                return (\n                  <MenuItem value={mot.name} key={`other-mot-${mot.name}`}>\n                    {mot.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <TabPanel>\n          {currentStops.map((singleStop, index) => {\n            return (\n              <SearchField\n                // eslint-disable-next-line react/no-array-index-key\n                key={`searchField-${index}`}\n                index={index}\n                addNewSearchFieldHandler={addNewSearchFieldHandler}\n                currentStops={currentStops}\n                removeSearchFieldHandler={removeSearchFieldHandler}\n                searchStopsHandler={searchStopsHandler}\n                singleStop={singleStop}\n                processHighlightedResultSelectHandler={\n                  processHighlightedResultSelectHandler\n                }\n                onFieldFocusHandler={onFieldFocusHandler}\n              />\n            );\n          })}\n          <div className=\"rd-mot-checkbox\">\n            <Checkbox\n              className={classes.checkbox}\n              checked={searchMotOnly}\n              onChange={() => setSearchMotOnly(!searchMotOnly)}\n              color=\"primary\"\n              inputProps={{ 'aria-label': 'use only mot' }}\n            />\n            <span>Search only selected mode of transport</span>\n          </div>\n        </TabPanel>\n        {showLoadingBar ? <LinearProgress /> : null}\n      </Paper>\n      <SearchResults\n        currentSearchResults={currentSearchResults}\n        processClickedResultHandler={processClickedResultHandler}\n      />\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string,\n  index: PropTypes.number,\n};\n\nTabPanel.defaultProps = {\n  value: null,\n  index: null,\n};\n\nRoutingMenu.propTypes = {\n  mots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  APIKey: PropTypes.string.isRequired,\n  stationSearchUrl: PropTypes.string.isRequired,\n};\n\nexport default RoutingMenu;\n","import RoutingMenu from './RoutingMenu';\n\nexport default RoutingMenu;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { connect } from 'react-redux';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\n\n/**\n * The notification handler props\n * @typedef NotificationHandlerProps\n * @type {props}\n * @property {string} notificationMessage Obtained from the store, the message to be displayed. Can be any valid string.\n * @property {string} notificationType Obtained from the store, the message type (error, success, info, etc...)\n * @category Props\n */\n\n/**\n * Handles all application notification shown to the user\n * @category NotificationHandler\n */\nclass NotificationHandler extends React.Component {\n  /**\n   * Default constructor. visibility is set to false by default. Controlled through state property \"open\"\n   * @param {...NotificationHandlerProps} props Props received so that the component can function properly.\n   * @category NotificationHandler\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n    };\n  }\n\n  /**\n   * If a new notification message is received, show it accordingly.\n   * @category NotificationHandler\n   */\n  componentDidUpdate(prevProps) {\n    const { notificationMessage } = this.props;\n    if (\n      notificationMessage &&\n      notificationMessage !== prevProps.notificationMessage\n    ) {\n      this.handleOpen();\n    }\n  }\n\n  /**\n   * Show the notification to the view.\n   * @category NotificationHandler\n   */\n  handleOpen = () => {\n    this.setState({\n      open: true,\n    });\n  };\n\n  /**\n   * Hide the notification from the view.\n   * @category NotificationHandler\n   */\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  /**\n   * Render the notification to the dom.\n   * @category NotificationHandler\n   */\n  render() {\n    const { notificationMessage, notificationType } = this.props;\n    const { open } = this.state;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={notificationType}\n          elevation={6}\n          variant=\"filled\"\n        >\n          {notificationMessage}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    notificationMessage: state.MapReducer.notificationMessage,\n    notificationType: state.MapReducer.notificationType,\n  };\n};\n\nNotificationHandler.propTypes = {\n  notificationMessage: PropTypes.string.isRequired,\n  notificationType: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps)(NotificationHandler);\n","import NotificationHandler from './NotificationHandler';\n\nexport default NotificationHandler;\n","import React, { useState, useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport store from '../../store/store';\nimport MapComponent from '../MapComponent';\nimport RoutingMenu from '../RoutingMenu';\nimport NotificationHandler from '../NotificationHandler';\nimport { VALID_MOTS } from '../../constants';\n\nconst propTypes = {\n  routingUrl: PropTypes.string,\n  stationSearchUrl: PropTypes.string,\n  mots: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  mots: VALID_MOTS,\n  routingUrl: 'https://api.geops.io/routing/dev/',\n  stationSearchUrl: 'https://api.geops.io/stops/dev/',\n};\n\n/**\n * Root component of the application that holds all other sub-components.\n * @param {string[]} mots List of mots to be available (ex: ['bus', 'train'])\n * @param {string} routingUrl The API routing url to be used for navigation.\n * @param {string} stationSearchUrl The API station search URL to be used for searching for stations.\n */\nfunction App(props) {\n  const { mots, routingUrl, stationSearchUrl } = props;\n  const [apiKey, setApiKey] = useState(null);\n\n  useEffect(() => {\n    fetch('https://developer.geops.io/publickey')\n      .then(response => response.json())\n      .then(data => {\n        setApiKey(data.key);\n      })\n      .catch(() => {\n        console.error('Request to get the apiKey failed');\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!apiKey) {\n    return null;\n  }\n  return (\n    <Provider store={store}>\n      <RoutingMenu\n        mots={mots}\n        stationSearchUrl={stationSearchUrl}\n        APIKey={apiKey}\n      />\n      <MapComponent mots={mots} routingUrl={routingUrl} APIKey={apiKey} />\n      <NotificationHandler />\n    </Provider>\n  );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              // eslint-disable-next-line no-console\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport default function register() {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import polyfills for ie 11\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}